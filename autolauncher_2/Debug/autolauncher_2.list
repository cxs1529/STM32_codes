
autolauncher_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f90  08006f90  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f90  08006f90  00007f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f98  08006f98  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f98  08006f98  00007f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f9c  08006f9c  00007f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006fa0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  08006ffc  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08006ffc  00008354  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001028f  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002752  00000000  00000000  00018314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  0001aa68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c92  00000000  00000000  0001ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192dd  00000000  00000000  0001c6fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014e60  00000000  00000000  000359d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000920b0  00000000  00000000  0004a837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc8e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a1c  00000000  00000000  000dc92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000e1348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006aa4 	.word	0x08006aa4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08006aa4 	.word	0x08006aa4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_fmul>:
 80003b4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003bc:	bf1e      	ittt	ne
 80003be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003c2:	ea92 0f0c 	teqne	r2, ip
 80003c6:	ea93 0f0c 	teqne	r3, ip
 80003ca:	d06f      	beq.n	80004ac <__aeabi_fmul+0xf8>
 80003cc:	441a      	add	r2, r3
 80003ce:	ea80 0c01 	eor.w	ip, r0, r1
 80003d2:	0240      	lsls	r0, r0, #9
 80003d4:	bf18      	it	ne
 80003d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003da:	d01e      	beq.n	800041a <__aeabi_fmul+0x66>
 80003dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e8:	fba0 3101 	umull	r3, r1, r0, r1
 80003ec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003f0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003f4:	bf3e      	ittt	cc
 80003f6:	0049      	lslcc	r1, r1, #1
 80003f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003fc:	005b      	lslcc	r3, r3, #1
 80003fe:	ea40 0001 	orr.w	r0, r0, r1
 8000402:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000406:	2afd      	cmp	r2, #253	@ 0xfd
 8000408:	d81d      	bhi.n	8000446 <__aeabi_fmul+0x92>
 800040a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800040e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000412:	bf08      	it	eq
 8000414:	f020 0001 	biceq.w	r0, r0, #1
 8000418:	4770      	bx	lr
 800041a:	f090 0f00 	teq	r0, #0
 800041e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000422:	bf08      	it	eq
 8000424:	0249      	lsleq	r1, r1, #9
 8000426:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800042a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800042e:	3a7f      	subs	r2, #127	@ 0x7f
 8000430:	bfc2      	ittt	gt
 8000432:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000436:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800043a:	4770      	bxgt	lr
 800043c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	3a01      	subs	r2, #1
 8000446:	dc5d      	bgt.n	8000504 <__aeabi_fmul+0x150>
 8000448:	f112 0f19 	cmn.w	r2, #25
 800044c:	bfdc      	itt	le
 800044e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000452:	4770      	bxle	lr
 8000454:	f1c2 0200 	rsb	r2, r2, #0
 8000458:	0041      	lsls	r1, r0, #1
 800045a:	fa21 f102 	lsr.w	r1, r1, r2
 800045e:	f1c2 0220 	rsb	r2, r2, #32
 8000462:	fa00 fc02 	lsl.w	ip, r0, r2
 8000466:	ea5f 0031 	movs.w	r0, r1, rrx
 800046a:	f140 0000 	adc.w	r0, r0, #0
 800046e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000472:	bf08      	it	eq
 8000474:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000478:	4770      	bx	lr
 800047a:	f092 0f00 	teq	r2, #0
 800047e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0040      	lsleq	r0, r0, #1
 8000486:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800048a:	3a01      	subeq	r2, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xce>
 800048e:	ea40 000c 	orr.w	r0, r0, ip
 8000492:	f093 0f00 	teq	r3, #0
 8000496:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800049a:	bf02      	ittt	eq
 800049c:	0049      	lsleq	r1, r1, #1
 800049e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004a2:	3b01      	subeq	r3, #1
 80004a4:	d0f9      	beq.n	800049a <__aeabi_fmul+0xe6>
 80004a6:	ea41 010c 	orr.w	r1, r1, ip
 80004aa:	e78f      	b.n	80003cc <__aeabi_fmul+0x18>
 80004ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	bf18      	it	ne
 80004b6:	ea93 0f0c 	teqne	r3, ip
 80004ba:	d00a      	beq.n	80004d2 <__aeabi_fmul+0x11e>
 80004bc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004c0:	bf18      	it	ne
 80004c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004c6:	d1d8      	bne.n	800047a <__aeabi_fmul+0xc6>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	4770      	bx	lr
 80004d2:	f090 0f00 	teq	r0, #0
 80004d6:	bf17      	itett	ne
 80004d8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004dc:	4608      	moveq	r0, r1
 80004de:	f091 0f00 	teqne	r1, #0
 80004e2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004e6:	d014      	beq.n	8000512 <__aeabi_fmul+0x15e>
 80004e8:	ea92 0f0c 	teq	r2, ip
 80004ec:	d101      	bne.n	80004f2 <__aeabi_fmul+0x13e>
 80004ee:	0242      	lsls	r2, r0, #9
 80004f0:	d10f      	bne.n	8000512 <__aeabi_fmul+0x15e>
 80004f2:	ea93 0f0c 	teq	r3, ip
 80004f6:	d103      	bne.n	8000500 <__aeabi_fmul+0x14c>
 80004f8:	024b      	lsls	r3, r1, #9
 80004fa:	bf18      	it	ne
 80004fc:	4608      	movne	r0, r1
 80004fe:	d108      	bne.n	8000512 <__aeabi_fmul+0x15e>
 8000500:	ea80 0001 	eor.w	r0, r0, r1
 8000504:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000508:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800050c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000510:	4770      	bx	lr
 8000512:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000516:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800051a:	4770      	bx	lr

0800051c <__aeabi_drsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e002      	b.n	8000528 <__adddf3>
 8000522:	bf00      	nop

08000524 <__aeabi_dsub>:
 8000524:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000528 <__adddf3>:
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000532:	ea94 0f05 	teq	r4, r5
 8000536:	bf08      	it	eq
 8000538:	ea90 0f02 	teqeq	r0, r2
 800053c:	bf1f      	itttt	ne
 800053e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000542:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000546:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800054a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054e:	f000 80e2 	beq.w	8000716 <__adddf3+0x1ee>
 8000552:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000556:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800055a:	bfb8      	it	lt
 800055c:	426d      	neglt	r5, r5
 800055e:	dd0c      	ble.n	800057a <__adddf3+0x52>
 8000560:	442c      	add	r4, r5
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	ea82 0000 	eor.w	r0, r2, r0
 800056e:	ea83 0101 	eor.w	r1, r3, r1
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	2d36      	cmp	r5, #54	@ 0x36
 800057c:	bf88      	it	hi
 800057e:	bd30      	pophi	{r4, r5, pc}
 8000580:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000584:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000588:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800058c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x70>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800059c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x84>
 80005a6:	4252      	negs	r2, r2
 80005a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ac:	ea94 0f05 	teq	r4, r5
 80005b0:	f000 80a7 	beq.w	8000702 <__adddf3+0x1da>
 80005b4:	f1a4 0401 	sub.w	r4, r4, #1
 80005b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005bc:	db0d      	blt.n	80005da <__adddf3+0xb2>
 80005be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005c2:	fa22 f205 	lsr.w	r2, r2, r5
 80005c6:	1880      	adds	r0, r0, r2
 80005c8:	f141 0100 	adc.w	r1, r1, #0
 80005cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d0:	1880      	adds	r0, r0, r2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	4159      	adcs	r1, r3
 80005d8:	e00e      	b.n	80005f8 <__adddf3+0xd0>
 80005da:	f1a5 0520 	sub.w	r5, r5, #32
 80005de:	f10e 0e20 	add.w	lr, lr, #32
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e8:	bf28      	it	cs
 80005ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ee:	fa43 f305 	asr.w	r3, r3, r5
 80005f2:	18c0      	adds	r0, r0, r3
 80005f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	d507      	bpl.n	800060e <__adddf3+0xe6>
 80005fe:	f04f 0e00 	mov.w	lr, #0
 8000602:	f1dc 0c00 	rsbs	ip, ip, #0
 8000606:	eb7e 0000 	sbcs.w	r0, lr, r0
 800060a:	eb6e 0101 	sbc.w	r1, lr, r1
 800060e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000612:	d31b      	bcc.n	800064c <__adddf3+0x124>
 8000614:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000618:	d30c      	bcc.n	8000634 <__adddf3+0x10c>
 800061a:	0849      	lsrs	r1, r1, #1
 800061c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000620:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000624:	f104 0401 	add.w	r4, r4, #1
 8000628:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800062c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000630:	f080 809a 	bcs.w	8000768 <__adddf3+0x240>
 8000634:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	ea41 0105 	orr.w	r1, r1, r5
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000650:	4140      	adcs	r0, r0
 8000652:	eb41 0101 	adc.w	r1, r1, r1
 8000656:	3c01      	subs	r4, #1
 8000658:	bf28      	it	cs
 800065a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800065e:	d2e9      	bcs.n	8000634 <__adddf3+0x10c>
 8000660:	f091 0f00 	teq	r1, #0
 8000664:	bf04      	itt	eq
 8000666:	4601      	moveq	r1, r0
 8000668:	2000      	moveq	r0, #0
 800066a:	fab1 f381 	clz	r3, r1
 800066e:	bf08      	it	eq
 8000670:	3320      	addeq	r3, #32
 8000672:	f1a3 030b 	sub.w	r3, r3, #11
 8000676:	f1b3 0220 	subs.w	r2, r3, #32
 800067a:	da0c      	bge.n	8000696 <__adddf3+0x16e>
 800067c:	320c      	adds	r2, #12
 800067e:	dd08      	ble.n	8000692 <__adddf3+0x16a>
 8000680:	f102 0c14 	add.w	ip, r2, #20
 8000684:	f1c2 020c 	rsb	r2, r2, #12
 8000688:	fa01 f00c 	lsl.w	r0, r1, ip
 800068c:	fa21 f102 	lsr.w	r1, r1, r2
 8000690:	e00c      	b.n	80006ac <__adddf3+0x184>
 8000692:	f102 0214 	add.w	r2, r2, #20
 8000696:	bfd8      	it	le
 8000698:	f1c2 0c20 	rsble	ip, r2, #32
 800069c:	fa01 f102 	lsl.w	r1, r1, r2
 80006a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a4:	bfdc      	itt	le
 80006a6:	ea41 010c 	orrle.w	r1, r1, ip
 80006aa:	4090      	lslle	r0, r2
 80006ac:	1ae4      	subs	r4, r4, r3
 80006ae:	bfa2      	ittt	ge
 80006b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b4:	4329      	orrge	r1, r5
 80006b6:	bd30      	popge	{r4, r5, pc}
 80006b8:	ea6f 0404 	mvn.w	r4, r4
 80006bc:	3c1f      	subs	r4, #31
 80006be:	da1c      	bge.n	80006fa <__adddf3+0x1d2>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc0e      	bgt.n	80006e2 <__adddf3+0x1ba>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0220 	rsb	r2, r4, #32
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f302 	lsl.w	r3, r1, r2
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	fa21 f304 	lsr.w	r3, r1, r4
 80006dc:	ea45 0103 	orr.w	r1, r5, r3
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f1c4 040c 	rsb	r4, r4, #12
 80006e6:	f1c4 0220 	rsb	r2, r4, #32
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 f304 	lsl.w	r3, r1, r4
 80006f2:	ea40 0003 	orr.w	r0, r0, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	fa21 f004 	lsr.w	r0, r1, r4
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	f094 0f00 	teq	r4, #0
 8000706:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800070a:	bf06      	itte	eq
 800070c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000710:	3401      	addeq	r4, #1
 8000712:	3d01      	subne	r5, #1
 8000714:	e74e      	b.n	80005b4 <__adddf3+0x8c>
 8000716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071a:	bf18      	it	ne
 800071c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000720:	d029      	beq.n	8000776 <__adddf3+0x24e>
 8000722:	ea94 0f05 	teq	r4, r5
 8000726:	bf08      	it	eq
 8000728:	ea90 0f02 	teqeq	r0, r2
 800072c:	d005      	beq.n	800073a <__adddf3+0x212>
 800072e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000732:	bf04      	itt	eq
 8000734:	4619      	moveq	r1, r3
 8000736:	4610      	moveq	r0, r2
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea91 0f03 	teq	r1, r3
 800073e:	bf1e      	ittt	ne
 8000740:	2100      	movne	r1, #0
 8000742:	2000      	movne	r0, #0
 8000744:	bd30      	popne	{r4, r5, pc}
 8000746:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800074a:	d105      	bne.n	8000758 <__adddf3+0x230>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	4149      	adcs	r1, r1
 8000750:	bf28      	it	cs
 8000752:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800075c:	bf3c      	itt	cc
 800075e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000762:	bd30      	popcc	{r4, r5, pc}
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000768:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800076c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800077a:	bf1a      	itte	ne
 800077c:	4619      	movne	r1, r3
 800077e:	4610      	movne	r0, r2
 8000780:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000784:	bf1c      	itt	ne
 8000786:	460b      	movne	r3, r1
 8000788:	4602      	movne	r2, r0
 800078a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078e:	bf06      	itte	eq
 8000790:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000794:	ea91 0f03 	teqeq	r1, r3
 8000798:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	bf00      	nop

080007a0 <__aeabi_ui2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	f04f 0100 	mov.w	r1, #0
 80007bc:	e750      	b.n	8000660 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2d>:
 80007c0:	f090 0f00 	teq	r0, #0
 80007c4:	bf04      	itt	eq
 80007c6:	2100      	moveq	r1, #0
 80007c8:	4770      	bxeq	lr
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	e73e      	b.n	8000660 <__adddf3+0x138>
 80007e2:	bf00      	nop

080007e4 <__aeabi_f2d>:
 80007e4:	0042      	lsls	r2, r0, #1
 80007e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007f2:	bf1f      	itttt	ne
 80007f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000800:	4770      	bxne	lr
 8000802:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000806:	bf08      	it	eq
 8000808:	4770      	bxeq	lr
 800080a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800080e:	bf04      	itt	eq
 8000810:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800081c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	e71c      	b.n	8000660 <__adddf3+0x138>
 8000826:	bf00      	nop

08000828 <__aeabi_ul2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f04f 0500 	mov.w	r5, #0
 8000836:	e00a      	b.n	800084e <__aeabi_l2d+0x16>

08000838 <__aeabi_l2d>:
 8000838:	ea50 0201 	orrs.w	r2, r0, r1
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000846:	d502      	bpl.n	800084e <__aeabi_l2d+0x16>
 8000848:	4240      	negs	r0, r0
 800084a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800084e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000852:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000856:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800085a:	f43f aed8 	beq.w	800060e <__adddf3+0xe6>
 800085e:	f04f 0203 	mov.w	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000876:	f1c2 0320 	rsb	r3, r2, #32
 800087a:	fa00 fc03 	lsl.w	ip, r0, r3
 800087e:	fa20 f002 	lsr.w	r0, r0, r2
 8000882:	fa01 fe03 	lsl.w	lr, r1, r3
 8000886:	ea40 000e 	orr.w	r0, r0, lr
 800088a:	fa21 f102 	lsr.w	r1, r1, r2
 800088e:	4414      	add	r4, r2
 8000890:	e6bd      	b.n	800060e <__adddf3+0xe6>
 8000892:	bf00      	nop

08000894 <__aeabi_d2uiz>:
 8000894:	004a      	lsls	r2, r1, #1
 8000896:	d211      	bcs.n	80008bc <__aeabi_d2uiz+0x28>
 8000898:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800089c:	d211      	bcs.n	80008c2 <__aeabi_d2uiz+0x2e>
 800089e:	d50d      	bpl.n	80008bc <__aeabi_d2uiz+0x28>
 80008a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a8:	d40e      	bmi.n	80008c8 <__aeabi_d2uiz+0x34>
 80008aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008b6:	fa23 f002 	lsr.w	r0, r3, r2
 80008ba:	4770      	bx	lr
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	4770      	bx	lr
 80008c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008c6:	d102      	bne.n	80008ce <__aeabi_d2uiz+0x3a>
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	4770      	bx	lr
 80008ce:	f04f 0000 	mov.w	r0, #0
 80008d2:	4770      	bx	lr

080008d4 <__aeabi_d2f>:
 80008d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008d8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008dc:	bf24      	itt	cs
 80008de:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008e2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008e6:	d90d      	bls.n	8000904 <__aeabi_d2f+0x30>
 80008e8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008ec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008f0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008f4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008f8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000908:	d121      	bne.n	800094e <__aeabi_d2f+0x7a>
 800090a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800090e:	bfbc      	itt	lt
 8000910:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000914:	4770      	bxlt	lr
 8000916:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800091e:	f1c2 0218 	rsb	r2, r2, #24
 8000922:	f1c2 0c20 	rsb	ip, r2, #32
 8000926:	fa10 f30c 	lsls.w	r3, r0, ip
 800092a:	fa20 f002 	lsr.w	r0, r0, r2
 800092e:	bf18      	it	ne
 8000930:	f040 0001 	orrne.w	r0, r0, #1
 8000934:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000938:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800093c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000940:	ea40 000c 	orr.w	r0, r0, ip
 8000944:	fa23 f302 	lsr.w	r3, r3, r2
 8000948:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800094c:	e7cc      	b.n	80008e8 <__aeabi_d2f+0x14>
 800094e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000952:	d107      	bne.n	8000964 <__aeabi_d2f+0x90>
 8000954:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000958:	bf1e      	ittt	ne
 800095a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800095e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000962:	4770      	bxne	lr
 8000964:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000968:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800096c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_frsub>:
 8000974:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000978:	e002      	b.n	8000980 <__addsf3>
 800097a:	bf00      	nop

0800097c <__aeabi_fsub>:
 800097c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000980 <__addsf3>:
 8000980:	0042      	lsls	r2, r0, #1
 8000982:	bf1f      	itttt	ne
 8000984:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000988:	ea92 0f03 	teqne	r2, r3
 800098c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000990:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000994:	d06a      	beq.n	8000a6c <__addsf3+0xec>
 8000996:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800099a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800099e:	bfc1      	itttt	gt
 80009a0:	18d2      	addgt	r2, r2, r3
 80009a2:	4041      	eorgt	r1, r0
 80009a4:	4048      	eorgt	r0, r1
 80009a6:	4041      	eorgt	r1, r0
 80009a8:	bfb8      	it	lt
 80009aa:	425b      	neglt	r3, r3
 80009ac:	2b19      	cmp	r3, #25
 80009ae:	bf88      	it	hi
 80009b0:	4770      	bxhi	lr
 80009b2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ba:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009be:	bf18      	it	ne
 80009c0:	4240      	negne	r0, r0
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009c6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009ca:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009ce:	bf18      	it	ne
 80009d0:	4249      	negne	r1, r1
 80009d2:	ea92 0f03 	teq	r2, r3
 80009d6:	d03f      	beq.n	8000a58 <__addsf3+0xd8>
 80009d8:	f1a2 0201 	sub.w	r2, r2, #1
 80009dc:	fa41 fc03 	asr.w	ip, r1, r3
 80009e0:	eb10 000c 	adds.w	r0, r0, ip
 80009e4:	f1c3 0320 	rsb	r3, r3, #32
 80009e8:	fa01 f103 	lsl.w	r1, r1, r3
 80009ec:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009f0:	d502      	bpl.n	80009f8 <__addsf3+0x78>
 80009f2:	4249      	negs	r1, r1
 80009f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009f8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009fc:	d313      	bcc.n	8000a26 <__addsf3+0xa6>
 80009fe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a02:	d306      	bcc.n	8000a12 <__addsf3+0x92>
 8000a04:	0840      	lsrs	r0, r0, #1
 8000a06:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a0a:	f102 0201 	add.w	r2, r2, #1
 8000a0e:	2afe      	cmp	r2, #254	@ 0xfe
 8000a10:	d251      	bcs.n	8000ab6 <__addsf3+0x136>
 8000a12:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a1a:	bf08      	it	eq
 8000a1c:	f020 0001 	biceq.w	r0, r0, #1
 8000a20:	ea40 0003 	orr.w	r0, r0, r3
 8000a24:	4770      	bx	lr
 8000a26:	0049      	lsls	r1, r1, #1
 8000a28:	eb40 0000 	adc.w	r0, r0, r0
 8000a2c:	3a01      	subs	r2, #1
 8000a2e:	bf28      	it	cs
 8000a30:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a34:	d2ed      	bcs.n	8000a12 <__addsf3+0x92>
 8000a36:	fab0 fc80 	clz	ip, r0
 8000a3a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a3e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a42:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a46:	bfaa      	itet	ge
 8000a48:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a4c:	4252      	neglt	r2, r2
 8000a4e:	4318      	orrge	r0, r3
 8000a50:	bfbc      	itt	lt
 8000a52:	40d0      	lsrlt	r0, r2
 8000a54:	4318      	orrlt	r0, r3
 8000a56:	4770      	bx	lr
 8000a58:	f092 0f00 	teq	r2, #0
 8000a5c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a60:	bf06      	itte	eq
 8000a62:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a66:	3201      	addeq	r2, #1
 8000a68:	3b01      	subne	r3, #1
 8000a6a:	e7b5      	b.n	80009d8 <__addsf3+0x58>
 8000a6c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a7a:	d021      	beq.n	8000ac0 <__addsf3+0x140>
 8000a7c:	ea92 0f03 	teq	r2, r3
 8000a80:	d004      	beq.n	8000a8c <__addsf3+0x10c>
 8000a82:	f092 0f00 	teq	r2, #0
 8000a86:	bf08      	it	eq
 8000a88:	4608      	moveq	r0, r1
 8000a8a:	4770      	bx	lr
 8000a8c:	ea90 0f01 	teq	r0, r1
 8000a90:	bf1c      	itt	ne
 8000a92:	2000      	movne	r0, #0
 8000a94:	4770      	bxne	lr
 8000a96:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a9a:	d104      	bne.n	8000aa6 <__addsf3+0x126>
 8000a9c:	0040      	lsls	r0, r0, #1
 8000a9e:	bf28      	it	cs
 8000aa0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000aaa:	bf3c      	itt	cc
 8000aac:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ab0:	4770      	bxcc	lr
 8000ab2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ab6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000aba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000abe:	4770      	bx	lr
 8000ac0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ac4:	bf16      	itet	ne
 8000ac6:	4608      	movne	r0, r1
 8000ac8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000acc:	4601      	movne	r1, r0
 8000ace:	0242      	lsls	r2, r0, #9
 8000ad0:	bf06      	itte	eq
 8000ad2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ad6:	ea90 0f01 	teqeq	r0, r1
 8000ada:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_ui2f>:
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e004      	b.n	8000af0 <__aeabi_i2f+0x8>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_i2f>:
 8000ae8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000aec:	bf48      	it	mi
 8000aee:	4240      	negmi	r0, r0
 8000af0:	ea5f 0c00 	movs.w	ip, r0
 8000af4:	bf08      	it	eq
 8000af6:	4770      	bxeq	lr
 8000af8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000afc:	4601      	mov	r1, r0
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	e01c      	b.n	8000b3e <__aeabi_l2f+0x2a>

08000b04 <__aeabi_ul2f>:
 8000b04:	ea50 0201 	orrs.w	r2, r0, r1
 8000b08:	bf08      	it	eq
 8000b0a:	4770      	bxeq	lr
 8000b0c:	f04f 0300 	mov.w	r3, #0
 8000b10:	e00a      	b.n	8000b28 <__aeabi_l2f+0x14>
 8000b12:	bf00      	nop

08000b14 <__aeabi_l2f>:
 8000b14:	ea50 0201 	orrs.w	r2, r0, r1
 8000b18:	bf08      	it	eq
 8000b1a:	4770      	bxeq	lr
 8000b1c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b20:	d502      	bpl.n	8000b28 <__aeabi_l2f+0x14>
 8000b22:	4240      	negs	r0, r0
 8000b24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b28:	ea5f 0c01 	movs.w	ip, r1
 8000b2c:	bf02      	ittt	eq
 8000b2e:	4684      	moveq	ip, r0
 8000b30:	4601      	moveq	r1, r0
 8000b32:	2000      	moveq	r0, #0
 8000b34:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b38:	bf08      	it	eq
 8000b3a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b3e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b42:	fabc f28c 	clz	r2, ip
 8000b46:	3a08      	subs	r2, #8
 8000b48:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b4c:	db10      	blt.n	8000b70 <__aeabi_l2f+0x5c>
 8000b4e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b52:	4463      	add	r3, ip
 8000b54:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b58:	f1c2 0220 	rsb	r2, r2, #32
 8000b5c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b60:	fa20 f202 	lsr.w	r2, r0, r2
 8000b64:	eb43 0002 	adc.w	r0, r3, r2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f102 0220 	add.w	r2, r2, #32
 8000b74:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b78:	f1c2 0220 	rsb	r2, r2, #32
 8000b7c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b80:	fa21 f202 	lsr.w	r2, r1, r2
 8000b84:	eb43 0002 	adc.w	r0, r3, r2
 8000b88:	bf08      	it	eq
 8000b8a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_f2iz>:
 8000b90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b94:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b98:	d30f      	bcc.n	8000bba <__aeabi_f2iz+0x2a>
 8000b9a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b9e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ba2:	d90d      	bls.n	8000bc0 <__aeabi_f2iz+0x30>
 8000ba4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ba8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bac:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bb0:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb4:	bf18      	it	ne
 8000bb6:	4240      	negne	r0, r0
 8000bb8:	4770      	bx	lr
 8000bba:	f04f 0000 	mov.w	r0, #0
 8000bbe:	4770      	bx	lr
 8000bc0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bc4:	d101      	bne.n	8000bca <__aeabi_f2iz+0x3a>
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	d105      	bne.n	8000bd6 <__aeabi_f2iz+0x46>
 8000bca:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000bce:	bf08      	it	eq
 8000bd0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000bee:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <MX_ADC1_Init+0x78>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000c06:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000c1a:	f001 fccd 	bl	80025b8 <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000c24:	f001 f9da 	bl	8001fdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c28:	230a      	movs	r3, #10
 8000c2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_ADC1_Init+0x74>)
 8000c3a:	f001 ff81 	bl	8002b40 <HAL_ADC_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c44:	f001 f9ca 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000078 	.word	0x20000078
 8000c54:	40012400 	.word	0x40012400

08000c58 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c68:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000c6a:	4a19      	ldr	r2, [pc, #100]	@ (8000cd0 <MX_ADC2_Init+0x78>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000c82:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c86:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c88:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c94:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000c96:	f001 fc8f 	bl	80025b8 <HAL_ADC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000ca0:	f001 f99c 	bl	8001fdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cac:	2300      	movs	r3, #0
 8000cae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <MX_ADC2_Init+0x74>)
 8000cb6:	f001 ff43 	bl	8002b40 <HAL_ADC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000cc0:	f001 f98c 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200000a8 	.word	0x200000a8
 8000cd0:	40012800 	.word	0x40012800

08000cd4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08a      	sub	sp, #40	@ 0x28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a28      	ldr	r2, [pc, #160]	@ (8000d90 <HAL_ADC_MspInit+0xbc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d122      	bne.n	8000d3a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cf4:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a26      	ldr	r2, [pc, #152]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a20      	ldr	r2, [pc, #128]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d12:	f043 0310 	orr.w	r3, r3, #16
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0310 	and.w	r3, r3, #16
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d24:	2301      	movs	r3, #1
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4819      	ldr	r0, [pc, #100]	@ (8000d98 <HAL_ADC_MspInit+0xc4>)
 8000d34:	f002 f97c 	bl	8003030 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d38:	e026      	b.n	8000d88 <HAL_ADC_MspInit+0xb4>
  else if(adcHandle->Instance==ADC2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a17      	ldr	r2, [pc, #92]	@ (8000d9c <HAL_ADC_MspInit+0xc8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d121      	bne.n	8000d88 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d44:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a0c      	ldr	r2, [pc, #48]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d62:	f043 0310 	orr.w	r3, r3, #16
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_ADC_MspInit+0xc0>)
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f003 0310 	and.w	r3, r3, #16
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4805      	ldr	r0, [pc, #20]	@ (8000d98 <HAL_ADC_MspInit+0xc4>)
 8000d84:	f002 f954 	bl	8003030 <HAL_GPIO_Init>
}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	@ 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40012400 	.word	0x40012400
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40012800 	.word	0x40012800

08000da0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0310 	add.w	r3, r7, #16
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db4:	4b42      	ldr	r3, [pc, #264]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a41      	ldr	r2, [pc, #260]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0310 	and.w	r3, r3, #16
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a3b      	ldr	r2, [pc, #236]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000dd2:	f043 0320 	orr.w	r3, r3, #32
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b39      	ldr	r3, [pc, #228]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0320 	and.w	r3, r3, #32
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	4b36      	ldr	r3, [pc, #216]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a35      	ldr	r2, [pc, #212]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b33      	ldr	r3, [pc, #204]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b30      	ldr	r3, [pc, #192]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <MX_GPIO_Init+0x120>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	603b      	str	r3, [r7, #0]
 8000e12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000e14:	2200      	movs	r2, #0
 8000e16:	f64f 71dc 	movw	r1, #65500	@ 0xffdc
 8000e1a:	482a      	ldr	r0, [pc, #168]	@ (8000ec4 <MX_GPIO_Init+0x124>)
 8000e1c:	f002 fa8c 	bl	8003338 <HAL_GPIO_WritePin>
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MUX_SELECT_Pin|RELAY_K12_CAL_RES_Pin|RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin
 8000e20:	2200      	movs	r2, #0
 8000e22:	f649 1104 	movw	r1, #39172	@ 0x9904
 8000e26:	4828      	ldr	r0, [pc, #160]	@ (8000ec8 <MX_GPIO_Init+0x128>)
 8000e28:	f002 fa86 	bl	8003338 <HAL_GPIO_WritePin>
                          |RELAY_K8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f24c 313a 	movw	r1, #49978	@ 0xc33a
 8000e32:	4826      	ldr	r0, [pc, #152]	@ (8000ecc <MX_GPIO_Init+0x12c>)
 8000e34:	f002 fa80 	bl	8003338 <HAL_GPIO_WritePin>
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4824      	ldr	r0, [pc, #144]	@ (8000ed0 <MX_GPIO_Init+0x130>)
 8000e3e:	f002 fa7b 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = SSR_3_Pin|SSR_2_Pin|SSR_1_Pin|ENABLE_M1_Pin
 8000e42:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8000e46:	613b      	str	r3, [r7, #16]
                          |ENABLE_M2_Pin|DIR_Pin|SSR_6_Pin|SSR_5_Pin
                          |RELAY_RESET_3_Pin|RELAY_RESET_2_Pin|RELAY_K7_Pin|RELAY_K1_Pin
                          |RELAY_K2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481a      	ldr	r0, [pc, #104]	@ (8000ec4 <MX_GPIO_Init+0x124>)
 8000e5c:	f002 f8e8 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = MUX_SELECT_Pin|RELAY_K12_CAL_RES_Pin|RELAY_K11_CAL_CONT_Pin|RELAY_K9_K10_GND_COND_Pin
 8000e60:	f649 1304 	movw	r3, #39172	@ 0x9904
 8000e64:	613b      	str	r3, [r7, #16]
                          |RELAY_K8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	4813      	ldr	r0, [pc, #76]	@ (8000ec8 <MX_GPIO_Init+0x128>)
 8000e7a:	f002 f8d9 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|SSR_8_Pin|SSR_7_Pin|RELAY_K4_Pin
 8000e7e:	f24c 333a 	movw	r3, #49978	@ 0xc33a
 8000e82:	613b      	str	r3, [r7, #16]
                          |RELAY_K5_Pin|RELAY_K6_Pin|RELAY_RESET_1_Pin|SSR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <MX_GPIO_Init+0x12c>)
 8000e98:	f002 f8ca 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_K3_Pin;
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_K3_GPIO_Port, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <MX_GPIO_Init+0x130>)
 8000eb4:	f002 f8bc 	bl	8003030 <HAL_GPIO_Init>

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40010c00 	.word	0x40010c00
 8000ed0:	40011400 	.word	0x40011400

08000ed4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eda:	4a13      	ldr	r2, [pc, #76]	@ (8000f28 <MX_I2C1_Init+0x54>)
 8000edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <MX_I2C1_Init+0x58>)
 8000ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000ef2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efe:	4b09      	ldr	r3, [pc, #36]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <MX_I2C1_Init+0x50>)
 8000f12:	f002 fa43 	bl	800339c <HAL_I2C_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f1c:	f001 f85e 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000d8 	.word	0x200000d8
 8000f28:	40005400 	.word	0x40005400
 8000f2c:	000186a0 	.word	0x000186a0

08000f30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a15      	ldr	r2, [pc, #84]	@ (8000fa0 <HAL_I2C_MspInit+0x70>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d123      	bne.n	8000f98 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_I2C_MspInit+0x74>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a13      	ldr	r2, [pc, #76]	@ (8000fa4 <HAL_I2C_MspInit+0x74>)
 8000f56:	f043 0308 	orr.w	r3, r3, #8
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_I2C_MspInit+0x74>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f68:	23c0      	movs	r3, #192	@ 0xc0
 8000f6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f6c:	2312      	movs	r3, #18
 8000f6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <HAL_I2C_MspInit+0x78>)
 8000f7c:	f002 f858 	bl	8003030 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <HAL_I2C_MspInit+0x74>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <HAL_I2C_MspInit+0x74>)
 8000f86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f8a:	61d3      	str	r3, [r2, #28]
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <HAL_I2C_MspInit+0x74>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010c00 	.word	0x40010c00

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb2:	f001 fa7b 	bl	80024ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb6:	f000 f86b 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fba:	f7ff fef1 	bl	8000da0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000fbe:	f001 f8ad 	bl	800211c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000fc2:	f001 f971 	bl	80022a8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000fc6:	f7ff fe09 	bl	8000bdc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000fca:	f7ff fe45 	bl	8000c58 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000fce:	f7ff ff81 	bl	8000ed4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000fd2:	f001 f993 	bl	80022fc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Initialize stepper motors
  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // start disabled
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2104      	movs	r1, #4
 8000fda:	482a      	ldr	r0, [pc, #168]	@ (8001084 <main+0xd8>)
 8000fdc:	f002 f9ac 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // start disabled
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2108      	movs	r1, #8
 8000fe4:	4827      	ldr	r0, [pc, #156]	@ (8001084 <main+0xd8>)
 8000fe6:	f002 f9a7 	bl	8003338 <HAL_GPIO_WritePin>

  //uint8_t option = 0; // Initial option value
  char option = '\0';
 8000fea:	2300      	movs	r3, #0
 8000fec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71bb      	strb	r3, [r7, #6]

  // initialize multiplexer
  // SET = UART-tx / RESET = Din from GPS
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4824      	ldr	r0, [pc, #144]	@ (8001088 <main+0xdc>)
 8000ff8:	f002 f99e 	bl	8003338 <HAL_GPIO_WritePin>

  // Initialize relays
  // RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
  HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, SET); // reset relay
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001002:	4822      	ldr	r0, [pc, #136]	@ (800108c <main+0xe0>)
 8001004:	f002 f998 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001008:	200a      	movs	r0, #10
 800100a:	f001 fab1 	bl	8002570 <HAL_Delay>
  HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RESET); // release reset coil
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001014:	481d      	ldr	r0, [pc, #116]	@ (800108c <main+0xe0>)
 8001016:	f002 f98f 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800101a:	2005      	movs	r0, #5
 800101c:	f001 faa8 	bl	8002570 <HAL_Delay>
  // RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
  HAL_GPIO_WritePin(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, SET); // reset relay
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001026:	4817      	ldr	r0, [pc, #92]	@ (8001084 <main+0xd8>)
 8001028:	f002 f986 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800102c:	200a      	movs	r0, #10
 800102e:	f001 fa9f 	bl	8002570 <HAL_Delay>
  HAL_GPIO_WritePin(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RESET); // release reset coil
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001038:	4812      	ldr	r0, [pc, #72]	@ (8001084 <main+0xd8>)
 800103a:	f002 f97d 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800103e:	2005      	movs	r0, #5
 8001040:	f001 fa96 	bl	8002570 <HAL_Delay>
  // RESET relay k9, k10, k11, k12 (GND, calibration and continuity circuit)
  HAL_GPIO_WritePin(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, SET); // reset relay
 8001044:	2201      	movs	r2, #1
 8001046:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800104a:	480e      	ldr	r0, [pc, #56]	@ (8001084 <main+0xd8>)
 800104c:	f002 f974 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8001050:	200a      	movs	r0, #10
 8001052:	f001 fa8d 	bl	8002570 <HAL_Delay>
  HAL_GPIO_WritePin(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RESET); // release reset coil
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <main+0xd8>)
 800105e:	f002 f96b 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001062:	2005      	movs	r0, #5
 8001064:	f001 fa84 	bl	8002570 <HAL_Delay>


  printWelcomeMessage();
 8001068:	f000 f862 	bl	8001130 <printWelcomeMessage>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  option = readInput();
 800106c:	f000 f88c 	bl	8001188 <readInput>
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
	  result = processInput(option);
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f8aa 	bl	80011d0 <processInput>
 800107c:	4603      	mov	r3, r0
 800107e:	71bb      	strb	r3, [r7, #6]
	  option = readInput();
 8001080:	bf00      	nop
 8001082:	e7f3      	b.n	800106c <main+0xc0>
 8001084:	40011000 	.word	0x40011000
 8001088:	40010800 	.word	0x40010800
 800108c:	40010c00 	.word	0x40010c00

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	@ 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800109a:	2228      	movs	r2, #40	@ 0x28
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f005 f870 	bl	8006184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c0:	2302      	movs	r3, #2
 80010c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	2301      	movs	r3, #1
 80010c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c8:	2310      	movs	r3, #16
 80010ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 f995 	bl	8004404 <HAL_RCC_OscConfig>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80010e0:	f000 ff7c 	bl	8001fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	230f      	movs	r3, #15
 80010e6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fc02 	bl	8004908 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800110a:	f000 ff67 	bl	8001fdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800110e:	2302      	movs	r3, #2
 8001110:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fd83 	bl	8004c24 <HAL_RCCEx_PeriphCLKConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001124:	f000 ff5a 	bl	8001fdc <Error_Handler>
  }
}
 8001128:	bf00      	nop
 800112a:	3750      	adds	r7, #80	@ 0x50
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void){
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8001134:	f04f 33ff 	mov.w	r3, #4294967295
 8001138:	2237      	movs	r2, #55	@ 0x37
 800113a:	490e      	ldr	r1, [pc, #56]	@ (8001174 <printWelcomeMessage+0x44>)
 800113c:	480e      	ldr	r0, [pc, #56]	@ (8001178 <printWelcomeMessage+0x48>)
 800113e:	f004 fd0d 	bl	8005b5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu_relays, strlen(menu_relays), HAL_MAX_DELAY);
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	f240 1279 	movw	r2, #377	@ 0x179
 800114a:	490c      	ldr	r1, [pc, #48]	@ (800117c <printWelcomeMessage+0x4c>)
 800114c:	480a      	ldr	r0, [pc, #40]	@ (8001178 <printWelcomeMessage+0x48>)
 800114e:	f004 fd05 	bl	8005b5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu_functions, strlen(menu_functions), HAL_MAX_DELAY);
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	2279      	movs	r2, #121	@ 0x79
 8001158:	4909      	ldr	r1, [pc, #36]	@ (8001180 <printWelcomeMessage+0x50>)
 800115a:	4807      	ldr	r0, [pc, #28]	@ (8001178 <printWelcomeMessage+0x48>)
 800115c:	f004 fcfe 	bl	8005b5c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu_motors, strlen(menu_motors), HAL_MAX_DELAY);
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	2254      	movs	r2, #84	@ 0x54
 8001166:	4907      	ldr	r1, [pc, #28]	@ (8001184 <printWelcomeMessage+0x54>)
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <printWelcomeMessage+0x48>)
 800116a:	f004 fcf7 	bl	8005b5c <HAL_UART_Transmit>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	08006abc 	.word	0x08006abc
 8001178:	20000178 	.word	0x20000178
 800117c:	08006bcc 	.word	0x08006bcc
 8001180:	08006d48 	.word	0x08006d48
 8001184:	08006dc4 	.word	0x08006dc4

08001188 <readInput>:


/* Read user input and return the option selected 1-2-3*/
char readInput(void){
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
	char rxBuffer[1];
//	HAL_UART_Transmit(&huart1, menu_relays, strlen(menu_relays), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1, menu_functions, strlen(menu_functions), HAL_MAX_DELAY);
//	HAL_UART_Transmit(&huart1, menu_motors, strlen(menu_motors), HAL_MAX_DELAY);

	HAL_UART_Transmit(&huart1, PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	2213      	movs	r2, #19
 8001194:	490b      	ldr	r1, [pc, #44]	@ (80011c4 <readInput+0x3c>)
 8001196:	480c      	ldr	r0, [pc, #48]	@ (80011c8 <readInput+0x40>)
 8001198:	f004 fce0 	bl	8005b5c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 800119c:	1d39      	adds	r1, r7, #4
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	2201      	movs	r2, #1
 80011a4:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <readInput+0x40>)
 80011a6:	f004 fd64 	bl	8005c72 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 80011aa:	1d39      	adds	r1, r7, #4
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	2201      	movs	r2, #1
 80011b2:	4805      	ldr	r0, [pc, #20]	@ (80011c8 <readInput+0x40>)
 80011b4:	f004 fcd2 	bl	8005b5c <HAL_UART_Transmit>

	return rxBuffer[0];
 80011b8:	793b      	ldrb	r3, [r7, #4]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	08006af4 	.word	0x08006af4
 80011c8:	20000178 	.word	0x20000178
 80011cc:	00000000 	.word	0x00000000

080011d0 <processInput>:

uint8_t processInput(char option){
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b0bd      	sub	sp, #244	@ 0xf4
 80011d4:	af02      	add	r7, sp, #8
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
	// default
	char msg[50];
	// ADC measurement
	char adcmsg[50];
	float vin = 0.0;
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
	uint16_t motor_i = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	uint32_t adcReading = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	uint32_t runtime = 5000; // motor runtime ms
 80011ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80011f2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
	uint32_t t0; // init time for runtime

	// EEPROM
	uint8_t chipAddress = 0xA0; // 0b1010000 7 bit address
 80011f6:	23a0      	movs	r3, #160	@ 0xa0
 80011f8:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
	uint8_t dataReceive[10];
	uint8_t dataByte[4]; // = {0x00, 5, 12, 4}; // store 5 in memory 0x00 and 12 in (n+1)= 0x01
	uint8_t startAddress[1] = {0x00};
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	char output[50];

	// print what was selected
	sprintf(msg, "\r\n> Executing OPTION %d...\r\n",option);
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001208:	49dc      	ldr	r1, [pc, #880]	@ (800157c <processInput+0x3ac>)
 800120a:	4618      	mov	r0, r3
 800120c:	f004 ff9a 	bl	8006144 <siprintf>
	HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 8001210:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe ff9b 	bl	8000150 <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	48d6      	ldr	r0, [pc, #856]	@ (8001580 <processInput+0x3b0>)
 8001228:	f004 fc98 	bl	8005b5c <HAL_UART_Transmit>

	// Execute selected action
	switch(option){
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	3b30      	subs	r3, #48	@ 0x30
 8001230:	2b49      	cmp	r3, #73	@ 0x49
 8001232:	f200 86a3 	bhi.w	8001f7c <processInput+0xdac>
 8001236:	a201      	add	r2, pc, #4	@ (adr r2, 800123c <processInput+0x6c>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	08001365 	.word	0x08001365
 8001240:	08001373 	.word	0x08001373
 8001244:	080013c1 	.word	0x080013c1
 8001248:	0800140f 	.word	0x0800140f
 800124c:	08001459 	.word	0x08001459
 8001250:	080014a3 	.word	0x080014a3
 8001254:	080014e9 	.word	0x080014e9
 8001258:	0800152f 	.word	0x0800152f
 800125c:	08001591 	.word	0x08001591
 8001260:	080015df 	.word	0x080015df
 8001264:	08001f7d 	.word	0x08001f7d
 8001268:	08001f7d 	.word	0x08001f7d
 800126c:	08001f7d 	.word	0x08001f7d
 8001270:	08001f7d 	.word	0x08001f7d
 8001274:	08001f7d 	.word	0x08001f7d
 8001278:	08001f7d 	.word	0x08001f7d
 800127c:	08001f7d 	.word	0x08001f7d
 8001280:	08001f7d 	.word	0x08001f7d
 8001284:	08001f7d 	.word	0x08001f7d
 8001288:	08001f7d 	.word	0x08001f7d
 800128c:	08001f7d 	.word	0x08001f7d
 8001290:	08001f7d 	.word	0x08001f7d
 8001294:	08001f7d 	.word	0x08001f7d
 8001298:	08001f7d 	.word	0x08001f7d
 800129c:	08001f7d 	.word	0x08001f7d
 80012a0:	08001f7d 	.word	0x08001f7d
 80012a4:	08001f7d 	.word	0x08001f7d
 80012a8:	08001f7d 	.word	0x08001f7d
 80012ac:	08001f7d 	.word	0x08001f7d
 80012b0:	08001f7d 	.word	0x08001f7d
 80012b4:	08001f7d 	.word	0x08001f7d
 80012b8:	08001f7d 	.word	0x08001f7d
 80012bc:	08001f7d 	.word	0x08001f7d
 80012c0:	08001f7d 	.word	0x08001f7d
 80012c4:	08001f7d 	.word	0x08001f7d
 80012c8:	08001f7d 	.word	0x08001f7d
 80012cc:	08001f7d 	.word	0x08001f7d
 80012d0:	08001f7d 	.word	0x08001f7d
 80012d4:	08001f7d 	.word	0x08001f7d
 80012d8:	08001f7d 	.word	0x08001f7d
 80012dc:	08001f7d 	.word	0x08001f7d
 80012e0:	08001f7d 	.word	0x08001f7d
 80012e4:	08001f7d 	.word	0x08001f7d
 80012e8:	08001f7d 	.word	0x08001f7d
 80012ec:	08001f7d 	.word	0x08001f7d
 80012f0:	08001f7d 	.word	0x08001f7d
 80012f4:	08001f7d 	.word	0x08001f7d
 80012f8:	08001f7d 	.word	0x08001f7d
 80012fc:	08001f7d 	.word	0x08001f7d
 8001300:	080019d3 	.word	0x080019d3
 8001304:	08001f7d 	.word	0x08001f7d
 8001308:	08001f7d 	.word	0x08001f7d
 800130c:	08001cb5 	.word	0x08001cb5
 8001310:	0800165d 	.word	0x0800165d
 8001314:	08001e03 	.word	0x08001e03
 8001318:	08001f7d 	.word	0x08001f7d
 800131c:	08001f7d 	.word	0x08001f7d
 8001320:	08001943 	.word	0x08001943
 8001324:	08001f7d 	.word	0x08001f7d
 8001328:	08001f7d 	.word	0x08001f7d
 800132c:	08001f7d 	.word	0x08001f7d
 8001330:	08001f7d 	.word	0x08001f7d
 8001334:	08001f7d 	.word	0x08001f7d
 8001338:	080019b7 	.word	0x080019b7
 800133c:	080019c5 	.word	0x080019c5
 8001340:	08001609 	.word	0x08001609
 8001344:	08001687 	.word	0x08001687
 8001348:	08001b21 	.word	0x08001b21
 800134c:	080016b1 	.word	0x080016b1
 8001350:	08001819 	.word	0x08001819
 8001354:	08001f7d 	.word	0x08001f7d
 8001358:	08001633 	.word	0x08001633
 800135c:	08001f7d 	.word	0x08001f7d
 8001360:	080016db 	.word	0x080016db
	case '0': // toggle green led
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001364:	2102      	movs	r1, #2
 8001366:	4887      	ldr	r0, [pc, #540]	@ (8001584 <processInput+0x3b4>)
 8001368:	f001 fffe 	bl	8003368 <HAL_GPIO_TogglePin>
		return 0;
 800136c:	2300      	movs	r3, #0
 800136e:	f000 be1a 	b.w	8001fa6 <processInput+0xdd6>
	case '1': // Set relay XBT
		// SET relay k1
		HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, SET); // set relay
 8001372:	2201      	movs	r2, #1
 8001374:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001378:	4883      	ldr	r0, [pc, #524]	@ (8001588 <processInput+0x3b8>)
 800137a:	f001 ffdd 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8); // relays need 4 ms to set/reset
 800137e:	2008      	movs	r0, #8
 8001380:	f001 f8f6 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RESET); // release coil
 8001384:	2200      	movs	r2, #0
 8001386:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800138a:	487f      	ldr	r0, [pc, #508]	@ (8001588 <processInput+0x3b8>)
 800138c:	f001 ffd4 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001390:	2002      	movs	r0, #2
 8001392:	f001 f8ed 	bl	8002570 <HAL_Delay>
		// SET SSR1
		HAL_GPIO_WritePin(SSR_1_GPIO_Port, SSR_1_Pin, SET); // set SSR latch
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800139c:	487a      	ldr	r0, [pc, #488]	@ (8001588 <processInput+0x3b8>)
 800139e:	f001 ffcb 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1); // latch need 300 ns to set/reset
 80013a2:	2001      	movs	r0, #1
 80013a4:	f001 f8e4 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_1_GPIO_Port, SSR_1_Pin, RESET); // release SSR latch
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ae:	4876      	ldr	r0, [pc, #472]	@ (8001588 <processInput+0x3b8>)
 80013b0:	f001 ffc2 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80013b4:	2001      	movs	r0, #1
 80013b6:	f001 f8db 	bl	8002570 <HAL_Delay>
		return 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f000 bdf3 	b.w	8001fa6 <processInput+0xdd6>
	case '2': // Set relay XBT
		// SET relay k2
		HAL_GPIO_WritePin(RELAY_K2_GPIO_Port, RELAY_K2_Pin, SET); // set relay
 80013c0:	2201      	movs	r2, #1
 80013c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013c6:	4870      	ldr	r0, [pc, #448]	@ (8001588 <processInput+0x3b8>)
 80013c8:	f001 ffb6 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 80013cc:	2008      	movs	r0, #8
 80013ce:	f001 f8cf 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K2_GPIO_Port, RELAY_K2_Pin, RESET); // release coil
 80013d2:	2200      	movs	r2, #0
 80013d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013d8:	486b      	ldr	r0, [pc, #428]	@ (8001588 <processInput+0x3b8>)
 80013da:	f001 ffad 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80013de:	2002      	movs	r0, #2
 80013e0:	f001 f8c6 	bl	8002570 <HAL_Delay>
		// SET SSR2
		HAL_GPIO_WritePin(SSR_2_GPIO_Port, SSR_2_Pin, SET); // set SSR latch
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013ea:	4867      	ldr	r0, [pc, #412]	@ (8001588 <processInput+0x3b8>)
 80013ec:	f001 ffa4 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f001 f8bd 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_2_GPIO_Port, SSR_2_Pin, RESET); // release SSR latch
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013fc:	4862      	ldr	r0, [pc, #392]	@ (8001588 <processInput+0x3b8>)
 80013fe:	f001 ff9b 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001402:	2001      	movs	r0, #1
 8001404:	f001 f8b4 	bl	8002570 <HAL_Delay>
		return 0;
 8001408:	2300      	movs	r3, #0
 800140a:	f000 bdcc 	b.w	8001fa6 <processInput+0xdd6>
	case '3': // Set relay XBT
		// SET relay k3
		HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, SET); // set relay
 800140e:	2201      	movs	r2, #1
 8001410:	2104      	movs	r1, #4
 8001412:	485e      	ldr	r0, [pc, #376]	@ (800158c <processInput+0x3bc>)
 8001414:	f001 ff90 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 8001418:	2008      	movs	r0, #8
 800141a:	f001 f8a9 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K3_GPIO_Port, RELAY_K3_Pin, RESET); // release coil
 800141e:	2200      	movs	r2, #0
 8001420:	2104      	movs	r1, #4
 8001422:	485a      	ldr	r0, [pc, #360]	@ (800158c <processInput+0x3bc>)
 8001424:	f001 ff88 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001428:	2002      	movs	r0, #2
 800142a:	f001 f8a1 	bl	8002570 <HAL_Delay>
		// SET SSR3
		HAL_GPIO_WritePin(SSR_3_GPIO_Port, SSR_3_Pin, SET); // set SSR latch
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001434:	4854      	ldr	r0, [pc, #336]	@ (8001588 <processInput+0x3b8>)
 8001436:	f001 ff7f 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f001 f898 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_3_GPIO_Port, SSR_3_Pin, RESET); // release SSR latch
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001446:	4850      	ldr	r0, [pc, #320]	@ (8001588 <processInput+0x3b8>)
 8001448:	f001 ff76 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800144c:	2001      	movs	r0, #1
 800144e:	f001 f88f 	bl	8002570 <HAL_Delay>
		return 0;
 8001452:	2300      	movs	r3, #0
 8001454:	f000 bda7 	b.w	8001fa6 <processInput+0xdd6>
	case '4': // Set relay XBT
		// SET relay k4
		HAL_GPIO_WritePin(RELAY_K4_GPIO_Port, RELAY_K4_Pin, SET); // set relay
 8001458:	2201      	movs	r2, #1
 800145a:	2108      	movs	r1, #8
 800145c:	4849      	ldr	r0, [pc, #292]	@ (8001584 <processInput+0x3b4>)
 800145e:	f001 ff6b 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 8001462:	2008      	movs	r0, #8
 8001464:	f001 f884 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K4_GPIO_Port, RELAY_K4_Pin, RESET); // release coil
 8001468:	2200      	movs	r2, #0
 800146a:	2108      	movs	r1, #8
 800146c:	4845      	ldr	r0, [pc, #276]	@ (8001584 <processInput+0x3b4>)
 800146e:	f001 ff63 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001472:	2002      	movs	r0, #2
 8001474:	f001 f87c 	bl	8002570 <HAL_Delay>
		// SET SSR4
		HAL_GPIO_WritePin(SSR_4_GPIO_Port, SSR_4_Pin, SET); // set SSR latch
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800147e:	4841      	ldr	r0, [pc, #260]	@ (8001584 <processInput+0x3b4>)
 8001480:	f001 ff5a 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001484:	2001      	movs	r0, #1
 8001486:	f001 f873 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_4_GPIO_Port, SSR_4_Pin, RESET); // release SSR latch
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001490:	483c      	ldr	r0, [pc, #240]	@ (8001584 <processInput+0x3b4>)
 8001492:	f001 ff51 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f001 f86a 	bl	8002570 <HAL_Delay>
		return 0;
 800149c:	2300      	movs	r3, #0
 800149e:	f000 bd82 	b.w	8001fa6 <processInput+0xdd6>
	case '5': // Set relay XBT
		// SET relay k5
		HAL_GPIO_WritePin(RELAY_K5_GPIO_Port, RELAY_K5_Pin, SET); // set relay
 80014a2:	2201      	movs	r2, #1
 80014a4:	2110      	movs	r1, #16
 80014a6:	4837      	ldr	r0, [pc, #220]	@ (8001584 <processInput+0x3b4>)
 80014a8:	f001 ff46 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 80014ac:	2008      	movs	r0, #8
 80014ae:	f001 f85f 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K5_GPIO_Port, RELAY_K5_Pin, RESET); // release coil
 80014b2:	2200      	movs	r2, #0
 80014b4:	2110      	movs	r1, #16
 80014b6:	4833      	ldr	r0, [pc, #204]	@ (8001584 <processInput+0x3b4>)
 80014b8:	f001 ff3e 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80014bc:	2002      	movs	r0, #2
 80014be:	f001 f857 	bl	8002570 <HAL_Delay>
		// SET SSR5
		HAL_GPIO_WritePin(SSR_5_GPIO_Port, SSR_5_Pin, SET); // set SSR latch
 80014c2:	2201      	movs	r2, #1
 80014c4:	2180      	movs	r1, #128	@ 0x80
 80014c6:	4830      	ldr	r0, [pc, #192]	@ (8001588 <processInput+0x3b8>)
 80014c8:	f001 ff36 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f001 f84f 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_5_GPIO_Port, SSR_5_Pin, RESET); // release SSR latch
 80014d2:	2200      	movs	r2, #0
 80014d4:	2180      	movs	r1, #128	@ 0x80
 80014d6:	482c      	ldr	r0, [pc, #176]	@ (8001588 <processInput+0x3b8>)
 80014d8:	f001 ff2e 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80014dc:	2001      	movs	r0, #1
 80014de:	f001 f847 	bl	8002570 <HAL_Delay>
		return 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f000 bd5f 	b.w	8001fa6 <processInput+0xdd6>
	case '6': // Set relay XBT
		// SET relay k6
		HAL_GPIO_WritePin(RELAY_K6_GPIO_Port, RELAY_K6_Pin, SET); // set relay
 80014e8:	2201      	movs	r2, #1
 80014ea:	2120      	movs	r1, #32
 80014ec:	4825      	ldr	r0, [pc, #148]	@ (8001584 <processInput+0x3b4>)
 80014ee:	f001 ff23 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 80014f2:	2008      	movs	r0, #8
 80014f4:	f001 f83c 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K6_GPIO_Port, RELAY_K6_Pin, RESET); // release coil
 80014f8:	2200      	movs	r2, #0
 80014fa:	2120      	movs	r1, #32
 80014fc:	4821      	ldr	r0, [pc, #132]	@ (8001584 <processInput+0x3b4>)
 80014fe:	f001 ff1b 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001502:	2002      	movs	r0, #2
 8001504:	f001 f834 	bl	8002570 <HAL_Delay>
		// SET SSR6
		HAL_GPIO_WritePin(SSR_6_GPIO_Port, SSR_6_Pin, SET); // set SSR latch
 8001508:	2201      	movs	r2, #1
 800150a:	2140      	movs	r1, #64	@ 0x40
 800150c:	481e      	ldr	r0, [pc, #120]	@ (8001588 <processInput+0x3b8>)
 800150e:	f001 ff13 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001512:	2001      	movs	r0, #1
 8001514:	f001 f82c 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_6_GPIO_Port, SSR_6_Pin, RESET); // release SSR latch
 8001518:	2200      	movs	r2, #0
 800151a:	2140      	movs	r1, #64	@ 0x40
 800151c:	481a      	ldr	r0, [pc, #104]	@ (8001588 <processInput+0x3b8>)
 800151e:	f001 ff0b 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f001 f824 	bl	8002570 <HAL_Delay>
		return 0;
 8001528:	2300      	movs	r3, #0
 800152a:	f000 bd3c 	b.w	8001fa6 <processInput+0xdd6>
	case '7': // Set relay XBT
		// SET relay k7
		HAL_GPIO_WritePin(RELAY_K7_GPIO_Port, RELAY_K7_Pin, SET); // set relay
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001534:	4814      	ldr	r0, [pc, #80]	@ (8001588 <processInput+0x3b8>)
 8001536:	f001 feff 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 800153a:	2008      	movs	r0, #8
 800153c:	f001 f818 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K7_GPIO_Port, RELAY_K7_Pin, RESET); // release coil
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001546:	4810      	ldr	r0, [pc, #64]	@ (8001588 <processInput+0x3b8>)
 8001548:	f001 fef6 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800154c:	2002      	movs	r0, #2
 800154e:	f001 f80f 	bl	8002570 <HAL_Delay>
		// SET SSR7
		HAL_GPIO_WritePin(SSR_7_GPIO_Port, SSR_7_Pin, SET); // set SSR latch
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001558:	480a      	ldr	r0, [pc, #40]	@ (8001584 <processInput+0x3b4>)
 800155a:	f001 feed 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f001 f806 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_7_GPIO_Port, SSR_7_Pin, RESET); // release SSR latch
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800156a:	4806      	ldr	r0, [pc, #24]	@ (8001584 <processInput+0x3b4>)
 800156c:	f001 fee4 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8001570:	2001      	movs	r0, #1
 8001572:	f000 fffd 	bl	8002570 <HAL_Delay>
		return 0;
 8001576:	2300      	movs	r3, #0
 8001578:	f000 bd15 	b.w	8001fa6 <processInput+0xdd6>
 800157c:	08006b08 	.word	0x08006b08
 8001580:	20000178 	.word	0x20000178
 8001584:	40010c00 	.word	0x40010c00
 8001588:	40011000 	.word	0x40011000
 800158c:	40011400 	.word	0x40011400
	case '8': // Set relay XBT
		// SET relay k8
		HAL_GPIO_WritePin(RELAY_K8_GPIO_Port, RELAY_K8_Pin, SET); // set relay
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001596:	4898      	ldr	r0, [pc, #608]	@ (80017f8 <processInput+0x628>)
 8001598:	f001 fece 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 800159c:	2008      	movs	r0, #8
 800159e:	f000 ffe7 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K8_GPIO_Port, RELAY_K8_Pin, RESET); // release coil
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015a8:	4893      	ldr	r0, [pc, #588]	@ (80017f8 <processInput+0x628>)
 80015aa:	f001 fec5 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015ae:	2002      	movs	r0, #2
 80015b0:	f000 ffde 	bl	8002570 <HAL_Delay>
		// SET SSR8
		HAL_GPIO_WritePin(SSR_8_GPIO_Port, SSR_8_Pin, SET); // set SSR latch
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015ba:	4890      	ldr	r0, [pc, #576]	@ (80017fc <processInput+0x62c>)
 80015bc:	f001 febc 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f000 ffd5 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(SSR_8_GPIO_Port, SSR_8_Pin, RESET); // release SSR latch
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015cc:	488b      	ldr	r0, [pc, #556]	@ (80017fc <processInput+0x62c>)
 80015ce:	f001 feb3 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80015d2:	2001      	movs	r0, #1
 80015d4:	f000 ffcc 	bl	8002570 <HAL_Delay>
		return 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f000 bce4 	b.w	8001fa6 <processInput+0xdd6>
	case '9': // Set relay GND
		// SET relay k9 k10
		HAL_GPIO_WritePin(RELAY_K9_K10_GND_COND_GPIO_Port, RELAY_K9_K10_GND_COND_Pin, SET); // set relay
 80015de:	2201      	movs	r2, #1
 80015e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e4:	4884      	ldr	r0, [pc, #528]	@ (80017f8 <processInput+0x628>)
 80015e6:	f001 fea7 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 80015ea:	2008      	movs	r0, #8
 80015ec:	f000 ffc0 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K9_K10_GND_COND_GPIO_Port, RELAY_K9_K10_GND_COND_Pin, RESET); // release coil
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015f6:	4880      	ldr	r0, [pc, #512]	@ (80017f8 <processInput+0x628>)
 80015f8:	f001 fe9e 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80015fc:	2002      	movs	r0, #2
 80015fe:	f000 ffb7 	bl	8002570 <HAL_Delay>
		return 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f000 bccf 	b.w	8001fa6 <processInput+0xdd6>
	case 'q': // Set relay CAL CONT
		// SET relay k11
		HAL_GPIO_WritePin(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, SET); // set relay
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800160e:	487a      	ldr	r0, [pc, #488]	@ (80017f8 <processInput+0x628>)
 8001610:	f001 fe92 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 8001614:	2008      	movs	r0, #8
 8001616:	f000 ffab 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K11_CAL_CONT_GPIO_Port, RELAY_K11_CAL_CONT_Pin, RESET); // release coil
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001620:	4875      	ldr	r0, [pc, #468]	@ (80017f8 <processInput+0x628>)
 8001622:	f001 fe89 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001626:	2002      	movs	r0, #2
 8001628:	f000 ffa2 	bl	8002570 <HAL_Delay>
		return 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f000 bcba 	b.w	8001fa6 <processInput+0xdd6>
	case 'w': // Set relay CAL RES
		// SET relay k12
		HAL_GPIO_WritePin(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, SET); // set relay
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001638:	486f      	ldr	r0, [pc, #444]	@ (80017f8 <processInput+0x628>)
 800163a:	f001 fe7d 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 800163e:	2008      	movs	r0, #8
 8001640:	f000 ff96 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_K12_CAL_RES_GPIO_Port, RELAY_K12_CAL_RES_Pin, RESET); // release coil
 8001644:	2200      	movs	r2, #0
 8001646:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800164a:	486b      	ldr	r0, [pc, #428]	@ (80017f8 <processInput+0x628>)
 800164c:	f001 fe74 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 8001650:	2002      	movs	r0, #2
 8001652:	f000 ff8d 	bl	8002570 <HAL_Delay>
		return 0;
 8001656:	2300      	movs	r3, #0
 8001658:	f000 bca5 	b.w	8001fa6 <processInput+0xdd6>
	case 'e': // Reset 1 (1st half)
		// RESET relay k1, k2, k3, k4, SSR1, SSR2, SSR3, SSR4
		HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, SET); // reset relay and SSR
 800165c:	2201      	movs	r2, #1
 800165e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001662:	4866      	ldr	r0, [pc, #408]	@ (80017fc <processInput+0x62c>)
 8001664:	f001 fe68 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 8001668:	2008      	movs	r0, #8
 800166a:	f000 ff81 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_RESET_1_GPIO_Port, RELAY_RESET_1_Pin, RESET); // release reset coil
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001674:	4861      	ldr	r0, [pc, #388]	@ (80017fc <processInput+0x62c>)
 8001676:	f001 fe5f 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 800167a:	2002      	movs	r0, #2
 800167c:	f000 ff78 	bl	8002570 <HAL_Delay>
		return 0;
 8001680:	2300      	movs	r3, #0
 8001682:	f000 bc90 	b.w	8001fa6 <processInput+0xdd6>
	case 'r': // Reset 2 (2nd half)
		// RESET relay k5, k6, k7, k8, SSR5, SSR6, SSR7, SSR8
		HAL_GPIO_WritePin(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, SET); // reset relay and SSR
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800168c:	485c      	ldr	r0, [pc, #368]	@ (8001800 <processInput+0x630>)
 800168e:	f001 fe53 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 8001692:	2008      	movs	r0, #8
 8001694:	f000 ff6c 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_RESET_2_GPIO_Port, RELAY_RESET_2_Pin, RESET); // release reset coil
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800169e:	4858      	ldr	r0, [pc, #352]	@ (8001800 <processInput+0x630>)
 80016a0:	f001 fe4a 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016a4:	2002      	movs	r0, #2
 80016a6:	f000 ff63 	bl	8002570 <HAL_Delay>
		return 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f000 bc7b 	b.w	8001fa6 <processInput+0xdd6>
	case 't': // Reset 3 (aux relays)
		// RESET relay k9, k10, k11, k12
		HAL_GPIO_WritePin(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, SET); // reset relay and SSR
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b6:	4852      	ldr	r0, [pc, #328]	@ (8001800 <processInput+0x630>)
 80016b8:	f001 fe3e 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(8);
 80016bc:	2008      	movs	r0, #8
 80016be:	f000 ff57 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_RESET_3_GPIO_Port, RELAY_RESET_3_Pin, RESET); // release reset coil
 80016c2:	2200      	movs	r2, #0
 80016c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c8:	484d      	ldr	r0, [pc, #308]	@ (8001800 <processInput+0x630>)
 80016ca:	f001 fe35 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(2);
 80016ce:	2002      	movs	r0, #2
 80016d0:	f000 ff4e 	bl	8002570 <HAL_Delay>
		return 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f000 bc66 	b.w	8001fa6 <processInput+0xdd6>
	case 'y': // read ADC Vin
		// take 10 an average of samples
		for(uint8_t i=0; i<10; i++){
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 80016e0:	e01a      	b.n	8001718 <processInput+0x548>
			HAL_ADC_Start(&hadc1);
 80016e2:	4848      	ldr	r0, [pc, #288]	@ (8001804 <processInput+0x634>)
 80016e4:	f001 f840 	bl	8002768 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 80016e8:	2164      	movs	r1, #100	@ 0x64
 80016ea:	4846      	ldr	r0, [pc, #280]	@ (8001804 <processInput+0x634>)
 80016ec:	f001 f916 	bl	800291c <HAL_ADC_PollForConversion>
			adcReading += HAL_ADC_GetValue(&hadc1);
 80016f0:	4844      	ldr	r0, [pc, #272]	@ (8001804 <processInput+0x634>)
 80016f2:	f001 fa19 	bl	8002b28 <HAL_ADC_GetValue>
 80016f6:	4602      	mov	r2, r0
 80016f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016fc:	4413      	add	r3, r2
 80016fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			HAL_ADC_Stop(&hadc1);
 8001702:	4840      	ldr	r0, [pc, #256]	@ (8001804 <processInput+0x634>)
 8001704:	f001 f8de 	bl	80028c4 <HAL_ADC_Stop>
			HAL_Delay(1);
 8001708:	2001      	movs	r0, #1
 800170a:	f000 ff31 	bl	8002570 <HAL_Delay>
		for(uint8_t i=0; i<10; i++){
 800170e:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 8001712:	3301      	adds	r3, #1
 8001714:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 8001718:	f897 30e3 	ldrb.w	r3, [r7, #227]	@ 0xe3
 800171c:	2b09      	cmp	r3, #9
 800171e:	d9e0      	bls.n	80016e2 <processInput+0x512>
		}
		adcReading = adcReading/10;
 8001720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001724:	4a38      	ldr	r2, [pc, #224]	@ (8001808 <processInput+0x638>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		vin = adcReading * 0.0083 + 0.3963; // 15.23
 8001730:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001734:	f7ff f834 	bl	80007a0 <__aeabi_ui2d>
 8001738:	a32b      	add	r3, pc, #172	@ (adr r3, 80017e8 <processInput+0x618>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe fd0f 	bl	8000160 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	a329      	add	r3, pc, #164	@ (adr r3, 80017f0 <processInput+0x620>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe feea 	bl	8000528 <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f8ba 	bl	80008d4 <__aeabi_d2f>
 8001760:	4603      	mov	r3, r0
 8001762:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		// get 1 decimal
		int dec = (int)(vin * 10 - ((int)vin * 10)); // 152 - 150 = 2
 8001766:	4929      	ldr	r1, [pc, #164]	@ (800180c <processInput+0x63c>)
 8001768:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 800176c:	f7fe fe22 	bl	80003b4 <__aeabi_fmul>
 8001770:	4603      	mov	r3, r0
 8001772:	461c      	mov	r4, r3
 8001774:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8001778:	f7ff fa0a 	bl	8000b90 <__aeabi_f2iz>
 800177c:	4602      	mov	r2, r0
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f9ae 	bl	8000ae8 <__aeabi_i2f>
 800178c:	4603      	mov	r3, r0
 800178e:	4619      	mov	r1, r3
 8001790:	4620      	mov	r0, r4
 8001792:	f7ff f8f3 	bl	800097c <__aeabi_fsub>
 8001796:	4603      	mov	r3, r0
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff f9f9 	bl	8000b90 <__aeabi_f2iz>
 800179e:	4603      	mov	r3, r0
 80017a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

		sprintf(adcmsg, "[AD# %d] Vin= %d.%d V\r\n", (int)adcReading,(int)vin, dec);
 80017a4:	f8d7 40e4 	ldr.w	r4, [r7, #228]	@ 0xe4
 80017a8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 80017ac:	f7ff f9f0 	bl	8000b90 <__aeabi_f2iz>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 80017b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4613      	mov	r3, r2
 80017be:	4622      	mov	r2, r4
 80017c0:	4913      	ldr	r1, [pc, #76]	@ (8001810 <processInput+0x640>)
 80017c2:	f004 fcbf 	bl	8006144 <siprintf>
		HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 80017c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fcc0 	bl	8000150 <strlen>
 80017d0:	4603      	mov	r3, r0
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80017d8:	f04f 33ff 	mov.w	r3, #4294967295
 80017dc:	480d      	ldr	r0, [pc, #52]	@ (8001814 <processInput+0x644>)
 80017de:	f004 f9bd 	bl	8005b5c <HAL_UART_Transmit>
		return 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e3df      	b.n	8001fa6 <processInput+0xdd6>
 80017e6:	bf00      	nop
 80017e8:	2474538f 	.word	0x2474538f
 80017ec:	3f80ff97 	.word	0x3f80ff97
 80017f0:	acd9e83e 	.word	0xacd9e83e
 80017f4:	3fd95cfa 	.word	0x3fd95cfa
 80017f8:	40010800 	.word	0x40010800
 80017fc:	40010c00 	.word	0x40010c00
 8001800:	40011000 	.word	0x40011000
 8001804:	20000078 	.word	0x20000078
 8001808:	cccccccd 	.word	0xcccccccd
 800180c:	41200000 	.word	0x41200000
 8001810:	08006b28 	.word	0x08006b28
 8001814:	20000178 	.word	0x20000178
	case 'u': // write eeprom
		// store 2 8-bit values in eeprom
		uint8_t a,b;
		char rxBuffer[1];
		HAL_UART_Transmit(&huart1, "Val-1= ", strlen("Val-1= "), HAL_MAX_DELAY);
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	2207      	movs	r2, #7
 800181e:	49d8      	ldr	r1, [pc, #864]	@ (8001b80 <processInput+0x9b0>)
 8001820:	48d8      	ldr	r0, [pc, #864]	@ (8001b84 <processInput+0x9b4>)
 8001822:	f004 f99b 	bl	8005b5c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8001826:	f107 0108 	add.w	r1, r7, #8
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
 800182e:	2201      	movs	r2, #1
 8001830:	48d4      	ldr	r0, [pc, #848]	@ (8001b84 <processInput+0x9b4>)
 8001832:	f004 fa1e 	bl	8005c72 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8001836:	f107 0108 	add.w	r1, r7, #8
 800183a:	f04f 33ff 	mov.w	r3, #4294967295
 800183e:	2201      	movs	r2, #1
 8001840:	48d0      	ldr	r0, [pc, #832]	@ (8001b84 <processInput+0x9b4>)
 8001842:	f004 f98b 	bl	8005b5c <HAL_UART_Transmit>
		a = atoi(rxBuffer);
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	4618      	mov	r0, r3
 800184c:	f004 fbf2 	bl	8006034 <atoi>
 8001850:	4603      	mov	r3, r0
 8001852:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
		HAL_UART_Transmit(&huart1, "\r\nVal-2= ", strlen("\r\nVal-2= "), HAL_MAX_DELAY);
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	2209      	movs	r2, #9
 800185c:	49ca      	ldr	r1, [pc, #808]	@ (8001b88 <processInput+0x9b8>)
 800185e:	48c9      	ldr	r0, [pc, #804]	@ (8001b84 <processInput+0x9b4>)
 8001860:	f004 f97c 	bl	8005b5c <HAL_UART_Transmit>
		HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 8001864:	f107 0108 	add.w	r1, r7, #8
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	2201      	movs	r2, #1
 800186e:	48c5      	ldr	r0, [pc, #788]	@ (8001b84 <processInput+0x9b4>)
 8001870:	f004 f9ff 	bl	8005c72 <HAL_UART_Receive>
		HAL_UART_Transmit(&huart1, rxBuffer, 1, HAL_MAX_DELAY); // echo
 8001874:	f107 0108 	add.w	r1, r7, #8
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
 800187c:	2201      	movs	r2, #1
 800187e:	48c1      	ldr	r0, [pc, #772]	@ (8001b84 <processInput+0x9b4>)
 8001880:	f004 f96c 	bl	8005b5c <HAL_UART_Transmit>
		b = atoi(rxBuffer);
 8001884:	f107 0308 	add.w	r3, r7, #8
 8001888:	4618      	mov	r0, r3
 800188a:	f004 fbd3 	bl	8006034 <atoi>
 800188e:	4603      	mov	r3, r0
 8001890:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2

		// store 2 bytes starting in address 0x00 total 1 kbit = 1024 bit = 128 bytes
		// 1 page = 8 bytes >> 16 pages >> (0x00) 0-7, 8-15, 16-23, ... 120-127 (0x7F)
		dataByte[0] = 0x00;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
		dataByte[1] = a;
 800189a:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 800189e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
		dataByte[2] = b;
 80018a2:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 80018a6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		dataByte[3] = 249; // 0-255 8bits
 80018aa:	23f9      	movs	r3, #249	@ 0xf9
 80018ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , dataByte, 4, HAL_MAX_DELAY); // send word address, value
 80018b0:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80018b4:	b299      	uxth	r1, r3
 80018b6:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2304      	movs	r3, #4
 80018c2:	48b2      	ldr	r0, [pc, #712]	@ (8001b8c <processInput+0x9bc>)
 80018c4:	f001 feae 	bl	8003624 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80018c8:	200a      	movs	r0, #10
 80018ca:	f000 fe51 	bl	8002570 <HAL_Delay>

		// read 2 bytes from data address 0x00, 0x01
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 80018ce:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80018d2:	b299      	uxth	r1, r3
 80018d4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	48aa      	ldr	r0, [pc, #680]	@ (8001b8c <processInput+0x9bc>)
 80018e2:	f001 fe9f 	bl	8003624 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 80018e6:	200a      	movs	r0, #10
 80018e8:	f000 fe42 	bl	8002570 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 3, HAL_MAX_DELAY);
 80018ec:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80018f0:	b299      	uxth	r1, r3
 80018f2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2303      	movs	r3, #3
 80018fe:	48a3      	ldr	r0, [pc, #652]	@ (8001b8c <processInput+0x9bc>)
 8001900:	f001 ff8e 	bl	8003820 <HAL_I2C_Master_Receive>

		sprintf(output,"\r\nStored values: %i, %i, %i\r\n", dataReceive[0], dataReceive[1], dataReceive[2]);
 8001904:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001908:	461a      	mov	r2, r3
 800190a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800190e:	4619      	mov	r1, r3
 8001910:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001914:	f107 000c 	add.w	r0, r7, #12
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	460b      	mov	r3, r1
 800191c:	499c      	ldr	r1, [pc, #624]	@ (8001b90 <processInput+0x9c0>)
 800191e:	f004 fc11 	bl	8006144 <siprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), HAL_MAX_DELAY);
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fc12 	bl	8000150 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	f107 010c 	add.w	r1, r7, #12
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
 8001938:	4892      	ldr	r0, [pc, #584]	@ (8001b84 <processInput+0x9b4>)
 800193a:	f004 f90f 	bl	8005b5c <HAL_UART_Transmit>
		return 0;
 800193e:	2300      	movs	r3, #0
 8001940:	e331      	b.n	8001fa6 <processInput+0xdd6>
	case 'i': // read epprom
		// read 2 bytes from data address 0x00, 0x01
		HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 8001942:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001946:	b299      	uxth	r1, r3
 8001948:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2301      	movs	r3, #1
 8001954:	488d      	ldr	r0, [pc, #564]	@ (8001b8c <processInput+0x9bc>)
 8001956:	f001 fe65 	bl	8003624 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 800195a:	200a      	movs	r0, #10
 800195c:	f000 fe08 	bl	8002570 <HAL_Delay>
		HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 3, HAL_MAX_DELAY);
 8001960:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 8001964:	b299      	uxth	r1, r3
 8001966:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2303      	movs	r3, #3
 8001972:	4886      	ldr	r0, [pc, #536]	@ (8001b8c <processInput+0x9bc>)
 8001974:	f001 ff54 	bl	8003820 <HAL_I2C_Master_Receive>

		sprintf(output,"Stored values: %i, %i, %i\r\n", dataReceive[0], dataReceive[1], dataReceive[2]);
 8001978:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800197c:	461a      	mov	r2, r3
 800197e:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001982:	4619      	mov	r1, r3
 8001984:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001988:	f107 000c 	add.w	r0, r7, #12
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	460b      	mov	r3, r1
 8001990:	4980      	ldr	r1, [pc, #512]	@ (8001b94 <processInput+0x9c4>)
 8001992:	f004 fbd7 	bl	8006144 <siprintf>
		HAL_UART_Transmit(&huart1, output, strlen(output), HAL_MAX_DELAY);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fbd8 	bl	8000150 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f107 010c 	add.w	r1, r7, #12
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
 80019ac:	4875      	ldr	r0, [pc, #468]	@ (8001b84 <processInput+0x9b4>)
 80019ae:	f004 f8d5 	bl	8005b5c <HAL_UART_Transmit>
		return 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e2f7      	b.n	8001fa6 <processInput+0xdd6>
	case 'o': // change MUX to GPS
		HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2104      	movs	r1, #4
 80019ba:	4877      	ldr	r0, [pc, #476]	@ (8001b98 <processInput+0x9c8>)
 80019bc:	f001 fcbc 	bl	8003338 <HAL_GPIO_WritePin>
		return 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e2f0      	b.n	8001fa6 <processInput+0xdd6>
	case 'p': // change MUX to STM32
		HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	2104      	movs	r1, #4
 80019c8:	4873      	ldr	r0, [pc, #460]	@ (8001b98 <processInput+0x9c8>)
 80019ca:	f001 fcb5 	bl	8003338 <HAL_GPIO_WritePin>
		return 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e2e9      	b.n	8001fa6 <processInput+0xdd6>
	case 'a': // Run motor CW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 80019d2:	2108      	movs	r1, #8
 80019d4:	4871      	ldr	r0, [pc, #452]	@ (8001b9c <processInput+0x9cc>)
 80019d6:	f003 fb39 	bl	800504c <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // disable driver
 80019da:	2200      	movs	r2, #0
 80019dc:	2104      	movs	r1, #4
 80019de:	4870      	ldr	r0, [pc, #448]	@ (8001ba0 <processInput+0x9d0>)
 80019e0:	f001 fcaa 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 80019e4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80019e8:	f000 fdc2 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, SET); // set motor direction
 80019ec:	2201      	movs	r2, #1
 80019ee:	2110      	movs	r1, #16
 80019f0:	486b      	ldr	r0, [pc, #428]	@ (8001ba0 <processInput+0x9d0>)
 80019f2:	f001 fca1 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // enable driver to run motor
 80019f6:	2201      	movs	r2, #1
 80019f8:	2104      	movs	r1, #4
 80019fa:	4869      	ldr	r0, [pc, #420]	@ (8001ba0 <processInput+0x9d0>)
 80019fc:	f001 fc9c 	bl	8003338 <HAL_GPIO_WritePin>
		// read current
		// should launch a timer here and stop it after X seconds
		//uint32_t runtime = 5000; // ms
		t0 = HAL_GetTick();
 8001a00:	f000 fdac 	bl	800255c <HAL_GetTick>
 8001a04:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

		for (uint8_t ci = 1; ci < 20; ci++){
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8001a0e:	e076      	b.n	8001afe <processInput+0x92e>
			adcReading = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			for(uint8_t cj = 0; cj<100; cj++){
 8001a16:	2300      	movs	r3, #0
 8001a18:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
 8001a1c:	e01a      	b.n	8001a54 <processInput+0x884>
				HAL_ADC_Start(&hadc2);
 8001a1e:	4861      	ldr	r0, [pc, #388]	@ (8001ba4 <processInput+0x9d4>)
 8001a20:	f000 fea2 	bl	8002768 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, 100);
 8001a24:	2164      	movs	r1, #100	@ 0x64
 8001a26:	485f      	ldr	r0, [pc, #380]	@ (8001ba4 <processInput+0x9d4>)
 8001a28:	f000 ff78 	bl	800291c <HAL_ADC_PollForConversion>
				adcReading += HAL_ADC_GetValue(&hadc2);
 8001a2c:	485d      	ldr	r0, [pc, #372]	@ (8001ba4 <processInput+0x9d4>)
 8001a2e:	f001 f87b 	bl	8002b28 <HAL_ADC_GetValue>
 8001a32:	4602      	mov	r2, r0
 8001a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a38:	4413      	add	r3, r2
 8001a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				HAL_ADC_Stop(&hadc2);
 8001a3e:	4859      	ldr	r0, [pc, #356]	@ (8001ba4 <processInput+0x9d4>)
 8001a40:	f000 ff40 	bl	80028c4 <HAL_ADC_Stop>
				HAL_Delay(1);
 8001a44:	2001      	movs	r0, #1
 8001a46:	f000 fd93 	bl	8002570 <HAL_Delay>
			for(uint8_t cj = 0; cj<100; cj++){
 8001a4a:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f887 30e1 	strb.w	r3, [r7, #225]	@ 0xe1
 8001a54:	f897 30e1 	ldrb.w	r3, [r7, #225]	@ 0xe1
 8001a58:	2b63      	cmp	r3, #99	@ 0x63
 8001a5a:	d9e0      	bls.n	8001a1e <processInput+0x84e>
			}
			adcReading = adcReading/100;
 8001a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a60:	4a51      	ldr	r2, [pc, #324]	@ (8001ba8 <processInput+0x9d8>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			motor_i = (uint16_t) (adcReading * 0.163 + 7.3581); // mA - opAmp G = 50, Rsense = 0.10 ohm
 8001a6c:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001a70:	f7fe fe96 	bl	80007a0 <__aeabi_ui2d>
 8001a74:	a33e      	add	r3, pc, #248	@ (adr r3, 8001b70 <processInput+0x9a0>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fb71 	bl	8000160 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	a33c      	add	r3, pc, #240	@ (adr r3, 8001b78 <processInput+0x9a8>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fd4c 	bl	8000528 <__adddf3>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7fe fefc 	bl	8000894 <__aeabi_d2uiz>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

			sprintf(adcmsg, "[AD# %d] Im_%d = %d mA\r\n", (int)adcReading, ci ,(int) motor_i);
 8001aa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001aa6:	f897 10e2 	ldrb.w	r1, [r7, #226]	@ 0xe2
 8001aaa:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8001aae:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	493d      	ldr	r1, [pc, #244]	@ (8001bac <processInput+0x9dc>)
 8001ab8:	f004 fb44 	bl	8006144 <siprintf>
			HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001abc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fb45 	bl	8000150 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	482c      	ldr	r0, [pc, #176]	@ (8001b84 <processInput+0x9b4>)
 8001ad4:	f004 f842 	bl	8005b5c <HAL_UART_Transmit>
			HAL_Delay(1000);
 8001ad8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001adc:	f000 fd48 	bl	8002570 <HAL_Delay>
			if((HAL_GetTick() - t0) > runtime) break;
 8001ae0:	f000 fd3c 	bl	800255c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d309      	bcc.n	8001b08 <processInput+0x938>
		for (uint8_t ci = 1; ci < 20; ci++){
 8001af4:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8001af8:	3301      	adds	r3, #1
 8001afa:	f887 30e2 	strb.w	r3, [r7, #226]	@ 0xe2
 8001afe:	f897 30e2 	ldrb.w	r3, [r7, #226]	@ 0xe2
 8001b02:	2b13      	cmp	r3, #19
 8001b04:	d984      	bls.n	8001a10 <processInput+0x840>
 8001b06:	e000      	b.n	8001b0a <processInput+0x93a>
			if((HAL_GetTick() - t0) > runtime) break;
 8001b08:	bf00      	nop
		}
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // disable driver
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4824      	ldr	r0, [pc, #144]	@ (8001ba0 <processInput+0x9d0>)
 8001b10:	f001 fc12 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 8001b14:	2108      	movs	r1, #8
 8001b16:	4821      	ldr	r0, [pc, #132]	@ (8001b9c <processInput+0x9cc>)
 8001b18:	f003 fb3a 	bl	8005190 <HAL_TIM_OC_Stop>

		return 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e242      	b.n	8001fa6 <processInput+0xdd6>
	case 's': // Run motor CCW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 8001b20:	2108      	movs	r1, #8
 8001b22:	481e      	ldr	r0, [pc, #120]	@ (8001b9c <processInput+0x9cc>)
 8001b24:	f003 fa92 	bl	800504c <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // disable driver
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	481c      	ldr	r0, [pc, #112]	@ (8001ba0 <processInput+0x9d0>)
 8001b2e:	f001 fc03 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 8001b32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001b36:	f000 fd1b 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, RESET); // set motor direction
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2110      	movs	r1, #16
 8001b3e:	4818      	ldr	r0, [pc, #96]	@ (8001ba0 <processInput+0x9d0>)
 8001b40:	f001 fbfa 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // enable driver to run motor
 8001b44:	2201      	movs	r2, #1
 8001b46:	2104      	movs	r1, #4
 8001b48:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <processInput+0x9d0>)
 8001b4a:	f001 fbf5 	bl	8003338 <HAL_GPIO_WritePin>
		// read current
		// should launch a timer here and stop it after X seconds

		t0 = HAL_GetTick();
 8001b4e:	f000 fd05 	bl	800255c <HAL_GetTick>
 8001b52:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

		for (uint8_t ci = 1; ci < 20; ci++){
 8001b56:	2301      	movs	r3, #1
 8001b58:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 8001b5c:	e098      	b.n	8001c90 <processInput+0xac0>
			adcReading = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			for(uint8_t cj = 0; cj<100; cj++){
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8001b6a:	e03c      	b.n	8001be6 <processInput+0xa16>
 8001b6c:	f3af 8000 	nop.w
 8001b70:	1a9fbe77 	.word	0x1a9fbe77
 8001b74:	3fc4dd2f 	.word	0x3fc4dd2f
 8001b78:	c432ca58 	.word	0xc432ca58
 8001b7c:	401d6eb1 	.word	0x401d6eb1
 8001b80:	08006b40 	.word	0x08006b40
 8001b84:	20000178 	.word	0x20000178
 8001b88:	08006b48 	.word	0x08006b48
 8001b8c:	200000d8 	.word	0x200000d8
 8001b90:	08006b54 	.word	0x08006b54
 8001b94:	08006b74 	.word	0x08006b74
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	20000130 	.word	0x20000130
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	200000a8 	.word	0x200000a8
 8001ba8:	51eb851f 	.word	0x51eb851f
 8001bac:	08006b90 	.word	0x08006b90
				HAL_ADC_Start(&hadc2);
 8001bb0:	48ab      	ldr	r0, [pc, #684]	@ (8001e60 <processInput+0xc90>)
 8001bb2:	f000 fdd9 	bl	8002768 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, 100);
 8001bb6:	2164      	movs	r1, #100	@ 0x64
 8001bb8:	48a9      	ldr	r0, [pc, #676]	@ (8001e60 <processInput+0xc90>)
 8001bba:	f000 feaf 	bl	800291c <HAL_ADC_PollForConversion>
				adcReading += HAL_ADC_GetValue(&hadc2);
 8001bbe:	48a8      	ldr	r0, [pc, #672]	@ (8001e60 <processInput+0xc90>)
 8001bc0:	f000 ffb2 	bl	8002b28 <HAL_ADC_GetValue>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bca:	4413      	add	r3, r2
 8001bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				HAL_ADC_Stop(&hadc2);
 8001bd0:	48a3      	ldr	r0, [pc, #652]	@ (8001e60 <processInput+0xc90>)
 8001bd2:	f000 fe77 	bl	80028c4 <HAL_ADC_Stop>
				HAL_Delay(1);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f000 fcca 	bl	8002570 <HAL_Delay>
			for(uint8_t cj = 0; cj<100; cj++){
 8001bdc:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8001be0:	3301      	adds	r3, #1
 8001be2:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8001be6:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
 8001bea:	2b63      	cmp	r3, #99	@ 0x63
 8001bec:	d9e0      	bls.n	8001bb0 <processInput+0x9e0>
			}
			adcReading = adcReading/100;
 8001bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bf2:	4a9c      	ldr	r2, [pc, #624]	@ (8001e64 <processInput+0xc94>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	095b      	lsrs	r3, r3, #5
 8001bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			motor_i = (uint16_t) (adcReading * 0.163 + 7.3581); // mA - opAmp G = 50, Rsense = 0.10 ohm
 8001bfe:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001c02:	f7fe fdcd 	bl	80007a0 <__aeabi_ui2d>
 8001c06:	a392      	add	r3, pc, #584	@ (adr r3, 8001e50 <processInput+0xc80>)
 8001c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0c:	f7fe faa8 	bl	8000160 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	a38f      	add	r3, pc, #572	@ (adr r3, 8001e58 <processInput+0xc88>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fc83 	bl	8000528 <__adddf3>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f7fe fe33 	bl	8000894 <__aeabi_d2uiz>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

			sprintf(adcmsg, "[AD# %d] Im_%d = %d mA\r\n", (int)adcReading, ci ,(int) motor_i);
 8001c34:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001c38:	f897 10e0 	ldrb.w	r1, [r7, #224]	@ 0xe0
 8001c3c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8001c40:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	460b      	mov	r3, r1
 8001c48:	4987      	ldr	r1, [pc, #540]	@ (8001e68 <processInput+0xc98>)
 8001c4a:	f004 fa7b 	bl	8006144 <siprintf>
			HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001c4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fa7c 	bl	8000150 <strlen>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
 8001c64:	4881      	ldr	r0, [pc, #516]	@ (8001e6c <processInput+0xc9c>)
 8001c66:	f003 ff79 	bl	8005b5c <HAL_UART_Transmit>
			HAL_Delay(1000);
 8001c6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c6e:	f000 fc7f 	bl	8002570 <HAL_Delay>
			if((HAL_GetTick() - t0) > runtime) break;
 8001c72:	f000 fc73 	bl	800255c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d30a      	bcc.n	8001c9c <processInput+0xacc>
		for (uint8_t ci = 1; ci < 20; ci++){
 8001c86:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f887 30e0 	strb.w	r3, [r7, #224]	@ 0xe0
 8001c90:	f897 30e0 	ldrb.w	r3, [r7, #224]	@ 0xe0
 8001c94:	2b13      	cmp	r3, #19
 8001c96:	f67f af62 	bls.w	8001b5e <processInput+0x98e>
 8001c9a:	e000      	b.n	8001c9e <processInput+0xace>
			if((HAL_GetTick() - t0) > runtime) break;
 8001c9c:	bf00      	nop
		}
		HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // disable driver
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	4873      	ldr	r0, [pc, #460]	@ (8001e70 <processInput+0xca0>)
 8001ca4:	f001 fb48 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 8001ca8:	2108      	movs	r1, #8
 8001caa:	4872      	ldr	r0, [pc, #456]	@ (8001e74 <processInput+0xca4>)
 8001cac:	f003 fa70 	bl	8005190 <HAL_TIM_OC_Stop>
		return 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e178      	b.n	8001fa6 <processInput+0xdd6>
	case 'd': // Run motor 2 CW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	486f      	ldr	r0, [pc, #444]	@ (8001e74 <processInput+0xca4>)
 8001cb8:	f003 f9c8 	bl	800504c <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // disable driver
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2108      	movs	r1, #8
 8001cc0:	486b      	ldr	r0, [pc, #428]	@ (8001e70 <processInput+0xca0>)
 8001cc2:	f001 fb39 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 8001cc6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cca:	f000 fc51 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, SET); // set motor direction
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4867      	ldr	r0, [pc, #412]	@ (8001e70 <processInput+0xca0>)
 8001cd4:	f001 fb30 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, SET); // enable driver to run motor
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2108      	movs	r1, #8
 8001cdc:	4864      	ldr	r0, [pc, #400]	@ (8001e70 <processInput+0xca0>)
 8001cde:	f001 fb2b 	bl	8003338 <HAL_GPIO_WritePin>
		// read current
		// should launch a timer here and stop it after X seconds
		t0 = HAL_GetTick();
 8001ce2:	f000 fc3b 	bl	800255c <HAL_GetTick>
 8001ce6:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

		for (uint8_t ci = 1; ci < 20; ci++){
 8001cea:	2301      	movs	r3, #1
 8001cec:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
 8001cf0:	e076      	b.n	8001de0 <processInput+0xc10>
			adcReading = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			for(uint8_t cj = 0; cj<100; cj++){
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
 8001cfe:	e01a      	b.n	8001d36 <processInput+0xb66>
				HAL_ADC_Start(&hadc2);
 8001d00:	4857      	ldr	r0, [pc, #348]	@ (8001e60 <processInput+0xc90>)
 8001d02:	f000 fd31 	bl	8002768 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, 100);
 8001d06:	2164      	movs	r1, #100	@ 0x64
 8001d08:	4855      	ldr	r0, [pc, #340]	@ (8001e60 <processInput+0xc90>)
 8001d0a:	f000 fe07 	bl	800291c <HAL_ADC_PollForConversion>
				adcReading += HAL_ADC_GetValue(&hadc2);
 8001d0e:	4854      	ldr	r0, [pc, #336]	@ (8001e60 <processInput+0xc90>)
 8001d10:	f000 ff0a 	bl	8002b28 <HAL_ADC_GetValue>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				HAL_ADC_Stop(&hadc2);
 8001d20:	484f      	ldr	r0, [pc, #316]	@ (8001e60 <processInput+0xc90>)
 8001d22:	f000 fdcf 	bl	80028c4 <HAL_ADC_Stop>
				HAL_Delay(1);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f000 fc22 	bl	8002570 <HAL_Delay>
			for(uint8_t cj = 0; cj<100; cj++){
 8001d2c:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8001d30:	3301      	adds	r3, #1
 8001d32:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
 8001d36:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 8001d3a:	2b63      	cmp	r3, #99	@ 0x63
 8001d3c:	d9e0      	bls.n	8001d00 <processInput+0xb30>
			}
			adcReading = adcReading/100;
 8001d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d42:	4a48      	ldr	r2, [pc, #288]	@ (8001e64 <processInput+0xc94>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	095b      	lsrs	r3, r3, #5
 8001d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			motor_i = (uint16_t) (adcReading * 0.163 + 7.3581); // mA - opAmp G = 50, Rsense = 0.10 ohm
 8001d4e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001d52:	f7fe fd25 	bl	80007a0 <__aeabi_ui2d>
 8001d56:	a33e      	add	r3, pc, #248	@ (adr r3, 8001e50 <processInput+0xc80>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fa00 	bl	8000160 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	a33b      	add	r3, pc, #236	@ (adr r3, 8001e58 <processInput+0xc88>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fbdb 	bl	8000528 <__adddf3>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4610      	mov	r0, r2
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7fe fd8b 	bl	8000894 <__aeabi_d2uiz>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

			sprintf(adcmsg, "[AD# %d] Im_%d = %d mA\r\n", (int)adcReading, ci ,(int) motor_i);
 8001d84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001d88:	f897 10de 	ldrb.w	r1, [r7, #222]	@ 0xde
 8001d8c:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8001d90:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	460b      	mov	r3, r1
 8001d98:	4933      	ldr	r1, [pc, #204]	@ (8001e68 <processInput+0xc98>)
 8001d9a:	f004 f9d3 	bl	8006144 <siprintf>
			HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001d9e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe f9d4 	bl	8000150 <strlen>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	482d      	ldr	r0, [pc, #180]	@ (8001e6c <processInput+0xc9c>)
 8001db6:	f003 fed1 	bl	8005b5c <HAL_UART_Transmit>
			HAL_Delay(1000);
 8001dba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dbe:	f000 fbd7 	bl	8002570 <HAL_Delay>
			if((HAL_GetTick() - t0) > runtime) break;
 8001dc2:	f000 fbcb 	bl	800255c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d309      	bcc.n	8001dea <processInput+0xc1a>
		for (uint8_t ci = 1; ci < 20; ci++){
 8001dd6:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f887 30de 	strb.w	r3, [r7, #222]	@ 0xde
 8001de0:	f897 30de 	ldrb.w	r3, [r7, #222]	@ 0xde
 8001de4:	2b13      	cmp	r3, #19
 8001de6:	d984      	bls.n	8001cf2 <processInput+0xb22>
 8001de8:	e000      	b.n	8001dec <processInput+0xc1c>
			if((HAL_GetTick() - t0) > runtime) break;
 8001dea:	bf00      	nop
		}
		HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // disable driver
 8001dec:	2200      	movs	r2, #0
 8001dee:	2108      	movs	r1, #8
 8001df0:	481f      	ldr	r0, [pc, #124]	@ (8001e70 <processInput+0xca0>)
 8001df2:	f001 faa1 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 8001df6:	2108      	movs	r1, #8
 8001df8:	481e      	ldr	r0, [pc, #120]	@ (8001e74 <processInput+0xca4>)
 8001dfa:	f003 f9c9 	bl	8005190 <HAL_TIM_OC_Stop>

		return 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e0d1      	b.n	8001fa6 <processInput+0xdd6>
	case 'f': // Run motor 2 CCW
		HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 8001e02:	2108      	movs	r1, #8
 8001e04:	481b      	ldr	r0, [pc, #108]	@ (8001e74 <processInput+0xca4>)
 8001e06:	f003 f921 	bl	800504c <HAL_TIM_OC_Start>
		// motor
		HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // disable driver
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	4818      	ldr	r0, [pc, #96]	@ (8001e70 <processInput+0xca0>)
 8001e10:	f001 fa92 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_Delay(500); // wait for the motor to stop
 8001e14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e18:	f000 fbaa 	bl	8002570 <HAL_Delay>
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin, RESET); // set motor direction
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2110      	movs	r1, #16
 8001e20:	4813      	ldr	r0, [pc, #76]	@ (8001e70 <processInput+0xca0>)
 8001e22:	f001 fa89 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, SET); // enable driver to run motor
 8001e26:	2201      	movs	r2, #1
 8001e28:	2108      	movs	r1, #8
 8001e2a:	4811      	ldr	r0, [pc, #68]	@ (8001e70 <processInput+0xca0>)
 8001e2c:	f001 fa84 	bl	8003338 <HAL_GPIO_WritePin>
		// read current
		// should launch a timer here and stop it after X seconds

		t0 = HAL_GetTick();
 8001e30:	f000 fb94 	bl	800255c <HAL_GetTick>
 8001e34:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc

		for (uint8_t ci = 1; ci < 20; ci++){
 8001e38:	2301      	movs	r3, #1
 8001e3a:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
 8001e3e:	e08b      	b.n	8001f58 <processInput+0xd88>
			adcReading = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			for(uint8_t cj = 0; cj<100; cj++){
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 8001e4c:	e02f      	b.n	8001eae <processInput+0xcde>
 8001e4e:	bf00      	nop
 8001e50:	1a9fbe77 	.word	0x1a9fbe77
 8001e54:	3fc4dd2f 	.word	0x3fc4dd2f
 8001e58:	c432ca58 	.word	0xc432ca58
 8001e5c:	401d6eb1 	.word	0x401d6eb1
 8001e60:	200000a8 	.word	0x200000a8
 8001e64:	51eb851f 	.word	0x51eb851f
 8001e68:	08006b90 	.word	0x08006b90
 8001e6c:	20000178 	.word	0x20000178
 8001e70:	40011000 	.word	0x40011000
 8001e74:	20000130 	.word	0x20000130
				HAL_ADC_Start(&hadc2);
 8001e78:	4851      	ldr	r0, [pc, #324]	@ (8001fc0 <processInput+0xdf0>)
 8001e7a:	f000 fc75 	bl	8002768 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc2, 100);
 8001e7e:	2164      	movs	r1, #100	@ 0x64
 8001e80:	484f      	ldr	r0, [pc, #316]	@ (8001fc0 <processInput+0xdf0>)
 8001e82:	f000 fd4b 	bl	800291c <HAL_ADC_PollForConversion>
				adcReading += HAL_ADC_GetValue(&hadc2);
 8001e86:	484e      	ldr	r0, [pc, #312]	@ (8001fc0 <processInput+0xdf0>)
 8001e88:	f000 fe4e 	bl	8002b28 <HAL_ADC_GetValue>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e92:	4413      	add	r3, r2
 8001e94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
				HAL_ADC_Stop(&hadc2);
 8001e98:	4849      	ldr	r0, [pc, #292]	@ (8001fc0 <processInput+0xdf0>)
 8001e9a:	f000 fd13 	bl	80028c4 <HAL_ADC_Stop>
				HAL_Delay(1);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f000 fb66 	bl	8002570 <HAL_Delay>
			for(uint8_t cj = 0; cj<100; cj++){
 8001ea4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
 8001eae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8001eb2:	2b63      	cmp	r3, #99	@ 0x63
 8001eb4:	d9e0      	bls.n	8001e78 <processInput+0xca8>
			}
			adcReading = adcReading/100;
 8001eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eba:	4a42      	ldr	r2, [pc, #264]	@ (8001fc4 <processInput+0xdf4>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
			motor_i = (uint16_t) (adcReading * 0.163 + 7.3581); // mA - opAmp G = 50, Rsense = 0.10 ohm
 8001ec6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001eca:	f7fe fc69 	bl	80007a0 <__aeabi_ui2d>
 8001ece:	a338      	add	r3, pc, #224	@ (adr r3, 8001fb0 <processInput+0xde0>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe f944 	bl	8000160 <__aeabi_dmul>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	a335      	add	r3, pc, #212	@ (adr r3, 8001fb8 <processInput+0xde8>)
 8001ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee6:	f7fe fb1f 	bl	8000528 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fccf 	bl	8000894 <__aeabi_d2uiz>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2

			sprintf(adcmsg, "[AD# %d] Im_%d = %d mA\r\n", (int)adcReading, ci ,(int) motor_i);
 8001efc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001f00:	f897 10dc 	ldrb.w	r1, [r7, #220]	@ 0xdc
 8001f04:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	@ 0xd2
 8001f08:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	492d      	ldr	r1, [pc, #180]	@ (8001fc8 <processInput+0xdf8>)
 8001f12:	f004 f917 	bl	8006144 <siprintf>
			HAL_UART_Transmit(&huart1, adcmsg, strlen(adcmsg), HAL_MAX_DELAY);
 8001f16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe f918 	bl	8000150 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8001f28:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2c:	4827      	ldr	r0, [pc, #156]	@ (8001fcc <processInput+0xdfc>)
 8001f2e:	f003 fe15 	bl	8005b5c <HAL_UART_Transmit>
			HAL_Delay(1000);
 8001f32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f36:	f000 fb1b 	bl	8002570 <HAL_Delay>
			if((HAL_GetTick() - t0) > runtime) break;
 8001f3a:	f000 fb0f 	bl	800255c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d30a      	bcc.n	8001f64 <processInput+0xd94>
		for (uint8_t ci = 1; ci < 20; ci++){
 8001f4e:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8001f52:	3301      	adds	r3, #1
 8001f54:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
 8001f58:	f897 30dc 	ldrb.w	r3, [r7, #220]	@ 0xdc
 8001f5c:	2b13      	cmp	r3, #19
 8001f5e:	f67f af6f 	bls.w	8001e40 <processInput+0xc70>
 8001f62:	e000      	b.n	8001f66 <processInput+0xd96>
			if((HAL_GetTick() - t0) > runtime) break;
 8001f64:	bf00      	nop
		}
		HAL_GPIO_WritePin(ENABLE_M2_GPIO_Port, ENABLE_M2_Pin, RESET); // disable driver
 8001f66:	2200      	movs	r2, #0
 8001f68:	2108      	movs	r1, #8
 8001f6a:	4819      	ldr	r0, [pc, #100]	@ (8001fd0 <processInput+0xe00>)
 8001f6c:	f001 f9e4 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_TIM_OC_Stop(&htim3, TIM_CHANNEL_3 );
 8001f70:	2108      	movs	r1, #8
 8001f72:	4818      	ldr	r0, [pc, #96]	@ (8001fd4 <processInput+0xe04>)
 8001f74:	f003 f90c 	bl	8005190 <HAL_TIM_OC_Stop>
		return 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e014      	b.n	8001fa6 <processInput+0xdd6>

	default:
		sprintf(msg, "\r\n> %d is not a valid option!");
 8001f7c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001f80:	4915      	ldr	r1, [pc, #84]	@ (8001fd8 <processInput+0xe08>)
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f8de 	bl	8006144 <siprintf>
		HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 8001f88:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe f8df 	bl	8000150 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	480b      	ldr	r0, [pc, #44]	@ (8001fcc <processInput+0xdfc>)
 8001fa0:	f003 fddc 	bl	8005b5c <HAL_UART_Transmit>
		return 1;
 8001fa4:	2301      	movs	r3, #1
		return 1;

	}
*/

}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	37ec      	adds	r7, #236	@ 0xec
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	1a9fbe77 	.word	0x1a9fbe77
 8001fb4:	3fc4dd2f 	.word	0x3fc4dd2f
 8001fb8:	c432ca58 	.word	0xc432ca58
 8001fbc:	401d6eb1 	.word	0x401d6eb1
 8001fc0:	200000a8 	.word	0x200000a8
 8001fc4:	51eb851f 	.word	0x51eb851f
 8001fc8:	08006b90 	.word	0x08006b90
 8001fcc:	20000178 	.word	0x20000178
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	20000130 	.word	0x20000130
 8001fd8:	08006bac 	.word	0x08006bac

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <Error_Handler+0x8>

08001fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fee:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_MspInit+0x5c>)
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	@ (8002044 <HAL_MspInit+0x5c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6193      	str	r3, [r2, #24]
 8001ffa:	4b12      	ldr	r3, [pc, #72]	@ (8002044 <HAL_MspInit+0x5c>)
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b0f      	ldr	r3, [pc, #60]	@ (8002044 <HAL_MspInit+0x5c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a0e      	ldr	r2, [pc, #56]	@ (8002044 <HAL_MspInit+0x5c>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
 8002012:	4b0c      	ldr	r3, [pc, #48]	@ (8002044 <HAL_MspInit+0x5c>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_MspInit+0x60>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_MspInit+0x60>)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	40021000 	.word	0x40021000
 8002048:	40010000 	.word	0x40010000

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <NMI_Handler+0x4>

08002054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <MemManage_Handler+0x4>

08002064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	bf00      	nop
 8002072:	e7fd      	b.n	8002070 <UsageFault_Handler+0x4>

08002074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209c:	f000 fa4c 	bl	8002538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ac:	4a14      	ldr	r2, [pc, #80]	@ (8002100 <_sbrk+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <_sbrk+0x60>)
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b8:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c0:	4b11      	ldr	r3, [pc, #68]	@ (8002108 <_sbrk+0x64>)
 80020c2:	4a12      	ldr	r2, [pc, #72]	@ (800210c <_sbrk+0x68>)
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d207      	bcs.n	80020e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d4:	f004 f85e 	bl	8006194 <__errno>
 80020d8:	4603      	mov	r3, r0
 80020da:	220c      	movs	r2, #12
 80020dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020de:	f04f 33ff 	mov.w	r3, #4294967295
 80020e2:	e009      	b.n	80020f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <_sbrk+0x64>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ea:	4b07      	ldr	r3, [pc, #28]	@ (8002108 <_sbrk+0x64>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	4a05      	ldr	r2, [pc, #20]	@ (8002108 <_sbrk+0x64>)
 80020f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f6:	68fb      	ldr	r3, [r7, #12]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20005000 	.word	0x20005000
 8002104:	00000400 	.word	0x00000400
 8002108:	2000012c 	.word	0x2000012c
 800210c:	20000358 	.word	0x20000358

08002110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	@ 0x38
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002122:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002130:	f107 0320 	add.w	r3, r7, #32
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800214c:	4b2c      	ldr	r3, [pc, #176]	@ (8002200 <MX_TIM3_Init+0xe4>)
 800214e:	4a2d      	ldr	r2, [pc, #180]	@ (8002204 <MX_TIM3_Init+0xe8>)
 8002150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8002152:	4b2b      	ldr	r3, [pc, #172]	@ (8002200 <MX_TIM3_Init+0xe4>)
 8002154:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002158:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215a:	4b29      	ldr	r3, [pc, #164]	@ (8002200 <MX_TIM3_Init+0xe4>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 8002160:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <MX_TIM3_Init+0xe4>)
 8002162:	220e      	movs	r2, #14
 8002164:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b26      	ldr	r3, [pc, #152]	@ (8002200 <MX_TIM3_Init+0xe4>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800216c:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <MX_TIM3_Init+0xe4>)
 800216e:	2280      	movs	r2, #128	@ 0x80
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002172:	4823      	ldr	r0, [pc, #140]	@ (8002200 <MX_TIM3_Init+0xe4>)
 8002174:	f002 fec2 	bl	8004efc <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800217e:	f7ff ff2d 	bl	8001fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002182:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002188:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800218c:	4619      	mov	r1, r3
 800218e:	481c      	ldr	r0, [pc, #112]	@ (8002200 <MX_TIM3_Init+0xe4>)
 8002190:	f003 f8be 	bl	8005310 <HAL_TIM_ConfigClockSource>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800219a:	f7ff ff1f 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800219e:	4818      	ldr	r0, [pc, #96]	@ (8002200 <MX_TIM3_Init+0xe4>)
 80021a0:	f002 fefb 	bl	8004f9a <HAL_TIM_OC_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80021aa:	f7ff ff17 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	4619      	mov	r1, r3
 80021bc:	4810      	ldr	r0, [pc, #64]	@ (8002200 <MX_TIM3_Init+0xe4>)
 80021be:	f003 fc1f 	bl	8005a00 <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80021c8:	f7ff ff08 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80021cc:	2330      	movs	r3, #48	@ 0x30
 80021ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2208      	movs	r2, #8
 80021e0:	4619      	mov	r1, r3
 80021e2:	4807      	ldr	r0, [pc, #28]	@ (8002200 <MX_TIM3_Init+0xe4>)
 80021e4:	f003 f838 	bl	8005258 <HAL_TIM_OC_ConfigChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80021ee:	f7ff fef5 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021f2:	4803      	ldr	r0, [pc, #12]	@ (8002200 <MX_TIM3_Init+0xe4>)
 80021f4:	f000 f826 	bl	8002244 <HAL_TIM_MspPostInit>

}
 80021f8:	bf00      	nop
 80021fa:	3738      	adds	r7, #56	@ 0x38
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20000130 	.word	0x20000130
 8002204:	40000400 	.word	0x40000400

08002208 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a09      	ldr	r2, [pc, #36]	@ (800223c <HAL_TIM_Base_MspInit+0x34>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d10b      	bne.n	8002232 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_TIM_Base_MspInit+0x38>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <HAL_TIM_Base_MspInit+0x38>)
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	61d3      	str	r3, [r2, #28]
 8002226:	4b06      	ldr	r3, [pc, #24]	@ (8002240 <HAL_TIM_Base_MspInit+0x38>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr
 800223c:	40000400 	.word	0x40000400
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0f      	ldr	r2, [pc, #60]	@ (800229c <HAL_TIM_MspPostInit+0x58>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d117      	bne.n	8002294 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002264:	4b0e      	ldr	r3, [pc, #56]	@ (80022a0 <HAL_TIM_MspPostInit+0x5c>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a0d      	ldr	r2, [pc, #52]	@ (80022a0 <HAL_TIM_MspPostInit+0x5c>)
 800226a:	f043 0308 	orr.w	r3, r3, #8
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_TIM_MspPostInit+0x5c>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800227c:	2301      	movs	r3, #1
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2302      	movs	r3, #2
 8002286:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	4619      	mov	r1, r3
 800228e:	4805      	ldr	r0, [pc, #20]	@ (80022a4 <HAL_TIM_MspPostInit+0x60>)
 8002290:	f000 fece 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002294:	bf00      	nop
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40000400 	.word	0x40000400
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40010c00 	.word	0x40010c00

080022a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ac:	4b11      	ldr	r3, [pc, #68]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022ae:	4a12      	ldr	r2, [pc, #72]	@ (80022f8 <MX_USART1_UART_Init+0x50>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 4800;
 80022b2:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022b4:	f44f 5296 	mov.w	r2, #4800	@ 0x12c0
 80022b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b09      	ldr	r3, [pc, #36]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b08      	ldr	r3, [pc, #32]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022de:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <MX_USART1_UART_Init+0x4c>)
 80022e0:	f003 fbec 	bl	8005abc <HAL_UART_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022ea:	f7ff fe77 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000178 	.word	0x20000178
 80022f8:	40013800 	.word	0x40013800

080022fc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 8002302:	4a12      	ldr	r2, [pc, #72]	@ (800234c <MX_USART3_UART_Init+0x50>)
 8002304:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 8002308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800230c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002320:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 8002322:	220c      	movs	r2, #12
 8002324:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800232c:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002332:	4805      	ldr	r0, [pc, #20]	@ (8002348 <MX_USART3_UART_Init+0x4c>)
 8002334:	f003 fbc2 	bl	8005abc <HAL_UART_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800233e:	f7ff fe4d 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	200001c0 	.word	0x200001c0
 800234c:	40004800 	.word	0x40004800

08002350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0318 	add.w	r3, r7, #24
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a38      	ldr	r2, [pc, #224]	@ (800244c <HAL_UART_MspInit+0xfc>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d132      	bne.n	80023d6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002370:	4b37      	ldr	r3, [pc, #220]	@ (8002450 <HAL_UART_MspInit+0x100>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a36      	ldr	r2, [pc, #216]	@ (8002450 <HAL_UART_MspInit+0x100>)
 8002376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <HAL_UART_MspInit+0x100>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b31      	ldr	r3, [pc, #196]	@ (8002450 <HAL_UART_MspInit+0x100>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a30      	ldr	r2, [pc, #192]	@ (8002450 <HAL_UART_MspInit+0x100>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b2e      	ldr	r3, [pc, #184]	@ (8002450 <HAL_UART_MspInit+0x100>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ae:	f107 0318 	add.w	r3, r7, #24
 80023b2:	4619      	mov	r1, r3
 80023b4:	4827      	ldr	r0, [pc, #156]	@ (8002454 <HAL_UART_MspInit+0x104>)
 80023b6:	f000 fe3b 	bl	8003030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 0318 	add.w	r3, r7, #24
 80023cc:	4619      	mov	r1, r3
 80023ce:	4821      	ldr	r0, [pc, #132]	@ (8002454 <HAL_UART_MspInit+0x104>)
 80023d0:	f000 fe2e 	bl	8003030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80023d4:	e036      	b.n	8002444 <HAL_UART_MspInit+0xf4>
  else if(uartHandle->Instance==USART3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1f      	ldr	r2, [pc, #124]	@ (8002458 <HAL_UART_MspInit+0x108>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d131      	bne.n	8002444 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <HAL_UART_MspInit+0x100>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002450 <HAL_UART_MspInit+0x100>)
 80023e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ea:	61d3      	str	r3, [r2, #28]
 80023ec:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <HAL_UART_MspInit+0x100>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f8:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_UART_MspInit+0x100>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <HAL_UART_MspInit+0x100>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_UART_MspInit+0x100>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 0318 	add.w	r3, r7, #24
 8002422:	4619      	mov	r1, r3
 8002424:	480d      	ldr	r0, [pc, #52]	@ (800245c <HAL_UART_MspInit+0x10c>)
 8002426:	f000 fe03 	bl	8003030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800242a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002430:	2300      	movs	r3, #0
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	4619      	mov	r1, r3
 800243e:	4807      	ldr	r0, [pc, #28]	@ (800245c <HAL_UART_MspInit+0x10c>)
 8002440:	f000 fdf6 	bl	8003030 <HAL_GPIO_Init>
}
 8002444:	bf00      	nop
 8002446:	3728      	adds	r7, #40	@ 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40013800 	.word	0x40013800
 8002450:	40021000 	.word	0x40021000
 8002454:	40010800 	.word	0x40010800
 8002458:	40004800 	.word	0x40004800
 800245c:	40010c00 	.word	0x40010c00

08002460 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002460:	f7ff fe56 	bl	8002110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002464:	480b      	ldr	r0, [pc, #44]	@ (8002494 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002466:	490c      	ldr	r1, [pc, #48]	@ (8002498 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002468:	4a0c      	ldr	r2, [pc, #48]	@ (800249c <LoopFillZerobss+0x16>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800246c:	e002      	b.n	8002474 <LoopCopyDataInit>

0800246e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002472:	3304      	adds	r3, #4

08002474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002478:	d3f9      	bcc.n	800246e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800247a:	4a09      	ldr	r2, [pc, #36]	@ (80024a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800247c:	4c09      	ldr	r4, [pc, #36]	@ (80024a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002480:	e001      	b.n	8002486 <LoopFillZerobss>

08002482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002484:	3204      	adds	r2, #4

08002486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002488:	d3fb      	bcc.n	8002482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800248a:	f003 fe89 	bl	80061a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800248e:	f7fe fd8d 	bl	8000fac <main>
  bx lr
 8002492:	4770      	bx	lr
  ldr r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002498:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800249c:	08006fa0 	.word	0x08006fa0
  ldr r2, =_sbss
 80024a0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80024a4:	20000354 	.word	0x20000354

080024a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024a8:	e7fe      	b.n	80024a8 <ADC1_2_IRQHandler>
	...

080024ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b0:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <HAL_Init+0x28>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <HAL_Init+0x28>)
 80024b6:	f043 0310 	orr.w	r3, r3, #16
 80024ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024bc:	2003      	movs	r0, #3
 80024be:	f000 fd83 	bl	8002fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c2:	200f      	movs	r0, #15
 80024c4:	f000 f808 	bl	80024d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024c8:	f7ff fd8e 	bl	8001fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40022000 	.word	0x40022000

080024d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e0:	4b12      	ldr	r3, [pc, #72]	@ (800252c <HAL_InitTick+0x54>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <HAL_InitTick+0x58>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fd8d 	bl	8003016 <HAL_SYSTICK_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e00e      	b.n	8002524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d80a      	bhi.n	8002522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	f000 fd63 	bl	8002fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002518:	4a06      	ldr	r2, [pc, #24]	@ (8002534 <HAL_InitTick+0x5c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
 8002520:	e000      	b.n	8002524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000000 	.word	0x20000000
 8002530:	20000008 	.word	0x20000008
 8002534:	20000004 	.word	0x20000004

08002538 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800253c:	4b05      	ldr	r3, [pc, #20]	@ (8002554 <HAL_IncTick+0x1c>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	4b05      	ldr	r3, [pc, #20]	@ (8002558 <HAL_IncTick+0x20>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4413      	add	r3, r2
 8002548:	4a03      	ldr	r2, [pc, #12]	@ (8002558 <HAL_IncTick+0x20>)
 800254a:	6013      	str	r3, [r2, #0]
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000008 	.word	0x20000008
 8002558:	20000208 	.word	0x20000208

0800255c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return uwTick;
 8002560:	4b02      	ldr	r3, [pc, #8]	@ (800256c <HAL_GetTick+0x10>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	20000208 	.word	0x20000208

08002570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff fff0 	bl	800255c <HAL_GetTick>
 800257c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002588:	d005      	beq.n	8002596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_Delay+0x44>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002596:	bf00      	nop
 8002598:	f7ff ffe0 	bl	800255c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d8f7      	bhi.n	8002598 <HAL_Delay+0x28>
  {
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	20000008 	.word	0x20000008

080025b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0be      	b.n	8002758 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7fe fb6c 	bl	8000cd4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fbf1 	bl	8002de4 <ADC_ConversionStop_Disable>
 8002602:	4603      	mov	r3, r0
 8002604:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	2b00      	cmp	r3, #0
 8002610:	f040 8099 	bne.w	8002746 <HAL_ADC_Init+0x18e>
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 8095 	bne.w	8002746 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002620:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002624:	f023 0302 	bic.w	r3, r3, #2
 8002628:	f043 0202 	orr.w	r2, r3, #2
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002638:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	7b1b      	ldrb	r3, [r3, #12]
 800263e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002640:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	4313      	orrs	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002650:	d003      	beq.n	800265a <HAL_ADC_Init+0xa2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d102      	bne.n	8002660 <HAL_ADC_Init+0xa8>
 800265a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800265e:	e000      	b.n	8002662 <HAL_ADC_Init+0xaa>
 8002660:	2300      	movs	r3, #0
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	7d1b      	ldrb	r3, [r3, #20]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d119      	bne.n	80026a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7b1b      	ldrb	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d109      	bne.n	800268c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	3b01      	subs	r3, #1
 800267e:	035a      	lsls	r2, r3, #13
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e00b      	b.n	80026a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	f043 0220 	orr.w	r2, r3, #32
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	4b28      	ldr	r3, [pc, #160]	@ (8002760 <HAL_ADC_Init+0x1a8>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6812      	ldr	r2, [r2, #0]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d4:	d003      	beq.n	80026de <HAL_ADC_Init+0x126>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d104      	bne.n	80026e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	051b      	lsls	r3, r3, #20
 80026e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <HAL_ADC_Init+0x1ac>)
 8002704:	4013      	ands	r3, r2
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	429a      	cmp	r2, r3
 800270a:	d10b      	bne.n	8002724 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	f043 0201 	orr.w	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002722:	e018      	b.n	8002756 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002728:	f023 0312 	bic.w	r3, r3, #18
 800272c:	f043 0210 	orr.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002738:	f043 0201 	orr.w	r2, r3, #1
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002744:	e007      	b.n	8002756 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002756:	7dfb      	ldrb	r3, [r7, #23]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	ffe1f7fd 	.word	0xffe1f7fd
 8002764:	ff1f0efe 	.word	0xff1f0efe

08002768 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800277a:	2b01      	cmp	r3, #1
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Start+0x1a>
 800277e:	2302      	movs	r3, #2
 8002780:	e098      	b.n	80028b4 <HAL_ADC_Start+0x14c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fad0 	bl	8002d30 <ADC_Enable>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f040 8087 	bne.w	80028aa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a41      	ldr	r2, [pc, #260]	@ (80028bc <HAL_ADC_Start+0x154>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d105      	bne.n	80027c6 <HAL_ADC_Start+0x5e>
 80027ba:	4b41      	ldr	r3, [pc, #260]	@ (80028c0 <HAL_ADC_Start+0x158>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d115      	bne.n	80027f2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ca:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d026      	beq.n	800282e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027e8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027f0:	e01d      	b.n	800282e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2f      	ldr	r2, [pc, #188]	@ (80028c0 <HAL_ADC_Start+0x158>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_ADC_Start+0xaa>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a2b      	ldr	r2, [pc, #172]	@ (80028bc <HAL_ADC_Start+0x154>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d10d      	bne.n	800282e <HAL_ADC_Start+0xc6>
 8002812:	4b2b      	ldr	r3, [pc, #172]	@ (80028c0 <HAL_ADC_Start+0x158>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002822:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002826:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d006      	beq.n	8002848 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283e:	f023 0206 	bic.w	r2, r3, #6
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002846:	e002      	b.n	800284e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f06f 0202 	mvn.w	r2, #2
 800285e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800286a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800286e:	d113      	bne.n	8002898 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002874:	4a11      	ldr	r2, [pc, #68]	@ (80028bc <HAL_ADC_Start+0x154>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d105      	bne.n	8002886 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_ADC_Start+0x158>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d108      	bne.n	8002898 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	e00c      	b.n	80028b2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	e003      	b.n	80028b2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40012800 	.word	0x40012800
 80028c0:	40012400 	.word	0x40012400

080028c4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d101      	bne.n	80028de <HAL_ADC_Stop+0x1a>
 80028da:	2302      	movs	r3, #2
 80028dc:	e01a      	b.n	8002914 <HAL_ADC_Stop+0x50>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa7c 	bl	8002de4 <ADC_ConversionStop_Disable>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f043 0201 	orr.w	r2, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002932:	f7ff fe13 	bl	800255c <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	f043 0220 	orr.w	r2, r3, #32
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e0d3      	b.n	8002b06 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d131      	bne.n	80029d0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002972:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d12a      	bne.n	80029d0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800297a:	e021      	b.n	80029c0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002982:	d01d      	beq.n	80029c0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <HAL_ADC_PollForConversion+0x7e>
 800298a:	f7ff fde7 	bl	800255c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d212      	bcs.n	80029c0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ac:	f043 0204 	orr.w	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0a2      	b.n	8002b06 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0d6      	beq.n	800297c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029ce:	e070      	b.n	8002ab2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80029d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002b10 <HAL_ADC_PollForConversion+0x1f4>)
 80029d2:	681c      	ldr	r4, [r3, #0]
 80029d4:	2002      	movs	r0, #2
 80029d6:	f002 f9db 	bl	8004d90 <HAL_RCCEx_GetPeriphCLKFreq>
 80029da:	4603      	mov	r3, r0
 80029dc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6919      	ldr	r1, [r3, #16]
 80029e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002b14 <HAL_ADC_PollForConversion+0x1f8>)
 80029e8:	400b      	ands	r3, r1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d118      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x104>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68d9      	ldr	r1, [r3, #12]
 80029f4:	4b48      	ldr	r3, [pc, #288]	@ (8002b18 <HAL_ADC_PollForConversion+0x1fc>)
 80029f6:	400b      	ands	r3, r1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d111      	bne.n	8002a20 <HAL_ADC_PollForConversion+0x104>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <HAL_ADC_PollForConversion+0x200>)
 8002a04:	400b      	ands	r3, r1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_ADC_PollForConversion+0x100>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68d9      	ldr	r1, [r3, #12]
 8002a10:	4b43      	ldr	r3, [pc, #268]	@ (8002b20 <HAL_ADC_PollForConversion+0x204>)
 8002a12:	400b      	ands	r3, r1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_PollForConversion+0x100>
 8002a18:	2314      	movs	r3, #20
 8002a1a:	e020      	b.n	8002a5e <HAL_ADC_PollForConversion+0x142>
 8002a1c:	2329      	movs	r3, #41	@ 0x29
 8002a1e:	e01e      	b.n	8002a5e <HAL_ADC_PollForConversion+0x142>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	6919      	ldr	r1, [r3, #16]
 8002a26:	4b3d      	ldr	r3, [pc, #244]	@ (8002b1c <HAL_ADC_PollForConversion+0x200>)
 8002a28:	400b      	ands	r3, r1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_ADC_PollForConversion+0x120>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	4b3a      	ldr	r3, [pc, #232]	@ (8002b20 <HAL_ADC_PollForConversion+0x204>)
 8002a36:	400b      	ands	r3, r1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_ADC_PollForConversion+0x13c>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6919      	ldr	r1, [r3, #16]
 8002a42:	4b38      	ldr	r3, [pc, #224]	@ (8002b24 <HAL_ADC_PollForConversion+0x208>)
 8002a44:	400b      	ands	r3, r1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d108      	bne.n	8002a5c <HAL_ADC_PollForConversion+0x140>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	4b34      	ldr	r3, [pc, #208]	@ (8002b24 <HAL_ADC_PollForConversion+0x208>)
 8002a52:	400b      	ands	r3, r1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_PollForConversion+0x140>
 8002a58:	2354      	movs	r3, #84	@ 0x54
 8002a5a:	e000      	b.n	8002a5e <HAL_ADC_PollForConversion+0x142>
 8002a5c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002a5e:	fb02 f303 	mul.w	r3, r2, r3
 8002a62:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a64:	e021      	b.n	8002aaa <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d01a      	beq.n	8002aa4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_ADC_PollForConversion+0x168>
 8002a74:	f7ff fd72 	bl	800255c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d20f      	bcs.n	8002aa4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d90b      	bls.n	8002aa4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a90:	f043 0204 	orr.w	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e030      	b.n	8002b06 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d8d9      	bhi.n	8002a66 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f06f 0212 	mvn.w	r2, #18
 8002aba:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002ad2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002ad6:	d115      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d111      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afc:	f043 0201 	orr.w	r2, r3, #1
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd90      	pop	{r4, r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000000 	.word	0x20000000
 8002b14:	24924924 	.word	0x24924924
 8002b18:	00924924 	.word	0x00924924
 8002b1c:	12492492 	.word	0x12492492
 8002b20:	00492492 	.word	0x00492492
 8002b24:	00249249 	.word	0x00249249

08002b28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr

08002b40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x20>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e0dc      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x1da>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d81c      	bhi.n	8002baa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b05      	subs	r3, #5
 8002b82:	221f      	movs	r2, #31
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b05      	subs	r3, #5
 8002b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ba8:	e03c      	b.n	8002c24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d81c      	bhi.n	8002bec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b23      	subs	r3, #35	@ 0x23
 8002bc4:	221f      	movs	r2, #31
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4019      	ands	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b23      	subs	r3, #35	@ 0x23
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bea:	e01b      	b.n	8002c24 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b41      	subs	r3, #65	@ 0x41
 8002bfe:	221f      	movs	r2, #31
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4019      	ands	r1, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	3b41      	subs	r3, #65	@ 0x41
 8002c18:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d91c      	bls.n	8002c66 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68d9      	ldr	r1, [r3, #12]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	2207      	movs	r2, #7
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	4019      	ands	r1, r3
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6898      	ldr	r0, [r3, #8]
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	4413      	add	r3, r2
 8002c56:	3b1e      	subs	r3, #30
 8002c58:	fa00 f203 	lsl.w	r2, r0, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	e019      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6919      	ldr	r1, [r3, #16]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	2207      	movs	r2, #7
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	4019      	ands	r1, r3
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6898      	ldr	r0, [r3, #8]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	4413      	add	r3, r2
 8002c8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b10      	cmp	r3, #16
 8002ca0:	d003      	beq.n	8002caa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ca6:	2b11      	cmp	r3, #17
 8002ca8:	d132      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a1d      	ldr	r2, [pc, #116]	@ (8002d24 <HAL_ADC_ConfigChannel+0x1e4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d125      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d126      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002cd0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2b10      	cmp	r3, #16
 8002cd8:	d11a      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cda:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <HAL_ADC_ConfigChannel+0x1e8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a13      	ldr	r2, [pc, #76]	@ (8002d2c <HAL_ADC_ConfigChannel+0x1ec>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	0c9a      	lsrs	r2, r3, #18
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cf0:	e002      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x1b2>
 8002cfe:	e007      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	40012400 	.word	0x40012400
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	431bde83 	.word	0x431bde83

08002d30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d040      	beq.n	8002dd0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <ADC_Enable+0xac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1f      	ldr	r2, [pc, #124]	@ (8002de0 <ADC_Enable+0xb0>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0c9b      	lsrs	r3, r3, #18
 8002d6a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d6c:	e002      	b.n	8002d74 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f9      	bne.n	8002d6e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d7a:	f7ff fbef 	bl	800255c <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d80:	e01f      	b.n	8002dc2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d82:	f7ff fbeb 	bl	800255c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d918      	bls.n	8002dc2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d011      	beq.n	8002dc2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da2:	f043 0210 	orr.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	f043 0201 	orr.w	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e007      	b.n	8002dd2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d1d8      	bne.n	8002d82 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	431bde83 	.word	0x431bde83

08002de4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d12e      	bne.n	8002e5c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e0e:	f7ff fba5 	bl	800255c <HAL_GetTick>
 8002e12:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e14:	e01b      	b.n	8002e4e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e16:	f7ff fba1 	bl	800255c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d914      	bls.n	8002e4e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d10d      	bne.n	8002e4e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	f043 0210 	orr.w	r2, r3, #16
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e42:	f043 0201 	orr.w	r2, r3, #1
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e007      	b.n	8002e5e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d0dc      	beq.n	8002e16 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e84:	4013      	ands	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9a:	4a04      	ldr	r2, [pc, #16]	@ (8002eac <__NVIC_SetPriorityGrouping+0x44>)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	60d3      	str	r3, [r2, #12]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb4:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	0a1b      	lsrs	r3, r3, #8
 8002eba:	f003 0307 	and.w	r3, r3, #7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	e000ed00 	.word	0xe000ed00

08002ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	6039      	str	r1, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	db0a      	blt.n	8002ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	490c      	ldr	r1, [pc, #48]	@ (8002f18 <__NVIC_SetPriority+0x4c>)
 8002ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eea:	0112      	lsls	r2, r2, #4
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	440b      	add	r3, r1
 8002ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ef4:	e00a      	b.n	8002f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4908      	ldr	r1, [pc, #32]	@ (8002f1c <__NVIC_SetPriority+0x50>)
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	3b04      	subs	r3, #4
 8002f04:	0112      	lsls	r2, r2, #4
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	440b      	add	r3, r1
 8002f0a:	761a      	strb	r2, [r3, #24]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	e000e100 	.word	0xe000e100
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	@ 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f1c3 0307 	rsb	r3, r3, #7
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	bf28      	it	cs
 8002f3e:	2304      	movcs	r3, #4
 8002f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	3304      	adds	r3, #4
 8002f46:	2b06      	cmp	r3, #6
 8002f48:	d902      	bls.n	8002f50 <NVIC_EncodePriority+0x30>
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3b03      	subs	r3, #3
 8002f4e:	e000      	b.n	8002f52 <NVIC_EncodePriority+0x32>
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43da      	mvns	r2, r3
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	401a      	ands	r2, r3
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f68:	f04f 31ff 	mov.w	r1, #4294967295
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	4313      	orrs	r3, r2
         );
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	@ 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f94:	d301      	bcc.n	8002f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00f      	b.n	8002fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fc4 <SysTick_Config+0x40>)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa8:	f7ff ff90 	bl	8002ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fac:	4b05      	ldr	r3, [pc, #20]	@ (8002fc4 <SysTick_Config+0x40>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fb2:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <SysTick_Config+0x40>)
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	e000e010 	.word	0xe000e010

08002fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff49 	bl	8002e68 <__NVIC_SetPriorityGrouping>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ff0:	f7ff ff5e 	bl	8002eb0 <__NVIC_GetPriorityGrouping>
 8002ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f7ff ff90 	bl	8002f20 <NVIC_EncodePriority>
 8003000:	4602      	mov	r2, r0
 8003002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff5f 	bl	8002ecc <__NVIC_SetPriority>
}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ffb0 	bl	8002f84 <SysTick_Config>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b08b      	sub	sp, #44	@ 0x2c
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003042:	e169      	b.n	8003318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003044:	2201      	movs	r2, #1
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	429a      	cmp	r2, r3
 800305e:	f040 8158 	bne.w	8003312 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a9a      	ldr	r2, [pc, #616]	@ (80032d0 <HAL_GPIO_Init+0x2a0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d05e      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 800306c:	4a98      	ldr	r2, [pc, #608]	@ (80032d0 <HAL_GPIO_Init+0x2a0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d875      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 8003072:	4a98      	ldr	r2, [pc, #608]	@ (80032d4 <HAL_GPIO_Init+0x2a4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d058      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 8003078:	4a96      	ldr	r2, [pc, #600]	@ (80032d4 <HAL_GPIO_Init+0x2a4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d86f      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 800307e:	4a96      	ldr	r2, [pc, #600]	@ (80032d8 <HAL_GPIO_Init+0x2a8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d052      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 8003084:	4a94      	ldr	r2, [pc, #592]	@ (80032d8 <HAL_GPIO_Init+0x2a8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d869      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 800308a:	4a94      	ldr	r2, [pc, #592]	@ (80032dc <HAL_GPIO_Init+0x2ac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d04c      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 8003090:	4a92      	ldr	r2, [pc, #584]	@ (80032dc <HAL_GPIO_Init+0x2ac>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d863      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 8003096:	4a92      	ldr	r2, [pc, #584]	@ (80032e0 <HAL_GPIO_Init+0x2b0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d046      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 800309c:	4a90      	ldr	r2, [pc, #576]	@ (80032e0 <HAL_GPIO_Init+0x2b0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d85d      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 80030a2:	2b12      	cmp	r3, #18
 80030a4:	d82a      	bhi.n	80030fc <HAL_GPIO_Init+0xcc>
 80030a6:	2b12      	cmp	r3, #18
 80030a8:	d859      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 80030aa:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <HAL_GPIO_Init+0x80>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	0800312b 	.word	0x0800312b
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003117 	.word	0x08003117
 80030bc:	08003159 	.word	0x08003159
 80030c0:	0800315f 	.word	0x0800315f
 80030c4:	0800315f 	.word	0x0800315f
 80030c8:	0800315f 	.word	0x0800315f
 80030cc:	0800315f 	.word	0x0800315f
 80030d0:	0800315f 	.word	0x0800315f
 80030d4:	0800315f 	.word	0x0800315f
 80030d8:	0800315f 	.word	0x0800315f
 80030dc:	0800315f 	.word	0x0800315f
 80030e0:	0800315f 	.word	0x0800315f
 80030e4:	0800315f 	.word	0x0800315f
 80030e8:	0800315f 	.word	0x0800315f
 80030ec:	0800315f 	.word	0x0800315f
 80030f0:	0800315f 	.word	0x0800315f
 80030f4:	0800310d 	.word	0x0800310d
 80030f8:	08003121 	.word	0x08003121
 80030fc:	4a79      	ldr	r2, [pc, #484]	@ (80032e4 <HAL_GPIO_Init+0x2b4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003102:	e02c      	b.n	800315e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	623b      	str	r3, [r7, #32]
          break;
 800310a:	e029      	b.n	8003160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	3304      	adds	r3, #4
 8003112:	623b      	str	r3, [r7, #32]
          break;
 8003114:	e024      	b.n	8003160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	3308      	adds	r3, #8
 800311c:	623b      	str	r3, [r7, #32]
          break;
 800311e:	e01f      	b.n	8003160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	330c      	adds	r3, #12
 8003126:	623b      	str	r3, [r7, #32]
          break;
 8003128:	e01a      	b.n	8003160 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003132:	2304      	movs	r3, #4
 8003134:	623b      	str	r3, [r7, #32]
          break;
 8003136:	e013      	b.n	8003160 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003140:	2308      	movs	r3, #8
 8003142:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	611a      	str	r2, [r3, #16]
          break;
 800314a:	e009      	b.n	8003160 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800314c:	2308      	movs	r3, #8
 800314e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	615a      	str	r2, [r3, #20]
          break;
 8003156:	e003      	b.n	8003160 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003158:	2300      	movs	r3, #0
 800315a:	623b      	str	r3, [r7, #32]
          break;
 800315c:	e000      	b.n	8003160 <HAL_GPIO_Init+0x130>
          break;
 800315e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2bff      	cmp	r3, #255	@ 0xff
 8003164:	d801      	bhi.n	800316a <HAL_GPIO_Init+0x13a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	e001      	b.n	800316e <HAL_GPIO_Init+0x13e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2bff      	cmp	r3, #255	@ 0xff
 8003174:	d802      	bhi.n	800317c <HAL_GPIO_Init+0x14c>
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	e002      	b.n	8003182 <HAL_GPIO_Init+0x152>
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	3b08      	subs	r3, #8
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	210f      	movs	r1, #15
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	401a      	ands	r2, r3
 8003194:	6a39      	ldr	r1, [r7, #32]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	431a      	orrs	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80b1 	beq.w	8003312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031b0:	4b4d      	ldr	r3, [pc, #308]	@ (80032e8 <HAL_GPIO_Init+0x2b8>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a4c      	ldr	r2, [pc, #304]	@ (80032e8 <HAL_GPIO_Init+0x2b8>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b4a      	ldr	r3, [pc, #296]	@ (80032e8 <HAL_GPIO_Init+0x2b8>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031c8:	4a48      	ldr	r2, [pc, #288]	@ (80032ec <HAL_GPIO_Init+0x2bc>)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	3302      	adds	r3, #2
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4013      	ands	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a40      	ldr	r2, [pc, #256]	@ (80032f0 <HAL_GPIO_Init+0x2c0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <HAL_GPIO_Init+0x1ec>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a3f      	ldr	r2, [pc, #252]	@ (80032f4 <HAL_GPIO_Init+0x2c4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00d      	beq.n	8003218 <HAL_GPIO_Init+0x1e8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3e      	ldr	r2, [pc, #248]	@ (80032f8 <HAL_GPIO_Init+0x2c8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <HAL_GPIO_Init+0x1e4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3d      	ldr	r2, [pc, #244]	@ (80032fc <HAL_GPIO_Init+0x2cc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_GPIO_Init+0x1e0>
 800320c:	2303      	movs	r3, #3
 800320e:	e006      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003210:	2304      	movs	r3, #4
 8003212:	e004      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003214:	2302      	movs	r3, #2
 8003216:	e002      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 800321c:	2300      	movs	r3, #0
 800321e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003220:	f002 0203 	and.w	r2, r2, #3
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	4093      	lsls	r3, r2
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800322e:	492f      	ldr	r1, [pc, #188]	@ (80032ec <HAL_GPIO_Init+0x2bc>)
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003248:	4b2d      	ldr	r3, [pc, #180]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	492c      	ldr	r1, [pc, #176]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003256:	4b2a      	ldr	r3, [pc, #168]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	43db      	mvns	r3, r3
 800325e:	4928      	ldr	r1, [pc, #160]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 8003260:	4013      	ands	r3, r2
 8003262:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003270:	4b23      	ldr	r3, [pc, #140]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	4922      	ldr	r1, [pc, #136]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	60cb      	str	r3, [r1, #12]
 800327c:	e006      	b.n	800328c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800327e:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	43db      	mvns	r3, r3
 8003286:	491e      	ldr	r1, [pc, #120]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 8003288:	4013      	ands	r3, r2
 800328a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003298:	4b19      	ldr	r3, [pc, #100]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	4918      	ldr	r1, [pc, #96]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032a6:	4b16      	ldr	r3, [pc, #88]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4914      	ldr	r1, [pc, #80]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d021      	beq.n	8003304 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	490e      	ldr	r1, [pc, #56]	@ (8003300 <HAL_GPIO_Init+0x2d0>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e021      	b.n	8003312 <HAL_GPIO_Init+0x2e2>
 80032ce:	bf00      	nop
 80032d0:	10320000 	.word	0x10320000
 80032d4:	10310000 	.word	0x10310000
 80032d8:	10220000 	.word	0x10220000
 80032dc:	10210000 	.word	0x10210000
 80032e0:	10120000 	.word	0x10120000
 80032e4:	10110000 	.word	0x10110000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40010800 	.word	0x40010800
 80032f4:	40010c00 	.word	0x40010c00
 80032f8:	40011000 	.word	0x40011000
 80032fc:	40011400 	.word	0x40011400
 8003300:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_GPIO_Init+0x304>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	43db      	mvns	r3, r3
 800330c:	4909      	ldr	r1, [pc, #36]	@ (8003334 <HAL_GPIO_Init+0x304>)
 800330e:	4013      	ands	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003314:	3301      	adds	r3, #1
 8003316:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	fa22 f303 	lsr.w	r3, r2, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	f47f ae8e 	bne.w	8003044 <HAL_GPIO_Init+0x14>
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	372c      	adds	r7, #44	@ 0x2c
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	041a      	lsls	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	43d9      	mvns	r1, r3
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	400b      	ands	r3, r1
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	611a      	str	r2, [r3, #16]
}
 8003390:	bf00      	nop
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
	...

0800339c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e12b      	b.n	8003606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fdb4 	bl	8000f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2224      	movs	r2, #36	@ 0x24
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003400:	f001 fbca 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4a81      	ldr	r2, [pc, #516]	@ (8003610 <HAL_I2C_Init+0x274>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d807      	bhi.n	8003420 <HAL_I2C_Init+0x84>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4a80      	ldr	r2, [pc, #512]	@ (8003614 <HAL_I2C_Init+0x278>)
 8003414:	4293      	cmp	r3, r2
 8003416:	bf94      	ite	ls
 8003418:	2301      	movls	r3, #1
 800341a:	2300      	movhi	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e006      	b.n	800342e <HAL_I2C_Init+0x92>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a7d      	ldr	r2, [pc, #500]	@ (8003618 <HAL_I2C_Init+0x27c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	bf94      	ite	ls
 8003428:	2301      	movls	r3, #1
 800342a:	2300      	movhi	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0e7      	b.n	8003606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a78      	ldr	r2, [pc, #480]	@ (800361c <HAL_I2C_Init+0x280>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	0c9b      	lsrs	r3, r3, #18
 8003440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a6a      	ldr	r2, [pc, #424]	@ (8003610 <HAL_I2C_Init+0x274>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d802      	bhi.n	8003470 <HAL_I2C_Init+0xd4>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3301      	adds	r3, #1
 800346e:	e009      	b.n	8003484 <HAL_I2C_Init+0xe8>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	4a69      	ldr	r2, [pc, #420]	@ (8003620 <HAL_I2C_Init+0x284>)
 800347c:	fba2 2303 	umull	r2, r3, r2, r3
 8003480:	099b      	lsrs	r3, r3, #6
 8003482:	3301      	adds	r3, #1
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	430b      	orrs	r3, r1
 800348a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003496:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	495c      	ldr	r1, [pc, #368]	@ (8003610 <HAL_I2C_Init+0x274>)
 80034a0:	428b      	cmp	r3, r1
 80034a2:	d819      	bhi.n	80034d8 <HAL_I2C_Init+0x13c>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1e59      	subs	r1, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b2:	1c59      	adds	r1, r3, #1
 80034b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80034b8:	400b      	ands	r3, r1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_I2C_Init+0x138>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1e59      	subs	r1, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80034cc:	3301      	adds	r3, #1
 80034ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d2:	e051      	b.n	8003578 <HAL_I2C_Init+0x1dc>
 80034d4:	2304      	movs	r3, #4
 80034d6:	e04f      	b.n	8003578 <HAL_I2C_Init+0x1dc>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d111      	bne.n	8003504 <HAL_I2C_Init+0x168>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e58      	subs	r0, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	440b      	add	r3, r1
 80034ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f2:	3301      	adds	r3, #1
 80034f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	e012      	b.n	800352a <HAL_I2C_Init+0x18e>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	0099      	lsls	r1, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	fbb0 f3f3 	udiv	r3, r0, r3
 800351a:	3301      	adds	r3, #1
 800351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003520:	2b00      	cmp	r3, #0
 8003522:	bf0c      	ite	eq
 8003524:	2301      	moveq	r3, #1
 8003526:	2300      	movne	r3, #0
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_I2C_Init+0x196>
 800352e:	2301      	movs	r3, #1
 8003530:	e022      	b.n	8003578 <HAL_I2C_Init+0x1dc>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10e      	bne.n	8003558 <HAL_I2C_Init+0x1bc>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1e58      	subs	r0, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6859      	ldr	r1, [r3, #4]
 8003542:	460b      	mov	r3, r1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	440b      	add	r3, r1
 8003548:	fbb0 f3f3 	udiv	r3, r0, r3
 800354c:	3301      	adds	r3, #1
 800354e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003556:	e00f      	b.n	8003578 <HAL_I2C_Init+0x1dc>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1e58      	subs	r0, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6859      	ldr	r1, [r3, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	0099      	lsls	r1, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	fbb0 f3f3 	udiv	r3, r0, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003574:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	6809      	ldr	r1, [r1, #0]
 800357c:	4313      	orrs	r3, r2
 800357e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69da      	ldr	r2, [r3, #28]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80035a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6911      	ldr	r1, [r2, #16]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68d2      	ldr	r2, [r2, #12]
 80035b2:	4311      	orrs	r1, r2
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695a      	ldr	r2, [r3, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	000186a0 	.word	0x000186a0
 8003614:	001e847f 	.word	0x001e847f
 8003618:	003d08ff 	.word	0x003d08ff
 800361c:	431bde83 	.word	0x431bde83
 8003620:	10624dd3 	.word	0x10624dd3

08003624 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	607a      	str	r2, [r7, #4]
 800362e:	461a      	mov	r2, r3
 8003630:	460b      	mov	r3, r1
 8003632:	817b      	strh	r3, [r7, #10]
 8003634:	4613      	mov	r3, r2
 8003636:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003638:	f7fe ff90 	bl	800255c <HAL_GetTick>
 800363c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	f040 80e0 	bne.w	800380c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2319      	movs	r3, #25
 8003652:	2201      	movs	r2, #1
 8003654:	4970      	ldr	r1, [pc, #448]	@ (8003818 <HAL_I2C_Master_Transmit+0x1f4>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 fc9e 	bl	8003f98 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
 8003664:	e0d3      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_I2C_Master_Transmit+0x50>
 8003670:	2302      	movs	r3, #2
 8003672:	e0cc      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d007      	beq.n	800369a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2221      	movs	r2, #33	@ 0x21
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2210      	movs	r2, #16
 80036b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	893a      	ldrh	r2, [r7, #8]
 80036ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a50      	ldr	r2, [pc, #320]	@ (800381c <HAL_I2C_Master_Transmit+0x1f8>)
 80036da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036dc:	8979      	ldrh	r1, [r7, #10]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fb08 	bl	8003cf8 <I2C_MasterRequestWrite>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e08d      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003708:	e066      	b.n	80037d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	6a39      	ldr	r1, [r7, #32]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fd5c 	bl	80041cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00d      	beq.n	8003736 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	2b04      	cmp	r3, #4
 8003720:	d107      	bne.n	8003732 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06b      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b04      	cmp	r3, #4
 8003772:	d11b      	bne.n	80037ac <HAL_I2C_Master_Transmit+0x188>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003778:	2b00      	cmp	r3, #0
 800377a:	d017      	beq.n	80037ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	781a      	ldrb	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	6a39      	ldr	r1, [r7, #32]
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fd53 	bl	800425c <I2C_WaitOnBTFFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00d      	beq.n	80037d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d107      	bne.n	80037d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e01a      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d194      	bne.n	800370a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	00100002 	.word	0x00100002
 800381c:	ffff0000 	.word	0xffff0000

08003820 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08c      	sub	sp, #48	@ 0x30
 8003824:	af02      	add	r7, sp, #8
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	461a      	mov	r2, r3
 800382c:	460b      	mov	r3, r1
 800382e:	817b      	strh	r3, [r7, #10]
 8003830:	4613      	mov	r3, r2
 8003832:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003838:	f7fe fe90 	bl	800255c <HAL_GetTick>
 800383c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	f040 824b 	bne.w	8003ce2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	2319      	movs	r3, #25
 8003852:	2201      	movs	r2, #1
 8003854:	497f      	ldr	r1, [pc, #508]	@ (8003a54 <HAL_I2C_Master_Receive+0x234>)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fb9e 	bl	8003f98 <I2C_WaitOnFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003862:	2302      	movs	r3, #2
 8003864:	e23e      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_I2C_Master_Receive+0x54>
 8003870:	2302      	movs	r3, #2
 8003872:	e237      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d007      	beq.n	800389a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0201 	orr.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2222      	movs	r2, #34	@ 0x22
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2210      	movs	r2, #16
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	893a      	ldrh	r2, [r7, #8]
 80038ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4a5f      	ldr	r2, [pc, #380]	@ (8003a58 <HAL_I2C_Master_Receive+0x238>)
 80038da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038dc:	8979      	ldrh	r1, [r7, #10]
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fa8a 	bl	8003dfc <I2C_MasterRequestRead>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e1f8      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d113      	bne.n	8003922 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e1cc      	b.n	8003cbc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003926:	2b01      	cmp	r3, #1
 8003928:	d11e      	bne.n	8003968 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003938:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800393a:	b672      	cpsid	i
}
 800393c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003962:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003964:	b662      	cpsie	i
}
 8003966:	e035      	b.n	80039d4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800396c:	2b02      	cmp	r3, #2
 800396e:	d11e      	bne.n	80039ae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800397e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003980:	b672      	cpsid	i
}
 8003982:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003984:	2300      	movs	r3, #0
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039aa:	b662      	cpsie	i
}
 80039ac:	e012      	b.n	80039d4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039d4:	e172      	b.n	8003cbc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039da:	2b03      	cmp	r3, #3
 80039dc:	f200 811f 	bhi.w	8003c1e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d123      	bne.n	8003a30 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fc7d 	bl	80042ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e173      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691a      	ldr	r2, [r3, #16]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a2e:	e145      	b.n	8003cbc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d152      	bne.n	8003ade <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3e:	2200      	movs	r2, #0
 8003a40:	4906      	ldr	r1, [pc, #24]	@ (8003a5c <HAL_I2C_Master_Receive+0x23c>)
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 faa8 	bl	8003f98 <I2C_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e148      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
 8003a52:	bf00      	nop
 8003a54:	00100002 	.word	0x00100002
 8003a58:	ffff0000 	.word	0xffff0000
 8003a5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a60:	b672      	cpsid	i
}
 8003a62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003aa6:	b662      	cpsie	i
}
 8003aa8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abc:	1c5a      	adds	r2, r3, #1
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003adc:	e0ee      	b.n	8003cbc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	4981      	ldr	r1, [pc, #516]	@ (8003cec <HAL_I2C_Master_Receive+0x4cc>)
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fa55 	bl	8003f98 <I2C_WaitOnFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0f5      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b08:	b672      	cpsid	i
}
 8003b0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf0 <HAL_I2C_Master_Receive+0x4d0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	08db      	lsrs	r3, r3, #3
 8003b44:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf4 <HAL_I2C_Master_Receive+0x4d4>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0a1a      	lsrs	r2, r3, #8
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	00da      	lsls	r2, r3, #3
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d118      	bne.n	8003b96 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	f043 0220 	orr.w	r2, r3, #32
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b86:	b662      	cpsie	i
}
 8003b88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0a6      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d1d9      	bne.n	8003b58 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	691a      	ldr	r2, [r3, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003be6:	b662      	cpsie	i
}
 8003be8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c1c:	e04e      	b.n	8003cbc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c20:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fb62 	bl	80042ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e058      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d124      	bne.n	8003cbc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d107      	bne.n	8003c8a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c88:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691a      	ldr	r2, [r3, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f ae88 	bne.w	80039d6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3728      	adds	r7, #40	@ 0x28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	00010004 	.word	0x00010004
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	14f8b589 	.word	0x14f8b589

08003cf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	607a      	str	r2, [r7, #4]
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	460b      	mov	r3, r1
 8003d06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b08      	cmp	r3, #8
 8003d12:	d006      	beq.n	8003d22 <I2C_MasterRequestWrite+0x2a>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d003      	beq.n	8003d22 <I2C_MasterRequestWrite+0x2a>
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d20:	d108      	bne.n	8003d34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e00b      	b.n	8003d4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	2b12      	cmp	r3, #18
 8003d3a:	d107      	bne.n	8003d4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f91d 	bl	8003f98 <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00d      	beq.n	8003d80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d72:	d103      	bne.n	8003d7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e035      	b.n	8003dec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d88:	d108      	bne.n	8003d9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8a:	897b      	ldrh	r3, [r7, #10]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d98:	611a      	str	r2, [r3, #16]
 8003d9a:	e01b      	b.n	8003dd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d9c:	897b      	ldrh	r3, [r7, #10]
 8003d9e:	11db      	asrs	r3, r3, #7
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	f003 0306 	and.w	r3, r3, #6
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f063 030f 	orn	r3, r3, #15
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	490e      	ldr	r1, [pc, #56]	@ (8003df4 <I2C_MasterRequestWrite+0xfc>)
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f966 	bl	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e010      	b.n	8003dec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dca:	897b      	ldrh	r3, [r7, #10]
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4907      	ldr	r1, [pc, #28]	@ (8003df8 <I2C_MasterRequestWrite+0x100>)
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f956 	bl	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	00010008 	.word	0x00010008
 8003df8:	00010002 	.word	0x00010002

08003dfc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d006      	beq.n	8003e36 <I2C_MasterRequestRead+0x3a>
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d003      	beq.n	8003e36 <I2C_MasterRequestRead+0x3a>
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e34:	d108      	bne.n	8003e48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e00b      	b.n	8003e60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4c:	2b11      	cmp	r3, #17
 8003e4e:	d107      	bne.n	8003e60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 f893 	bl	8003f98 <I2C_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00d      	beq.n	8003e94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e86:	d103      	bne.n	8003e90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e079      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e9c:	d108      	bne.n	8003eb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e9e:	897b      	ldrh	r3, [r7, #10]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	611a      	str	r2, [r3, #16]
 8003eae:	e05f      	b.n	8003f70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003eb0:	897b      	ldrh	r3, [r7, #10]
 8003eb2:	11db      	asrs	r3, r3, #7
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f003 0306 	and.w	r3, r3, #6
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	f063 030f 	orn	r3, r3, #15
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4930      	ldr	r1, [pc, #192]	@ (8003f90 <I2C_MasterRequestRead+0x194>)
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8dc 	bl	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e054      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003ede:	897b      	ldrh	r3, [r7, #10]
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4929      	ldr	r1, [pc, #164]	@ (8003f94 <I2C_MasterRequestRead+0x198>)
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f8cc 	bl	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e044      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f831 	bl	8003f98 <I2C_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f4a:	d103      	bne.n	8003f54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e017      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003f58:	897b      	ldrh	r3, [r7, #10]
 8003f5a:	11db      	asrs	r3, r3, #7
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f063 030e 	orn	r3, r3, #14
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4907      	ldr	r1, [pc, #28]	@ (8003f94 <I2C_MasterRequestRead+0x198>)
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f888 	bl	800408c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	00010008 	.word	0x00010008
 8003f94:	00010002 	.word	0x00010002

08003f98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fa8:	e048      	b.n	800403c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d044      	beq.n	800403c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb2:	f7fe fad3 	bl	800255c <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d139      	bne.n	800403c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d10d      	bne.n	8003fee <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	43da      	mvns	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	e00c      	b.n	8004008 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	79fb      	ldrb	r3, [r7, #7]
 800400a:	429a      	cmp	r2, r3
 800400c:	d116      	bne.n	800403c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	f043 0220 	orr.w	r2, r3, #32
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e023      	b.n	8004084 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	0c1b      	lsrs	r3, r3, #16
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	d10d      	bne.n	8004062 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	43da      	mvns	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	e00c      	b.n	800407c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	43da      	mvns	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4013      	ands	r3, r2
 800406e:	b29b      	uxth	r3, r3
 8004070:	2b00      	cmp	r3, #0
 8004072:	bf0c      	ite	eq
 8004074:	2301      	moveq	r3, #1
 8004076:	2300      	movne	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	429a      	cmp	r2, r3
 8004080:	d093      	beq.n	8003faa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800409a:	e071      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040aa:	d123      	bne.n	80040f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	f043 0204 	orr.w	r2, r3, #4
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e067      	b.n	80041c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fa:	d041      	beq.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fc:	f7fe fa2e 	bl	800255c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	429a      	cmp	r2, r3
 800410a:	d302      	bcc.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d136      	bne.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10c      	bne.n	8004136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e00b      	b.n	800414e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	43da      	mvns	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	f043 0220 	orr.w	r2, r3, #32
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e021      	b.n	80041c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	0c1b      	lsrs	r3, r3, #16
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d10c      	bne.n	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	43da      	mvns	r2, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	4013      	ands	r3, r2
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf14      	ite	ne
 800419c:	2301      	movne	r3, #1
 800419e:	2300      	moveq	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	e00b      	b.n	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	43da      	mvns	r2, r3
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4013      	ands	r3, r2
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f af6d 	bne.w	800409c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041d8:	e034      	b.n	8004244 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f8e3 	bl	80043a6 <I2C_IsAcknowledgeFailed>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e034      	b.n	8004254 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d028      	beq.n	8004244 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fe f9b3 	bl	800255c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d11d      	bne.n	8004244 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004212:	2b80      	cmp	r3, #128	@ 0x80
 8004214:	d016      	beq.n	8004244 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	f043 0220 	orr.w	r2, r3, #32
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e007      	b.n	8004254 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424e:	2b80      	cmp	r3, #128	@ 0x80
 8004250:	d1c3      	bne.n	80041da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004268:	e034      	b.n	80042d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f89b 	bl	80043a6 <I2C_IsAcknowledgeFailed>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e034      	b.n	80042e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d028      	beq.n	80042d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fe f96b 	bl	800255c <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d11d      	bne.n	80042d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d016      	beq.n	80042d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	f043 0220 	orr.w	r2, r3, #32
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e007      	b.n	80042e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d1c3      	bne.n	800426a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042f8:	e049      	b.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b10      	cmp	r3, #16
 8004306:	d119      	bne.n	800433c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0210 	mvn.w	r2, #16
 8004310:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e030      	b.n	800439e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433c:	f7fe f90e 	bl	800255c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	429a      	cmp	r2, r3
 800434a:	d302      	bcc.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d11d      	bne.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d016      	beq.n	800438e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e007      	b.n	800439e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b40      	cmp	r3, #64	@ 0x40
 800439a:	d1ae      	bne.n	80042fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043bc:	d11b      	bne.n	80043f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	f043 0204 	orr.w	r2, r3, #4
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr
	...

08004404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e272      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	f000 8087 	beq.w	8004532 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004424:	4b92      	ldr	r3, [pc, #584]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f003 030c 	and.w	r3, r3, #12
 800442c:	2b04      	cmp	r3, #4
 800442e:	d00c      	beq.n	800444a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004430:	4b8f      	ldr	r3, [pc, #572]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b08      	cmp	r3, #8
 800443a:	d112      	bne.n	8004462 <HAL_RCC_OscConfig+0x5e>
 800443c:	4b8c      	ldr	r3, [pc, #560]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004448:	d10b      	bne.n	8004462 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444a:	4b89      	ldr	r3, [pc, #548]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d06c      	beq.n	8004530 <HAL_RCC_OscConfig+0x12c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d168      	bne.n	8004530 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e24c      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x76>
 800446c:	4b80      	ldr	r3, [pc, #512]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a7f      	ldr	r2, [pc, #508]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	e02e      	b.n	80044d8 <HAL_RCC_OscConfig+0xd4>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0x98>
 8004482:	4b7b      	ldr	r3, [pc, #492]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a7a      	ldr	r2, [pc, #488]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	4b78      	ldr	r3, [pc, #480]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a77      	ldr	r2, [pc, #476]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004494:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	e01d      	b.n	80044d8 <HAL_RCC_OscConfig+0xd4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0xbc>
 80044a6:	4b72      	ldr	r3, [pc, #456]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a71      	ldr	r2, [pc, #452]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e00b      	b.n	80044d8 <HAL_RCC_OscConfig+0xd4>
 80044c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b68      	ldr	r3, [pc, #416]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a67      	ldr	r2, [pc, #412]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d013      	beq.n	8004508 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fe f83c 	bl	800255c <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fe f838 	bl	800255c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	@ 0x64
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e200      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f0      	beq.n	80044e8 <HAL_RCC_OscConfig+0xe4>
 8004506:	e014      	b.n	8004532 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004508:	f7fe f828 	bl	800255c <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004510:	f7fe f824 	bl	800255c <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b64      	cmp	r3, #100	@ 0x64
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e1ec      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004522:	4b53      	ldr	r3, [pc, #332]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x10c>
 800452e:	e000      	b.n	8004532 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d063      	beq.n	8004606 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800453e:	4b4c      	ldr	r3, [pc, #304]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00b      	beq.n	8004562 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800454a:	4b49      	ldr	r3, [pc, #292]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f003 030c 	and.w	r3, r3, #12
 8004552:	2b08      	cmp	r3, #8
 8004554:	d11c      	bne.n	8004590 <HAL_RCC_OscConfig+0x18c>
 8004556:	4b46      	ldr	r3, [pc, #280]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d116      	bne.n	8004590 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004562:	4b43      	ldr	r3, [pc, #268]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_RCC_OscConfig+0x176>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e1c0      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457a:	4b3d      	ldr	r3, [pc, #244]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	4939      	ldr	r1, [pc, #228]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 800458a:	4313      	orrs	r3, r2
 800458c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800458e:	e03a      	b.n	8004606 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d020      	beq.n	80045da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004598:	4b36      	ldr	r3, [pc, #216]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 800459a:	2201      	movs	r2, #1
 800459c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fd ffdd 	bl	800255c <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a6:	f7fd ffd9 	bl	800255c <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e1a1      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4927      	ldr	r1, [pc, #156]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]
 80045d8:	e015      	b.n	8004606 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045da:	4b26      	ldr	r3, [pc, #152]	@ (8004674 <HAL_RCC_OscConfig+0x270>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fd ffbc 	bl	800255c <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e8:	f7fd ffb8 	bl	800255c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e180      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d03a      	beq.n	8004688 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d019      	beq.n	800464e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461a:	4b17      	ldr	r3, [pc, #92]	@ (8004678 <HAL_RCC_OscConfig+0x274>)
 800461c:	2201      	movs	r2, #1
 800461e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004620:	f7fd ff9c 	bl	800255c <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004628:	f7fd ff98 	bl	800255c <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e160      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463a:	4b0d      	ldr	r3, [pc, #52]	@ (8004670 <HAL_RCC_OscConfig+0x26c>)
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004646:	2001      	movs	r0, #1
 8004648:	f000 face 	bl	8004be8 <RCC_Delay>
 800464c:	e01c      	b.n	8004688 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464e:	4b0a      	ldr	r3, [pc, #40]	@ (8004678 <HAL_RCC_OscConfig+0x274>)
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004654:	f7fd ff82 	bl	800255c <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465a:	e00f      	b.n	800467c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465c:	f7fd ff7e 	bl	800255c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d908      	bls.n	800467c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e146      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
 8004674:	42420000 	.word	0x42420000
 8004678:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	4b92      	ldr	r3, [pc, #584]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e9      	bne.n	800465c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80a6 	beq.w	80047e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004696:	2300      	movs	r3, #0
 8004698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469a:	4b8b      	ldr	r3, [pc, #556]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10d      	bne.n	80046c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a6:	4b88      	ldr	r3, [pc, #544]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	4a87      	ldr	r2, [pc, #540]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b0:	61d3      	str	r3, [r2, #28]
 80046b2:	4b85      	ldr	r3, [pc, #532]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c2:	4b82      	ldr	r3, [pc, #520]	@ (80048cc <HAL_RCC_OscConfig+0x4c8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d118      	bne.n	8004700 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ce:	4b7f      	ldr	r3, [pc, #508]	@ (80048cc <HAL_RCC_OscConfig+0x4c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a7e      	ldr	r2, [pc, #504]	@ (80048cc <HAL_RCC_OscConfig+0x4c8>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046da:	f7fd ff3f 	bl	800255c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fd ff3b 	bl	800255c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b64      	cmp	r3, #100	@ 0x64
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e103      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	4b75      	ldr	r3, [pc, #468]	@ (80048cc <HAL_RCC_OscConfig+0x4c8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x312>
 8004708:	4b6f      	ldr	r3, [pc, #444]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	4a6e      	ldr	r2, [pc, #440]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6213      	str	r3, [r2, #32]
 8004714:	e02d      	b.n	8004772 <HAL_RCC_OscConfig+0x36e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x334>
 800471e:	4b6a      	ldr	r3, [pc, #424]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	4a69      	ldr	r2, [pc, #420]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	6213      	str	r3, [r2, #32]
 800472a:	4b67      	ldr	r3, [pc, #412]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	4a66      	ldr	r2, [pc, #408]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	f023 0304 	bic.w	r3, r3, #4
 8004734:	6213      	str	r3, [r2, #32]
 8004736:	e01c      	b.n	8004772 <HAL_RCC_OscConfig+0x36e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	2b05      	cmp	r3, #5
 800473e:	d10c      	bne.n	800475a <HAL_RCC_OscConfig+0x356>
 8004740:	4b61      	ldr	r3, [pc, #388]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	4a60      	ldr	r2, [pc, #384]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	6213      	str	r3, [r2, #32]
 800474c:	4b5e      	ldr	r3, [pc, #376]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	4a5d      	ldr	r2, [pc, #372]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	6213      	str	r3, [r2, #32]
 8004758:	e00b      	b.n	8004772 <HAL_RCC_OscConfig+0x36e>
 800475a:	4b5b      	ldr	r3, [pc, #364]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	4a5a      	ldr	r2, [pc, #360]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	6213      	str	r3, [r2, #32]
 8004766:	4b58      	ldr	r3, [pc, #352]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	4a57      	ldr	r2, [pc, #348]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800476c:	f023 0304 	bic.w	r3, r3, #4
 8004770:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d015      	beq.n	80047a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800477a:	f7fd feef 	bl	800255c <HAL_GetTick>
 800477e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004782:	f7fd feeb 	bl	800255c <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004790:	4293      	cmp	r3, r2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e0b1      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004798:	4b4b      	ldr	r3, [pc, #300]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ee      	beq.n	8004782 <HAL_RCC_OscConfig+0x37e>
 80047a4:	e014      	b.n	80047d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a6:	f7fd fed9 	bl	800255c <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ac:	e00a      	b.n	80047c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ae:	f7fd fed5 	bl	800255c <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047bc:	4293      	cmp	r3, r2
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e09b      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c4:	4b40      	ldr	r3, [pc, #256]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1ee      	bne.n	80047ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d105      	bne.n	80047e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d6:	4b3c      	ldr	r3, [pc, #240]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	4a3b      	ldr	r2, [pc, #236]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 80047dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8087 	beq.w	80048fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ec:	4b36      	ldr	r3, [pc, #216]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d061      	beq.n	80048bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d146      	bne.n	800488e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004800:	4b33      	ldr	r3, [pc, #204]	@ (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004806:	f7fd fea9 	bl	800255c <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480e:	f7fd fea5 	bl	800255c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e06d      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004820:	4b29      	ldr	r3, [pc, #164]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f0      	bne.n	800480e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004834:	d108      	bne.n	8004848 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004836:	4b24      	ldr	r3, [pc, #144]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	4921      	ldr	r1, [pc, #132]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	4313      	orrs	r3, r2
 8004846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004848:	4b1f      	ldr	r3, [pc, #124]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a19      	ldr	r1, [r3, #32]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	430b      	orrs	r3, r1
 800485a:	491b      	ldr	r1, [pc, #108]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 800485c:	4313      	orrs	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004860:	4b1b      	ldr	r3, [pc, #108]	@ (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004866:	f7fd fe79 	bl	800255c <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486e:	f7fd fe75 	bl	800255c <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e03d      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0f0      	beq.n	800486e <HAL_RCC_OscConfig+0x46a>
 800488c:	e035      	b.n	80048fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b10      	ldr	r3, [pc, #64]	@ (80048d0 <HAL_RCC_OscConfig+0x4cc>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fd fe62 	bl	800255c <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fd fe5e 	bl	800255c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e026      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ae:	4b06      	ldr	r3, [pc, #24]	@ (80048c8 <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x498>
 80048ba:	e01e      	b.n	80048fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e019      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40007000 	.word	0x40007000
 80048d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004904 <HAL_RCC_OscConfig+0x500>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d106      	bne.n	80048f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d001      	beq.n	80048fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40021000 	.word	0x40021000

08004908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0d0      	b.n	8004abe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800491c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d910      	bls.n	800494c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b67      	ldr	r3, [pc, #412]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f023 0207 	bic.w	r2, r3, #7
 8004932:	4965      	ldr	r1, [pc, #404]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4313      	orrs	r3, r2
 8004938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493a:	4b63      	ldr	r3, [pc, #396]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0b8      	b.n	8004abe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d020      	beq.n	800499a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004964:	4b59      	ldr	r3, [pc, #356]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a58      	ldr	r2, [pc, #352]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 800496a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800496e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800497c:	4b53      	ldr	r3, [pc, #332]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a52      	ldr	r2, [pc, #328]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004982:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004986:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4b50      	ldr	r3, [pc, #320]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	494d      	ldr	r1, [pc, #308]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d040      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ae:	4b47      	ldr	r3, [pc, #284]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d115      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e07f      	b.n	8004abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	4b41      	ldr	r3, [pc, #260]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e073      	b.n	8004abe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d6:	4b3d      	ldr	r3, [pc, #244]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e06b      	b.n	8004abe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e6:	4b39      	ldr	r3, [pc, #228]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4936      	ldr	r1, [pc, #216]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f8:	f7fd fdb0 	bl	800255c <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a00:	f7fd fdac 	bl	800255c <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e053      	b.n	8004abe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	4b2d      	ldr	r3, [pc, #180]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f003 020c 	and.w	r2, r3, #12
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d1eb      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a28:	4b27      	ldr	r3, [pc, #156]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d210      	bcs.n	8004a58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b24      	ldr	r3, [pc, #144]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 0207 	bic.w	r2, r3, #7
 8004a3e:	4922      	ldr	r1, [pc, #136]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a46:	4b20      	ldr	r3, [pc, #128]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d001      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e032      	b.n	8004abe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a64:	4b19      	ldr	r3, [pc, #100]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4916      	ldr	r1, [pc, #88]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a82:	4b12      	ldr	r3, [pc, #72]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	490e      	ldr	r1, [pc, #56]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a96:	f000 f821 	bl	8004adc <HAL_RCC_GetSysClockFreq>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	091b      	lsrs	r3, r3, #4
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	490a      	ldr	r1, [pc, #40]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa8:	5ccb      	ldrb	r3, [r1, r3]
 8004aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004aae:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1cc>)
 8004ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ab2:	4b09      	ldr	r3, [pc, #36]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1d0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fd fd0e 	bl	80024d8 <HAL_InitTick>

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40022000 	.word	0x40022000
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	08006e1c 	.word	0x08006e1c
 8004ad4:	20000000 	.word	0x20000000
 8004ad8:	20000004 	.word	0x20000004

08004adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004af2:	2300      	movs	r3, #0
 8004af4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004af6:	4b1e      	ldr	r3, [pc, #120]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f003 030c 	and.w	r3, r3, #12
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d002      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x30>
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x36>
 8004b0a:	e027      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b0c:	4b19      	ldr	r3, [pc, #100]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b0e:	613b      	str	r3, [r7, #16]
      break;
 8004b10:	e027      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0c9b      	lsrs	r3, r3, #18
 8004b16:	f003 030f 	and.w	r3, r3, #15
 8004b1a:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004b1c:	5cd3      	ldrb	r3, [r2, r3]
 8004b1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d010      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b2a:	4b11      	ldr	r3, [pc, #68]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x94>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	0c5b      	lsrs	r3, r3, #17
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	4a11      	ldr	r2, [pc, #68]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004b36:	5cd3      	ldrb	r3, [r2, r3]
 8004b38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b3e:	fb03 f202 	mul.w	r2, r3, r2
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e004      	b.n	8004b56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a0c      	ldr	r2, [pc, #48]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004b50:	fb02 f303 	mul.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	613b      	str	r3, [r7, #16]
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x98>)
 8004b5e:	613b      	str	r3, [r7, #16]
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	693b      	ldr	r3, [r7, #16]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bc80      	pop	{r7}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000
 8004b74:	007a1200 	.word	0x007a1200
 8004b78:	08006e34 	.word	0x08006e34
 8004b7c:	08006e44 	.word	0x08006e44
 8004b80:	003d0900 	.word	0x003d0900

08004b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b84:	b480      	push	{r7}
 8004b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b88:	4b02      	ldr	r3, [pc, #8]	@ (8004b94 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr
 8004b94:	20000000 	.word	0x20000000

08004b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b9c:	f7ff fff2 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4903      	ldr	r1, [pc, #12]	@ (8004bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	08006e2c 	.word	0x08006e2c

08004bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bc4:	f7ff ffde 	bl	8004b84 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	0adb      	lsrs	r3, r3, #11
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4903      	ldr	r1, [pc, #12]	@ (8004be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40021000 	.word	0x40021000
 8004be4:	08006e2c 	.word	0x08006e2c

08004be8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8004c1c <RCC_Delay+0x34>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8004c20 <RCC_Delay+0x38>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0a5b      	lsrs	r3, r3, #9
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c04:	bf00      	nop
  }
  while (Delay --);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1e5a      	subs	r2, r3, #1
 8004c0a:	60fa      	str	r2, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f9      	bne.n	8004c04 <RCC_Delay+0x1c>
}
 8004c10:	bf00      	nop
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	20000000 	.word	0x20000000
 8004c20:	10624dd3 	.word	0x10624dd3

08004c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d07d      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004c40:	2300      	movs	r3, #0
 8004c42:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c44:	4b4f      	ldr	r3, [pc, #316]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10d      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c50:	4b4c      	ldr	r3, [pc, #304]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4a4b      	ldr	r2, [pc, #300]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	61d3      	str	r3, [r2, #28]
 8004c5c:	4b49      	ldr	r3, [pc, #292]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c64:	60bb      	str	r3, [r7, #8]
 8004c66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	4b46      	ldr	r3, [pc, #280]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d118      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c78:	4b43      	ldr	r3, [pc, #268]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a42      	ldr	r2, [pc, #264]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c84:	f7fd fc6a 	bl	800255c <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8a:	e008      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8c:	f7fd fc66 	bl	800255c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	@ 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e06d      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f0      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004caa:	4b36      	ldr	r3, [pc, #216]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d02e      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d027      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cd0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cd8:	4b2c      	ldr	r3, [pc, #176]	@ (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cde:	4a29      	ldr	r2, [pc, #164]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0301 	and.w	r3, r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d014      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fd fc35 	bl	800255c <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cf6:	f7fd fc31 	bl	800255c <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e036      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0ee      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d18:	4b1a      	ldr	r3, [pc, #104]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4917      	ldr	r1, [pc, #92]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d30:	4b14      	ldr	r3, [pc, #80]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d32:	69db      	ldr	r3, [r3, #28]
 8004d34:	4a13      	ldr	r2, [pc, #76]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d48:	4b0e      	ldr	r3, [pc, #56]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	490b      	ldr	r1, [pc, #44]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d008      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d66:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	4904      	ldr	r1, [pc, #16]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40007000 	.word	0x40007000
 8004d8c:	42420440 	.word	0x42420440

08004d90 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	2300      	movs	r3, #0
 8004da2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d00a      	beq.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	f200 808a 	bhi.w	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d045      	beq.n	8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d075      	beq.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004dc6:	e082      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004dc8:	4b46      	ldr	r3, [pc, #280]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004dce:	4b45      	ldr	r3, [pc, #276]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d07b      	beq.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	0c9b      	lsrs	r3, r3, #18
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	4a41      	ldr	r2, [pc, #260]	@ (8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004de4:	5cd3      	ldrb	r3, [r2, r3]
 8004de6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d015      	beq.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004df2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	0c5b      	lsrs	r3, r3, #17
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004dfe:	5cd3      	ldrb	r3, [r2, r3]
 8004e00:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00d      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004e0c:	4a38      	ldr	r2, [pc, #224]	@ (8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	fb02 f303 	mul.w	r3, r2, r3
 8004e1a:	61fb      	str	r3, [r7, #28]
 8004e1c:	e004      	b.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4a34      	ldr	r2, [pc, #208]	@ (8004ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004e22:	fb02 f303 	mul.w	r3, r2, r3
 8004e26:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004e28:	4b2e      	ldr	r3, [pc, #184]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e34:	d102      	bne.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	61bb      	str	r3, [r7, #24]
      break;
 8004e3a:	e04a      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	61bb      	str	r3, [r7, #24]
      break;
 8004e4a:	e042      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004e4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5c:	d108      	bne.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004e68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e6c:	61bb      	str	r3, [r7, #24]
 8004e6e:	e01f      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004e7c:	4b19      	ldr	r3, [pc, #100]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004e88:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	e00f      	b.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e9a:	d11c      	bne.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004e9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d016      	beq.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004ea8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004eac:	61bb      	str	r3, [r7, #24]
      break;
 8004eae:	e012      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004eb0:	e011      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004eb2:	f7ff fe85 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	0b9b      	lsrs	r3, r3, #14
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	61bb      	str	r3, [r7, #24]
      break;
 8004ecc:	e004      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ece:	bf00      	nop
 8004ed0:	e002      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ed2:	bf00      	nop
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004ed6:	bf00      	nop
    }
  }
  return (frequency);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	08006e48 	.word	0x08006e48
 8004eec:	08006e58 	.word	0x08006e58
 8004ef0:	007a1200 	.word	0x007a1200
 8004ef4:	003d0900 	.word	0x003d0900
 8004ef8:	aaaaaaab 	.word	0xaaaaaaab

08004efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e041      	b.n	8004f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fd f970 	bl	8002208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f000 fab0 	bl	80054a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e041      	b.n	8005030 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f839 	bl	8005038 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f000 fa61 	bl	80054a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
	...

0800504c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <HAL_TIM_OC_Start+0x24>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	e022      	b.n	80050b6 <HAL_TIM_OC_Start+0x6a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b04      	cmp	r3, #4
 8005074:	d109      	bne.n	800508a <HAL_TIM_OC_Start+0x3e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b01      	cmp	r3, #1
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e015      	b.n	80050b6 <HAL_TIM_OC_Start+0x6a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d109      	bne.n	80050a4 <HAL_TIM_OC_Start+0x58>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b01      	cmp	r3, #1
 800509a:	bf14      	ite	ne
 800509c:	2301      	movne	r3, #1
 800509e:	2300      	moveq	r3, #0
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_OC_Start+0x6a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e05e      	b.n	800517c <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_OC_Start+0x82>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050cc:	e013      	b.n	80050f6 <HAL_TIM_OC_Start+0xaa>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d104      	bne.n	80050de <HAL_TIM_OC_Start+0x92>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050dc:	e00b      	b.n	80050f6 <HAL_TIM_OC_Start+0xaa>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_OC_Start+0xa2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050ec:	e003      	b.n	80050f6 <HAL_TIM_OC_Start+0xaa>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fc5a 	bl	80059b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1e      	ldr	r2, [pc, #120]	@ (8005184 <HAL_TIM_OC_Start+0x138>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d107      	bne.n	800511e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800511c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a18      	ldr	r2, [pc, #96]	@ (8005184 <HAL_TIM_OC_Start+0x138>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIM_OC_Start+0xfa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005130:	d009      	beq.n	8005146 <HAL_TIM_OC_Start+0xfa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a14      	ldr	r2, [pc, #80]	@ (8005188 <HAL_TIM_OC_Start+0x13c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIM_OC_Start+0xfa>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a12      	ldr	r2, [pc, #72]	@ (800518c <HAL_TIM_OC_Start+0x140>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d111      	bne.n	800516a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0307 	and.w	r3, r3, #7
 8005150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b06      	cmp	r3, #6
 8005156:	d010      	beq.n	800517a <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005168:	e007      	b.n	800517a <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800

08005190 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	6839      	ldr	r1, [r7, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fc08 	bl	80059b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a29      	ldr	r2, [pc, #164]	@ (8005254 <HAL_TIM_OC_Stop+0xc4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d117      	bne.n	80051e2 <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80051bc:	4013      	ands	r3, r2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <HAL_TIM_OC_Stop+0x52>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	f240 4344 	movw	r3, #1092	@ 0x444
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d107      	bne.n	80051e2 <HAL_TIM_OC_Stop+0x52>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <HAL_TIM_OC_Stop+0x82>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_TIM_OC_Stop+0x82>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_TIM_OC_Stop+0x92>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005220:	e013      	b.n	800524a <HAL_TIM_OC_Stop+0xba>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d104      	bne.n	8005232 <HAL_TIM_OC_Stop+0xa2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005230:	e00b      	b.n	800524a <HAL_TIM_OC_Stop+0xba>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d104      	bne.n	8005242 <HAL_TIM_OC_Stop+0xb2>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005240:	e003      	b.n	800524a <HAL_TIM_OC_Stop+0xba>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40012c00 	.word	0x40012c00

08005258 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005264:	2300      	movs	r3, #0
 8005266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005272:	2302      	movs	r3, #2
 8005274:	e048      	b.n	8005308 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b0c      	cmp	r3, #12
 8005282:	d839      	bhi.n	80052f8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005284:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052c1 	.word	0x080052c1
 8005290:	080052f9 	.word	0x080052f9
 8005294:	080052f9 	.word	0x080052f9
 8005298:	080052f9 	.word	0x080052f9
 800529c:	080052cf 	.word	0x080052cf
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	080052dd 	.word	0x080052dd
 80052b0:	080052f9 	.word	0x080052f9
 80052b4:	080052f9 	.word	0x080052f9
 80052b8:	080052f9 	.word	0x080052f9
 80052bc:	080052eb 	.word	0x080052eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f958 	bl	800557c <TIM_OC1_SetConfig>
      break;
 80052cc:	e017      	b.n	80052fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 f9b7 	bl	8005648 <TIM_OC2_SetConfig>
      break;
 80052da:	e010      	b.n	80052fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fa1a 	bl	800571c <TIM_OC3_SetConfig>
      break;
 80052e8:	e009      	b.n	80052fe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fa7d 	bl	80057f0 <TIM_OC4_SetConfig>
      break;
 80052f6:	e002      	b.n	80052fe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	75fb      	strb	r3, [r7, #23]
      break;
 80052fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005306:	7dfb      	ldrb	r3, [r7, #23]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_TIM_ConfigClockSource+0x1c>
 8005328:	2302      	movs	r3, #2
 800532a:	e0b4      	b.n	8005496 <HAL_TIM_ConfigClockSource+0x186>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800534a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005364:	d03e      	beq.n	80053e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800536a:	f200 8087 	bhi.w	800547c <HAL_TIM_ConfigClockSource+0x16c>
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005372:	f000 8086 	beq.w	8005482 <HAL_TIM_ConfigClockSource+0x172>
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800537a:	d87f      	bhi.n	800547c <HAL_TIM_ConfigClockSource+0x16c>
 800537c:	2b70      	cmp	r3, #112	@ 0x70
 800537e:	d01a      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005380:	2b70      	cmp	r3, #112	@ 0x70
 8005382:	d87b      	bhi.n	800547c <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b60      	cmp	r3, #96	@ 0x60
 8005386:	d050      	beq.n	800542a <HAL_TIM_ConfigClockSource+0x11a>
 8005388:	2b60      	cmp	r3, #96	@ 0x60
 800538a:	d877      	bhi.n	800547c <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b50      	cmp	r3, #80	@ 0x50
 800538e:	d03c      	beq.n	800540a <HAL_TIM_ConfigClockSource+0xfa>
 8005390:	2b50      	cmp	r3, #80	@ 0x50
 8005392:	d873      	bhi.n	800547c <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b40      	cmp	r3, #64	@ 0x40
 8005396:	d058      	beq.n	800544a <HAL_TIM_ConfigClockSource+0x13a>
 8005398:	2b40      	cmp	r3, #64	@ 0x40
 800539a:	d86f      	bhi.n	800547c <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b30      	cmp	r3, #48	@ 0x30
 800539e:	d064      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x15a>
 80053a0:	2b30      	cmp	r3, #48	@ 0x30
 80053a2:	d86b      	bhi.n	800547c <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d060      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x15a>
 80053a8:	2b20      	cmp	r3, #32
 80053aa:	d867      	bhi.n	800547c <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05c      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x15a>
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d05a      	beq.n	800546a <HAL_TIM_ConfigClockSource+0x15a>
 80053b4:	e062      	b.n	800547c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c6:	f000 fad8 	bl	800597a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	609a      	str	r2, [r3, #8]
      break;
 80053e2:	e04f      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053f4:	f000 fac1 	bl	800597a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005406:	609a      	str	r2, [r3, #8]
      break;
 8005408:	e03c      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005416:	461a      	mov	r2, r3
 8005418:	f000 fa38 	bl	800588c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2150      	movs	r1, #80	@ 0x50
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fa8f 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 8005428:	e02c      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005436:	461a      	mov	r2, r3
 8005438:	f000 fa56 	bl	80058e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2160      	movs	r1, #96	@ 0x60
 8005442:	4618      	mov	r0, r3
 8005444:	f000 fa7f 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 8005448:	e01c      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005456:	461a      	mov	r2, r3
 8005458:	f000 fa18 	bl	800588c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2140      	movs	r1, #64	@ 0x40
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fa6f 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 8005468:	e00c      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f000 fa66 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 800547a:	e003      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	73fb      	strb	r3, [r7, #15]
      break;
 8005480:	e000      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005494:	7bfb      	ldrb	r3, [r7, #15]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
	...

080054a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005570 <TIM_Base_SetConfig+0xd0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054be:	d007      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005574 <TIM_Base_SetConfig+0xd4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_Base_SetConfig+0x30>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005578 <TIM_Base_SetConfig+0xd8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d108      	bne.n	80054e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a22      	ldr	r2, [pc, #136]	@ (8005570 <TIM_Base_SetConfig+0xd0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00b      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f0:	d007      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005574 <TIM_Base_SetConfig+0xd4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d003      	beq.n	8005502 <TIM_Base_SetConfig+0x62>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005578 <TIM_Base_SetConfig+0xd8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d108      	bne.n	8005514 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005508:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a0d      	ldr	r2, [pc, #52]	@ (8005570 <TIM_Base_SetConfig+0xd0>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]
  }
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800

0800557c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f023 0201 	bic.w	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0303 	bic.w	r3, r3, #3
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 0302 	bic.w	r3, r3, #2
 80055c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005644 <TIM_OC1_SetConfig+0xc8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d10c      	bne.n	80055f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f023 0308 	bic.w	r3, r3, #8
 80055de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f023 0304 	bic.w	r3, r3, #4
 80055f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a13      	ldr	r2, [pc, #76]	@ (8005644 <TIM_OC1_SetConfig+0xc8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d111      	bne.n	800561e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	621a      	str	r2, [r3, #32]
}
 8005638:	bf00      	nop
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	40012c00 	.word	0x40012c00

08005648 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	f023 0210 	bic.w	r2, r3, #16
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800567e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 0320 	bic.w	r3, r3, #32
 8005692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005718 <TIM_OC2_SetConfig+0xd0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10d      	bne.n	80056c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a14      	ldr	r2, [pc, #80]	@ (8005718 <TIM_OC2_SetConfig+0xd0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d113      	bne.n	80056f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr
 8005718:	40012c00 	.word	0x40012c00

0800571c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	69db      	ldr	r3, [r3, #28]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <TIM_OC3_SetConfig+0xd0>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d10d      	bne.n	8005796 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	021b      	lsls	r3, r3, #8
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a14      	ldr	r2, [pc, #80]	@ (80057ec <TIM_OC3_SetConfig+0xd0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d113      	bne.n	80057c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	621a      	str	r2, [r3, #32]
}
 80057e0:	bf00      	nop
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40012c00 	.word	0x40012c00

080057f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005826:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800583a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	031b      	lsls	r3, r3, #12
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a0f      	ldr	r2, [pc, #60]	@ (8005888 <TIM_OC4_SetConfig+0x98>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d109      	bne.n	8005864 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005856:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	019b      	lsls	r3, r3, #6
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	4313      	orrs	r3, r2
 8005862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr
 8005888:	40012c00 	.word	0x40012c00

0800588c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800588c:	b480      	push	{r7}
 800588e:	b087      	sub	sp, #28
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	f023 0201 	bic.w	r2, r3, #1
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f023 030a 	bic.w	r3, r3, #10
 80058c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	621a      	str	r2, [r3, #32]
}
 80058de:	bf00      	nop
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bc80      	pop	{r7}
 80058e6:	4770      	bx	lr

080058e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	f023 0210 	bic.w	r2, r3, #16
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	031b      	lsls	r3, r3, #12
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005924:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	621a      	str	r2, [r3, #32]
}
 800593c:	bf00      	nop
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	f043 0307 	orr.w	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr

0800597a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800597a:	b480      	push	{r7}
 800597c:	b087      	sub	sp, #28
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	607a      	str	r2, [r7, #4]
 8005986:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005994:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	021a      	lsls	r2, r3, #8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	431a      	orrs	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	609a      	str	r2, [r3, #8]
}
 80059ae:	bf00      	nop
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	2201      	movs	r2, #1
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1a      	ldr	r2, [r3, #32]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	43db      	mvns	r3, r3
 80059da:	401a      	ands	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1a      	ldr	r2, [r3, #32]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	fa01 f303 	lsl.w	r3, r1, r3
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bc80      	pop	{r7}
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a14:	2302      	movs	r3, #2
 8005a16:	e046      	b.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00e      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a64:	d009      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a12      	ldr	r2, [pc, #72]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d004      	beq.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a10      	ldr	r2, [pc, #64]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10c      	bne.n	8005a94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr
 8005ab0:	40012c00 	.word	0x40012c00
 8005ab4:	40000400 	.word	0x40000400
 8005ab8:	40000800 	.word	0x40000800

08005abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e042      	b.n	8005b54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fc fc34 	bl	8002350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2224      	movs	r2, #36	@ 0x24
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fa09 	bl	8005f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	691a      	ldr	r2, [r3, #16]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695a      	ldr	r2, [r3, #20]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	@ 0x28
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d175      	bne.n	8005c68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d002      	beq.n	8005b88 <HAL_UART_Transmit+0x2c>
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e06e      	b.n	8005c6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2221      	movs	r2, #33	@ 0x21
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b9a:	f7fc fcdf 	bl	800255c <HAL_GetTick>
 8005b9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	88fa      	ldrh	r2, [r7, #6]
 8005baa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb4:	d108      	bne.n	8005bc8 <HAL_UART_Transmit+0x6c>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d104      	bne.n	8005bc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	e003      	b.n	8005bd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bd0:	e02e      	b.n	8005c30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2180      	movs	r1, #128	@ 0x80
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f8df 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d005      	beq.n	8005bf4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e03a      	b.n	8005c6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10b      	bne.n	8005c12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	3302      	adds	r3, #2
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	e007      	b.n	8005c22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1cb      	bne.n	8005bd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2200      	movs	r2, #0
 8005c42:	2140      	movs	r1, #64	@ 0x40
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f8ab 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e006      	b.n	8005c6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	e000      	b.n	8005c6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c68:	2302      	movs	r3, #2
  }
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b08a      	sub	sp, #40	@ 0x28
 8005c76:	af02      	add	r7, sp, #8
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	60b9      	str	r1, [r7, #8]
 8005c7c:	603b      	str	r3, [r7, #0]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	f040 8081 	bne.w	8005d96 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_UART_Receive+0x2e>
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e079      	b.n	8005d98 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2222      	movs	r2, #34	@ 0x22
 8005cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cb8:	f7fc fc50 	bl	800255c <HAL_GetTick>
 8005cbc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	88fa      	ldrh	r2, [r7, #6]
 8005cc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	88fa      	ldrh	r2, [r7, #6]
 8005cc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cd2:	d108      	bne.n	8005ce6 <HAL_UART_Receive+0x74>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d104      	bne.n	8005ce6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	e003      	b.n	8005cee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005cee:	e047      	b.n	8005d80 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2120      	movs	r1, #32
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f850 	bl	8005da0 <UART_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e042      	b.n	8005d98 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10c      	bne.n	8005d32 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	e01f      	b.n	8005d72 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d3a:	d007      	beq.n	8005d4c <HAL_UART_Receive+0xda>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10a      	bne.n	8005d5a <HAL_UART_Receive+0xe8>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	701a      	strb	r2, [r3, #0]
 8005d58:	e008      	b.n	8005d6c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1b2      	bne.n	8005cf0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e000      	b.n	8005d98 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005d96:	2302      	movs	r3, #2
  }
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3720      	adds	r7, #32
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	603b      	str	r3, [r7, #0]
 8005dac:	4613      	mov	r3, r2
 8005dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005db0:	e03b      	b.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	6a3b      	ldr	r3, [r7, #32]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d037      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7fc fbcf 	bl	800255c <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	6a3a      	ldr	r2, [r7, #32]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e03a      	b.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d023      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2b80      	cmp	r3, #128	@ 0x80
 8005de6:	d020      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b40      	cmp	r3, #64	@ 0x40
 8005dec:	d01d      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d116      	bne.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f81d 	bl	8005e52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e00f      	b.n	8005e4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4013      	ands	r3, r2
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	bf0c      	ite	eq
 8005e3a:	2301      	moveq	r3, #1
 8005e3c:	2300      	movne	r3, #0
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d0b4      	beq.n	8005db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b095      	sub	sp, #84	@ 0x54
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	330c      	adds	r3, #12
 8005e60:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e64:	e853 3f00 	ldrex	r3, [r3]
 8005e68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	330c      	adds	r3, #12
 8005e78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1e5      	bne.n	8005e5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3314      	adds	r3, #20
 8005e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f023 0301 	bic.w	r3, r3, #1
 8005ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3314      	adds	r3, #20
 8005eac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005eb6:	e841 2300 	strex	r3, r2, [r1]
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1e5      	bne.n	8005e8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d119      	bne.n	8005efe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f023 0310 	bic.w	r3, r3, #16
 8005ee0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005eea:	61ba      	str	r2, [r7, #24]
 8005eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6979      	ldr	r1, [r7, #20]
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e5      	bne.n	8005eca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f0c:	bf00      	nop
 8005f0e:	3754      	adds	r7, #84	@ 0x54
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bc80      	pop	{r7}
 8005f14:	4770      	bx	lr
	...

08005f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689a      	ldr	r2, [r3, #8]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	695b      	ldr	r3, [r3, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005f52:	f023 030c 	bic.w	r3, r3, #12
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6812      	ldr	r2, [r2, #0]
 8005f5a:	68b9      	ldr	r1, [r7, #8]
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800602c <UART_SetConfig+0x114>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d103      	bne.n	8005f88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f80:	f7fe fe1e 	bl	8004bc0 <HAL_RCC_GetPCLK2Freq>
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	e002      	b.n	8005f8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f88:	f7fe fe06 	bl	8004b98 <HAL_RCC_GetPCLK1Freq>
 8005f8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	009a      	lsls	r2, r3, #2
 8005f98:	441a      	add	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa4:	4a22      	ldr	r2, [pc, #136]	@ (8006030 <UART_SetConfig+0x118>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	095b      	lsrs	r3, r3, #5
 8005fac:	0119      	lsls	r1, r3, #4
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009a      	lsls	r2, r3, #2
 8005fb8:	441a      	add	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006030 <UART_SetConfig+0x118>)
 8005fc6:	fba3 0302 	umull	r0, r3, r3, r2
 8005fca:	095b      	lsrs	r3, r3, #5
 8005fcc:	2064      	movs	r0, #100	@ 0x64
 8005fce:	fb00 f303 	mul.w	r3, r0, r3
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	3332      	adds	r3, #50	@ 0x32
 8005fd8:	4a15      	ldr	r2, [pc, #84]	@ (8006030 <UART_SetConfig+0x118>)
 8005fda:	fba2 2303 	umull	r2, r3, r2, r3
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fe4:	4419      	add	r1, r3
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	009a      	lsls	r2, r3, #2
 8005ff0:	441a      	add	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8006030 <UART_SetConfig+0x118>)
 8005ffe:	fba3 0302 	umull	r0, r3, r3, r2
 8006002:	095b      	lsrs	r3, r3, #5
 8006004:	2064      	movs	r0, #100	@ 0x64
 8006006:	fb00 f303 	mul.w	r3, r0, r3
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	011b      	lsls	r3, r3, #4
 800600e:	3332      	adds	r3, #50	@ 0x32
 8006010:	4a07      	ldr	r2, [pc, #28]	@ (8006030 <UART_SetConfig+0x118>)
 8006012:	fba2 2303 	umull	r2, r3, r2, r3
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	f003 020f 	and.w	r2, r3, #15
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	440a      	add	r2, r1
 8006022:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	40013800 	.word	0x40013800
 8006030:	51eb851f 	.word	0x51eb851f

08006034 <atoi>:
 8006034:	220a      	movs	r2, #10
 8006036:	2100      	movs	r1, #0
 8006038:	f000 b87a 	b.w	8006130 <strtol>

0800603c <_strtol_l.constprop.0>:
 800603c:	2b24      	cmp	r3, #36	@ 0x24
 800603e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006042:	4686      	mov	lr, r0
 8006044:	4690      	mov	r8, r2
 8006046:	d801      	bhi.n	800604c <_strtol_l.constprop.0+0x10>
 8006048:	2b01      	cmp	r3, #1
 800604a:	d106      	bne.n	800605a <_strtol_l.constprop.0+0x1e>
 800604c:	f000 f8a2 	bl	8006194 <__errno>
 8006050:	2316      	movs	r3, #22
 8006052:	6003      	str	r3, [r0, #0]
 8006054:	2000      	movs	r0, #0
 8006056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605a:	460d      	mov	r5, r1
 800605c:	4833      	ldr	r0, [pc, #204]	@ (800612c <_strtol_l.constprop.0+0xf0>)
 800605e:	462a      	mov	r2, r5
 8006060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006064:	5d06      	ldrb	r6, [r0, r4]
 8006066:	f016 0608 	ands.w	r6, r6, #8
 800606a:	d1f8      	bne.n	800605e <_strtol_l.constprop.0+0x22>
 800606c:	2c2d      	cmp	r4, #45	@ 0x2d
 800606e:	d12d      	bne.n	80060cc <_strtol_l.constprop.0+0x90>
 8006070:	2601      	movs	r6, #1
 8006072:	782c      	ldrb	r4, [r5, #0]
 8006074:	1c95      	adds	r5, r2, #2
 8006076:	f033 0210 	bics.w	r2, r3, #16
 800607a:	d109      	bne.n	8006090 <_strtol_l.constprop.0+0x54>
 800607c:	2c30      	cmp	r4, #48	@ 0x30
 800607e:	d12a      	bne.n	80060d6 <_strtol_l.constprop.0+0x9a>
 8006080:	782a      	ldrb	r2, [r5, #0]
 8006082:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006086:	2a58      	cmp	r2, #88	@ 0x58
 8006088:	d125      	bne.n	80060d6 <_strtol_l.constprop.0+0x9a>
 800608a:	2310      	movs	r3, #16
 800608c:	786c      	ldrb	r4, [r5, #1]
 800608e:	3502      	adds	r5, #2
 8006090:	2200      	movs	r2, #0
 8006092:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006096:	f10c 3cff 	add.w	ip, ip, #4294967295
 800609a:	fbbc f9f3 	udiv	r9, ip, r3
 800609e:	4610      	mov	r0, r2
 80060a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80060a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80060a8:	2f09      	cmp	r7, #9
 80060aa:	d81b      	bhi.n	80060e4 <_strtol_l.constprop.0+0xa8>
 80060ac:	463c      	mov	r4, r7
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	dd27      	ble.n	8006102 <_strtol_l.constprop.0+0xc6>
 80060b2:	1c57      	adds	r7, r2, #1
 80060b4:	d007      	beq.n	80060c6 <_strtol_l.constprop.0+0x8a>
 80060b6:	4581      	cmp	r9, r0
 80060b8:	d320      	bcc.n	80060fc <_strtol_l.constprop.0+0xc0>
 80060ba:	d101      	bne.n	80060c0 <_strtol_l.constprop.0+0x84>
 80060bc:	45a2      	cmp	sl, r4
 80060be:	db1d      	blt.n	80060fc <_strtol_l.constprop.0+0xc0>
 80060c0:	2201      	movs	r2, #1
 80060c2:	fb00 4003 	mla	r0, r0, r3, r4
 80060c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060ca:	e7eb      	b.n	80060a4 <_strtol_l.constprop.0+0x68>
 80060cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80060ce:	bf04      	itt	eq
 80060d0:	782c      	ldrbeq	r4, [r5, #0]
 80060d2:	1c95      	addeq	r5, r2, #2
 80060d4:	e7cf      	b.n	8006076 <_strtol_l.constprop.0+0x3a>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1da      	bne.n	8006090 <_strtol_l.constprop.0+0x54>
 80060da:	2c30      	cmp	r4, #48	@ 0x30
 80060dc:	bf0c      	ite	eq
 80060de:	2308      	moveq	r3, #8
 80060e0:	230a      	movne	r3, #10
 80060e2:	e7d5      	b.n	8006090 <_strtol_l.constprop.0+0x54>
 80060e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80060e8:	2f19      	cmp	r7, #25
 80060ea:	d801      	bhi.n	80060f0 <_strtol_l.constprop.0+0xb4>
 80060ec:	3c37      	subs	r4, #55	@ 0x37
 80060ee:	e7de      	b.n	80060ae <_strtol_l.constprop.0+0x72>
 80060f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80060f4:	2f19      	cmp	r7, #25
 80060f6:	d804      	bhi.n	8006102 <_strtol_l.constprop.0+0xc6>
 80060f8:	3c57      	subs	r4, #87	@ 0x57
 80060fa:	e7d8      	b.n	80060ae <_strtol_l.constprop.0+0x72>
 80060fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006100:	e7e1      	b.n	80060c6 <_strtol_l.constprop.0+0x8a>
 8006102:	1c53      	adds	r3, r2, #1
 8006104:	d108      	bne.n	8006118 <_strtol_l.constprop.0+0xdc>
 8006106:	2322      	movs	r3, #34	@ 0x22
 8006108:	4660      	mov	r0, ip
 800610a:	f8ce 3000 	str.w	r3, [lr]
 800610e:	f1b8 0f00 	cmp.w	r8, #0
 8006112:	d0a0      	beq.n	8006056 <_strtol_l.constprop.0+0x1a>
 8006114:	1e69      	subs	r1, r5, #1
 8006116:	e006      	b.n	8006126 <_strtol_l.constprop.0+0xea>
 8006118:	b106      	cbz	r6, 800611c <_strtol_l.constprop.0+0xe0>
 800611a:	4240      	negs	r0, r0
 800611c:	f1b8 0f00 	cmp.w	r8, #0
 8006120:	d099      	beq.n	8006056 <_strtol_l.constprop.0+0x1a>
 8006122:	2a00      	cmp	r2, #0
 8006124:	d1f6      	bne.n	8006114 <_strtol_l.constprop.0+0xd8>
 8006126:	f8c8 1000 	str.w	r1, [r8]
 800612a:	e794      	b.n	8006056 <_strtol_l.constprop.0+0x1a>
 800612c:	08006e5b 	.word	0x08006e5b

08006130 <strtol>:
 8006130:	4613      	mov	r3, r2
 8006132:	460a      	mov	r2, r1
 8006134:	4601      	mov	r1, r0
 8006136:	4802      	ldr	r0, [pc, #8]	@ (8006140 <strtol+0x10>)
 8006138:	6800      	ldr	r0, [r0, #0]
 800613a:	f7ff bf7f 	b.w	800603c <_strtol_l.constprop.0>
 800613e:	bf00      	nop
 8006140:	2000000c 	.word	0x2000000c

08006144 <siprintf>:
 8006144:	b40e      	push	{r1, r2, r3}
 8006146:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800614a:	b500      	push	{lr}
 800614c:	b09c      	sub	sp, #112	@ 0x70
 800614e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006150:	9002      	str	r0, [sp, #8]
 8006152:	9006      	str	r0, [sp, #24]
 8006154:	9107      	str	r1, [sp, #28]
 8006156:	9104      	str	r1, [sp, #16]
 8006158:	4808      	ldr	r0, [pc, #32]	@ (800617c <siprintf+0x38>)
 800615a:	4909      	ldr	r1, [pc, #36]	@ (8006180 <siprintf+0x3c>)
 800615c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006160:	9105      	str	r1, [sp, #20]
 8006162:	6800      	ldr	r0, [r0, #0]
 8006164:	a902      	add	r1, sp, #8
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	f000 f992 	bl	8006490 <_svfiprintf_r>
 800616c:	2200      	movs	r2, #0
 800616e:	9b02      	ldr	r3, [sp, #8]
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	b01c      	add	sp, #112	@ 0x70
 8006174:	f85d eb04 	ldr.w	lr, [sp], #4
 8006178:	b003      	add	sp, #12
 800617a:	4770      	bx	lr
 800617c:	2000000c 	.word	0x2000000c
 8006180:	ffff0208 	.word	0xffff0208

08006184 <memset>:
 8006184:	4603      	mov	r3, r0
 8006186:	4402      	add	r2, r0
 8006188:	4293      	cmp	r3, r2
 800618a:	d100      	bne.n	800618e <memset+0xa>
 800618c:	4770      	bx	lr
 800618e:	f803 1b01 	strb.w	r1, [r3], #1
 8006192:	e7f9      	b.n	8006188 <memset+0x4>

08006194 <__errno>:
 8006194:	4b01      	ldr	r3, [pc, #4]	@ (800619c <__errno+0x8>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	2000000c 	.word	0x2000000c

080061a0 <__libc_init_array>:
 80061a0:	b570      	push	{r4, r5, r6, lr}
 80061a2:	2600      	movs	r6, #0
 80061a4:	4d0c      	ldr	r5, [pc, #48]	@ (80061d8 <__libc_init_array+0x38>)
 80061a6:	4c0d      	ldr	r4, [pc, #52]	@ (80061dc <__libc_init_array+0x3c>)
 80061a8:	1b64      	subs	r4, r4, r5
 80061aa:	10a4      	asrs	r4, r4, #2
 80061ac:	42a6      	cmp	r6, r4
 80061ae:	d109      	bne.n	80061c4 <__libc_init_array+0x24>
 80061b0:	f000 fc78 	bl	8006aa4 <_init>
 80061b4:	2600      	movs	r6, #0
 80061b6:	4d0a      	ldr	r5, [pc, #40]	@ (80061e0 <__libc_init_array+0x40>)
 80061b8:	4c0a      	ldr	r4, [pc, #40]	@ (80061e4 <__libc_init_array+0x44>)
 80061ba:	1b64      	subs	r4, r4, r5
 80061bc:	10a4      	asrs	r4, r4, #2
 80061be:	42a6      	cmp	r6, r4
 80061c0:	d105      	bne.n	80061ce <__libc_init_array+0x2e>
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c8:	4798      	blx	r3
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7ee      	b.n	80061ac <__libc_init_array+0xc>
 80061ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d2:	4798      	blx	r3
 80061d4:	3601      	adds	r6, #1
 80061d6:	e7f2      	b.n	80061be <__libc_init_array+0x1e>
 80061d8:	08006f98 	.word	0x08006f98
 80061dc:	08006f98 	.word	0x08006f98
 80061e0:	08006f98 	.word	0x08006f98
 80061e4:	08006f9c 	.word	0x08006f9c

080061e8 <__retarget_lock_acquire_recursive>:
 80061e8:	4770      	bx	lr

080061ea <__retarget_lock_release_recursive>:
 80061ea:	4770      	bx	lr

080061ec <_free_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4605      	mov	r5, r0
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d040      	beq.n	8006276 <_free_r+0x8a>
 80061f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f8:	1f0c      	subs	r4, r1, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfb8      	it	lt
 80061fe:	18e4      	addlt	r4, r4, r3
 8006200:	f000 f8de 	bl	80063c0 <__malloc_lock>
 8006204:	4a1c      	ldr	r2, [pc, #112]	@ (8006278 <_free_r+0x8c>)
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	b933      	cbnz	r3, 8006218 <_free_r+0x2c>
 800620a:	6063      	str	r3, [r4, #4]
 800620c:	6014      	str	r4, [r2, #0]
 800620e:	4628      	mov	r0, r5
 8006210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006214:	f000 b8da 	b.w	80063cc <__malloc_unlock>
 8006218:	42a3      	cmp	r3, r4
 800621a:	d908      	bls.n	800622e <_free_r+0x42>
 800621c:	6820      	ldr	r0, [r4, #0]
 800621e:	1821      	adds	r1, r4, r0
 8006220:	428b      	cmp	r3, r1
 8006222:	bf01      	itttt	eq
 8006224:	6819      	ldreq	r1, [r3, #0]
 8006226:	685b      	ldreq	r3, [r3, #4]
 8006228:	1809      	addeq	r1, r1, r0
 800622a:	6021      	streq	r1, [r4, #0]
 800622c:	e7ed      	b.n	800620a <_free_r+0x1e>
 800622e:	461a      	mov	r2, r3
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	b10b      	cbz	r3, 8006238 <_free_r+0x4c>
 8006234:	42a3      	cmp	r3, r4
 8006236:	d9fa      	bls.n	800622e <_free_r+0x42>
 8006238:	6811      	ldr	r1, [r2, #0]
 800623a:	1850      	adds	r0, r2, r1
 800623c:	42a0      	cmp	r0, r4
 800623e:	d10b      	bne.n	8006258 <_free_r+0x6c>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	4401      	add	r1, r0
 8006244:	1850      	adds	r0, r2, r1
 8006246:	4283      	cmp	r3, r0
 8006248:	6011      	str	r1, [r2, #0]
 800624a:	d1e0      	bne.n	800620e <_free_r+0x22>
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4408      	add	r0, r1
 8006252:	6010      	str	r0, [r2, #0]
 8006254:	6053      	str	r3, [r2, #4]
 8006256:	e7da      	b.n	800620e <_free_r+0x22>
 8006258:	d902      	bls.n	8006260 <_free_r+0x74>
 800625a:	230c      	movs	r3, #12
 800625c:	602b      	str	r3, [r5, #0]
 800625e:	e7d6      	b.n	800620e <_free_r+0x22>
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	1821      	adds	r1, r4, r0
 8006264:	428b      	cmp	r3, r1
 8006266:	bf01      	itttt	eq
 8006268:	6819      	ldreq	r1, [r3, #0]
 800626a:	685b      	ldreq	r3, [r3, #4]
 800626c:	1809      	addeq	r1, r1, r0
 800626e:	6021      	streq	r1, [r4, #0]
 8006270:	6063      	str	r3, [r4, #4]
 8006272:	6054      	str	r4, [r2, #4]
 8006274:	e7cb      	b.n	800620e <_free_r+0x22>
 8006276:	bd38      	pop	{r3, r4, r5, pc}
 8006278:	20000350 	.word	0x20000350

0800627c <sbrk_aligned>:
 800627c:	b570      	push	{r4, r5, r6, lr}
 800627e:	4e0f      	ldr	r6, [pc, #60]	@ (80062bc <sbrk_aligned+0x40>)
 8006280:	460c      	mov	r4, r1
 8006282:	6831      	ldr	r1, [r6, #0]
 8006284:	4605      	mov	r5, r0
 8006286:	b911      	cbnz	r1, 800628e <sbrk_aligned+0x12>
 8006288:	f000 fbaa 	bl	80069e0 <_sbrk_r>
 800628c:	6030      	str	r0, [r6, #0]
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f000 fba5 	bl	80069e0 <_sbrk_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d103      	bne.n	80062a2 <sbrk_aligned+0x26>
 800629a:	f04f 34ff 	mov.w	r4, #4294967295
 800629e:	4620      	mov	r0, r4
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
 80062a2:	1cc4      	adds	r4, r0, #3
 80062a4:	f024 0403 	bic.w	r4, r4, #3
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	d0f8      	beq.n	800629e <sbrk_aligned+0x22>
 80062ac:	1a21      	subs	r1, r4, r0
 80062ae:	4628      	mov	r0, r5
 80062b0:	f000 fb96 	bl	80069e0 <_sbrk_r>
 80062b4:	3001      	adds	r0, #1
 80062b6:	d1f2      	bne.n	800629e <sbrk_aligned+0x22>
 80062b8:	e7ef      	b.n	800629a <sbrk_aligned+0x1e>
 80062ba:	bf00      	nop
 80062bc:	2000034c 	.word	0x2000034c

080062c0 <_malloc_r>:
 80062c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c4:	1ccd      	adds	r5, r1, #3
 80062c6:	f025 0503 	bic.w	r5, r5, #3
 80062ca:	3508      	adds	r5, #8
 80062cc:	2d0c      	cmp	r5, #12
 80062ce:	bf38      	it	cc
 80062d0:	250c      	movcc	r5, #12
 80062d2:	2d00      	cmp	r5, #0
 80062d4:	4606      	mov	r6, r0
 80062d6:	db01      	blt.n	80062dc <_malloc_r+0x1c>
 80062d8:	42a9      	cmp	r1, r5
 80062da:	d904      	bls.n	80062e6 <_malloc_r+0x26>
 80062dc:	230c      	movs	r3, #12
 80062de:	6033      	str	r3, [r6, #0]
 80062e0:	2000      	movs	r0, #0
 80062e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063bc <_malloc_r+0xfc>
 80062ea:	f000 f869 	bl	80063c0 <__malloc_lock>
 80062ee:	f8d8 3000 	ldr.w	r3, [r8]
 80062f2:	461c      	mov	r4, r3
 80062f4:	bb44      	cbnz	r4, 8006348 <_malloc_r+0x88>
 80062f6:	4629      	mov	r1, r5
 80062f8:	4630      	mov	r0, r6
 80062fa:	f7ff ffbf 	bl	800627c <sbrk_aligned>
 80062fe:	1c43      	adds	r3, r0, #1
 8006300:	4604      	mov	r4, r0
 8006302:	d158      	bne.n	80063b6 <_malloc_r+0xf6>
 8006304:	f8d8 4000 	ldr.w	r4, [r8]
 8006308:	4627      	mov	r7, r4
 800630a:	2f00      	cmp	r7, #0
 800630c:	d143      	bne.n	8006396 <_malloc_r+0xd6>
 800630e:	2c00      	cmp	r4, #0
 8006310:	d04b      	beq.n	80063aa <_malloc_r+0xea>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	4639      	mov	r1, r7
 8006316:	4630      	mov	r0, r6
 8006318:	eb04 0903 	add.w	r9, r4, r3
 800631c:	f000 fb60 	bl	80069e0 <_sbrk_r>
 8006320:	4581      	cmp	r9, r0
 8006322:	d142      	bne.n	80063aa <_malloc_r+0xea>
 8006324:	6821      	ldr	r1, [r4, #0]
 8006326:	4630      	mov	r0, r6
 8006328:	1a6d      	subs	r5, r5, r1
 800632a:	4629      	mov	r1, r5
 800632c:	f7ff ffa6 	bl	800627c <sbrk_aligned>
 8006330:	3001      	adds	r0, #1
 8006332:	d03a      	beq.n	80063aa <_malloc_r+0xea>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	442b      	add	r3, r5
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	f8d8 3000 	ldr.w	r3, [r8]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	bb62      	cbnz	r2, 800639c <_malloc_r+0xdc>
 8006342:	f8c8 7000 	str.w	r7, [r8]
 8006346:	e00f      	b.n	8006368 <_malloc_r+0xa8>
 8006348:	6822      	ldr	r2, [r4, #0]
 800634a:	1b52      	subs	r2, r2, r5
 800634c:	d420      	bmi.n	8006390 <_malloc_r+0xd0>
 800634e:	2a0b      	cmp	r2, #11
 8006350:	d917      	bls.n	8006382 <_malloc_r+0xc2>
 8006352:	1961      	adds	r1, r4, r5
 8006354:	42a3      	cmp	r3, r4
 8006356:	6025      	str	r5, [r4, #0]
 8006358:	bf18      	it	ne
 800635a:	6059      	strne	r1, [r3, #4]
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	bf08      	it	eq
 8006360:	f8c8 1000 	streq.w	r1, [r8]
 8006364:	5162      	str	r2, [r4, r5]
 8006366:	604b      	str	r3, [r1, #4]
 8006368:	4630      	mov	r0, r6
 800636a:	f000 f82f 	bl	80063cc <__malloc_unlock>
 800636e:	f104 000b 	add.w	r0, r4, #11
 8006372:	1d23      	adds	r3, r4, #4
 8006374:	f020 0007 	bic.w	r0, r0, #7
 8006378:	1ac2      	subs	r2, r0, r3
 800637a:	bf1c      	itt	ne
 800637c:	1a1b      	subne	r3, r3, r0
 800637e:	50a3      	strne	r3, [r4, r2]
 8006380:	e7af      	b.n	80062e2 <_malloc_r+0x22>
 8006382:	6862      	ldr	r2, [r4, #4]
 8006384:	42a3      	cmp	r3, r4
 8006386:	bf0c      	ite	eq
 8006388:	f8c8 2000 	streq.w	r2, [r8]
 800638c:	605a      	strne	r2, [r3, #4]
 800638e:	e7eb      	b.n	8006368 <_malloc_r+0xa8>
 8006390:	4623      	mov	r3, r4
 8006392:	6864      	ldr	r4, [r4, #4]
 8006394:	e7ae      	b.n	80062f4 <_malloc_r+0x34>
 8006396:	463c      	mov	r4, r7
 8006398:	687f      	ldr	r7, [r7, #4]
 800639a:	e7b6      	b.n	800630a <_malloc_r+0x4a>
 800639c:	461a      	mov	r2, r3
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d1fb      	bne.n	800639c <_malloc_r+0xdc>
 80063a4:	2300      	movs	r3, #0
 80063a6:	6053      	str	r3, [r2, #4]
 80063a8:	e7de      	b.n	8006368 <_malloc_r+0xa8>
 80063aa:	230c      	movs	r3, #12
 80063ac:	4630      	mov	r0, r6
 80063ae:	6033      	str	r3, [r6, #0]
 80063b0:	f000 f80c 	bl	80063cc <__malloc_unlock>
 80063b4:	e794      	b.n	80062e0 <_malloc_r+0x20>
 80063b6:	6005      	str	r5, [r0, #0]
 80063b8:	e7d6      	b.n	8006368 <_malloc_r+0xa8>
 80063ba:	bf00      	nop
 80063bc:	20000350 	.word	0x20000350

080063c0 <__malloc_lock>:
 80063c0:	4801      	ldr	r0, [pc, #4]	@ (80063c8 <__malloc_lock+0x8>)
 80063c2:	f7ff bf11 	b.w	80061e8 <__retarget_lock_acquire_recursive>
 80063c6:	bf00      	nop
 80063c8:	20000348 	.word	0x20000348

080063cc <__malloc_unlock>:
 80063cc:	4801      	ldr	r0, [pc, #4]	@ (80063d4 <__malloc_unlock+0x8>)
 80063ce:	f7ff bf0c 	b.w	80061ea <__retarget_lock_release_recursive>
 80063d2:	bf00      	nop
 80063d4:	20000348 	.word	0x20000348

080063d8 <__ssputs_r>:
 80063d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	461f      	mov	r7, r3
 80063de:	688e      	ldr	r6, [r1, #8]
 80063e0:	4682      	mov	sl, r0
 80063e2:	42be      	cmp	r6, r7
 80063e4:	460c      	mov	r4, r1
 80063e6:	4690      	mov	r8, r2
 80063e8:	680b      	ldr	r3, [r1, #0]
 80063ea:	d82d      	bhi.n	8006448 <__ssputs_r+0x70>
 80063ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80063f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80063f4:	d026      	beq.n	8006444 <__ssputs_r+0x6c>
 80063f6:	6965      	ldr	r5, [r4, #20]
 80063f8:	6909      	ldr	r1, [r1, #16]
 80063fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063fe:	eba3 0901 	sub.w	r9, r3, r1
 8006402:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006406:	1c7b      	adds	r3, r7, #1
 8006408:	444b      	add	r3, r9
 800640a:	106d      	asrs	r5, r5, #1
 800640c:	429d      	cmp	r5, r3
 800640e:	bf38      	it	cc
 8006410:	461d      	movcc	r5, r3
 8006412:	0553      	lsls	r3, r2, #21
 8006414:	d527      	bpl.n	8006466 <__ssputs_r+0x8e>
 8006416:	4629      	mov	r1, r5
 8006418:	f7ff ff52 	bl	80062c0 <_malloc_r>
 800641c:	4606      	mov	r6, r0
 800641e:	b360      	cbz	r0, 800647a <__ssputs_r+0xa2>
 8006420:	464a      	mov	r2, r9
 8006422:	6921      	ldr	r1, [r4, #16]
 8006424:	f000 fafa 	bl	8006a1c <memcpy>
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800642e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006432:	81a3      	strh	r3, [r4, #12]
 8006434:	6126      	str	r6, [r4, #16]
 8006436:	444e      	add	r6, r9
 8006438:	6026      	str	r6, [r4, #0]
 800643a:	463e      	mov	r6, r7
 800643c:	6165      	str	r5, [r4, #20]
 800643e:	eba5 0509 	sub.w	r5, r5, r9
 8006442:	60a5      	str	r5, [r4, #8]
 8006444:	42be      	cmp	r6, r7
 8006446:	d900      	bls.n	800644a <__ssputs_r+0x72>
 8006448:	463e      	mov	r6, r7
 800644a:	4632      	mov	r2, r6
 800644c:	4641      	mov	r1, r8
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	f000 faac 	bl	80069ac <memmove>
 8006454:	2000      	movs	r0, #0
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	1b9b      	subs	r3, r3, r6
 800645a:	60a3      	str	r3, [r4, #8]
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	4433      	add	r3, r6
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006466:	462a      	mov	r2, r5
 8006468:	f000 fae6 	bl	8006a38 <_realloc_r>
 800646c:	4606      	mov	r6, r0
 800646e:	2800      	cmp	r0, #0
 8006470:	d1e0      	bne.n	8006434 <__ssputs_r+0x5c>
 8006472:	4650      	mov	r0, sl
 8006474:	6921      	ldr	r1, [r4, #16]
 8006476:	f7ff feb9 	bl	80061ec <_free_r>
 800647a:	230c      	movs	r3, #12
 800647c:	f8ca 3000 	str.w	r3, [sl]
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f04f 30ff 	mov.w	r0, #4294967295
 8006486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	e7e9      	b.n	8006462 <__ssputs_r+0x8a>
	...

08006490 <_svfiprintf_r>:
 8006490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006494:	4698      	mov	r8, r3
 8006496:	898b      	ldrh	r3, [r1, #12]
 8006498:	4607      	mov	r7, r0
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	460d      	mov	r5, r1
 800649e:	4614      	mov	r4, r2
 80064a0:	b09d      	sub	sp, #116	@ 0x74
 80064a2:	d510      	bpl.n	80064c6 <_svfiprintf_r+0x36>
 80064a4:	690b      	ldr	r3, [r1, #16]
 80064a6:	b973      	cbnz	r3, 80064c6 <_svfiprintf_r+0x36>
 80064a8:	2140      	movs	r1, #64	@ 0x40
 80064aa:	f7ff ff09 	bl	80062c0 <_malloc_r>
 80064ae:	6028      	str	r0, [r5, #0]
 80064b0:	6128      	str	r0, [r5, #16]
 80064b2:	b930      	cbnz	r0, 80064c2 <_svfiprintf_r+0x32>
 80064b4:	230c      	movs	r3, #12
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	f04f 30ff 	mov.w	r0, #4294967295
 80064bc:	b01d      	add	sp, #116	@ 0x74
 80064be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c2:	2340      	movs	r3, #64	@ 0x40
 80064c4:	616b      	str	r3, [r5, #20]
 80064c6:	2300      	movs	r3, #0
 80064c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ca:	2320      	movs	r3, #32
 80064cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064d0:	2330      	movs	r3, #48	@ 0x30
 80064d2:	f04f 0901 	mov.w	r9, #1
 80064d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064da:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006674 <_svfiprintf_r+0x1e4>
 80064de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80064e2:	4623      	mov	r3, r4
 80064e4:	469a      	mov	sl, r3
 80064e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064ea:	b10a      	cbz	r2, 80064f0 <_svfiprintf_r+0x60>
 80064ec:	2a25      	cmp	r2, #37	@ 0x25
 80064ee:	d1f9      	bne.n	80064e4 <_svfiprintf_r+0x54>
 80064f0:	ebba 0b04 	subs.w	fp, sl, r4
 80064f4:	d00b      	beq.n	800650e <_svfiprintf_r+0x7e>
 80064f6:	465b      	mov	r3, fp
 80064f8:	4622      	mov	r2, r4
 80064fa:	4629      	mov	r1, r5
 80064fc:	4638      	mov	r0, r7
 80064fe:	f7ff ff6b 	bl	80063d8 <__ssputs_r>
 8006502:	3001      	adds	r0, #1
 8006504:	f000 80a7 	beq.w	8006656 <_svfiprintf_r+0x1c6>
 8006508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800650a:	445a      	add	r2, fp
 800650c:	9209      	str	r2, [sp, #36]	@ 0x24
 800650e:	f89a 3000 	ldrb.w	r3, [sl]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 809f 	beq.w	8006656 <_svfiprintf_r+0x1c6>
 8006518:	2300      	movs	r3, #0
 800651a:	f04f 32ff 	mov.w	r2, #4294967295
 800651e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006522:	f10a 0a01 	add.w	sl, sl, #1
 8006526:	9304      	str	r3, [sp, #16]
 8006528:	9307      	str	r3, [sp, #28]
 800652a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800652e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006530:	4654      	mov	r4, sl
 8006532:	2205      	movs	r2, #5
 8006534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006538:	484e      	ldr	r0, [pc, #312]	@ (8006674 <_svfiprintf_r+0x1e4>)
 800653a:	f000 fa61 	bl	8006a00 <memchr>
 800653e:	9a04      	ldr	r2, [sp, #16]
 8006540:	b9d8      	cbnz	r0, 800657a <_svfiprintf_r+0xea>
 8006542:	06d0      	lsls	r0, r2, #27
 8006544:	bf44      	itt	mi
 8006546:	2320      	movmi	r3, #32
 8006548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800654c:	0711      	lsls	r1, r2, #28
 800654e:	bf44      	itt	mi
 8006550:	232b      	movmi	r3, #43	@ 0x2b
 8006552:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006556:	f89a 3000 	ldrb.w	r3, [sl]
 800655a:	2b2a      	cmp	r3, #42	@ 0x2a
 800655c:	d015      	beq.n	800658a <_svfiprintf_r+0xfa>
 800655e:	4654      	mov	r4, sl
 8006560:	2000      	movs	r0, #0
 8006562:	f04f 0c0a 	mov.w	ip, #10
 8006566:	9a07      	ldr	r2, [sp, #28]
 8006568:	4621      	mov	r1, r4
 800656a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800656e:	3b30      	subs	r3, #48	@ 0x30
 8006570:	2b09      	cmp	r3, #9
 8006572:	d94b      	bls.n	800660c <_svfiprintf_r+0x17c>
 8006574:	b1b0      	cbz	r0, 80065a4 <_svfiprintf_r+0x114>
 8006576:	9207      	str	r2, [sp, #28]
 8006578:	e014      	b.n	80065a4 <_svfiprintf_r+0x114>
 800657a:	eba0 0308 	sub.w	r3, r0, r8
 800657e:	fa09 f303 	lsl.w	r3, r9, r3
 8006582:	4313      	orrs	r3, r2
 8006584:	46a2      	mov	sl, r4
 8006586:	9304      	str	r3, [sp, #16]
 8006588:	e7d2      	b.n	8006530 <_svfiprintf_r+0xa0>
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	1d19      	adds	r1, r3, #4
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	9103      	str	r1, [sp, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	bfbb      	ittet	lt
 8006596:	425b      	neglt	r3, r3
 8006598:	f042 0202 	orrlt.w	r2, r2, #2
 800659c:	9307      	strge	r3, [sp, #28]
 800659e:	9307      	strlt	r3, [sp, #28]
 80065a0:	bfb8      	it	lt
 80065a2:	9204      	strlt	r2, [sp, #16]
 80065a4:	7823      	ldrb	r3, [r4, #0]
 80065a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80065a8:	d10a      	bne.n	80065c0 <_svfiprintf_r+0x130>
 80065aa:	7863      	ldrb	r3, [r4, #1]
 80065ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ae:	d132      	bne.n	8006616 <_svfiprintf_r+0x186>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	3402      	adds	r4, #2
 80065b4:	1d1a      	adds	r2, r3, #4
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	9203      	str	r2, [sp, #12]
 80065ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065be:	9305      	str	r3, [sp, #20]
 80065c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006678 <_svfiprintf_r+0x1e8>
 80065c4:	2203      	movs	r2, #3
 80065c6:	4650      	mov	r0, sl
 80065c8:	7821      	ldrb	r1, [r4, #0]
 80065ca:	f000 fa19 	bl	8006a00 <memchr>
 80065ce:	b138      	cbz	r0, 80065e0 <_svfiprintf_r+0x150>
 80065d0:	2240      	movs	r2, #64	@ 0x40
 80065d2:	9b04      	ldr	r3, [sp, #16]
 80065d4:	eba0 000a 	sub.w	r0, r0, sl
 80065d8:	4082      	lsls	r2, r0
 80065da:	4313      	orrs	r3, r2
 80065dc:	3401      	adds	r4, #1
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e4:	2206      	movs	r2, #6
 80065e6:	4825      	ldr	r0, [pc, #148]	@ (800667c <_svfiprintf_r+0x1ec>)
 80065e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80065ec:	f000 fa08 	bl	8006a00 <memchr>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d036      	beq.n	8006662 <_svfiprintf_r+0x1d2>
 80065f4:	4b22      	ldr	r3, [pc, #136]	@ (8006680 <_svfiprintf_r+0x1f0>)
 80065f6:	bb1b      	cbnz	r3, 8006640 <_svfiprintf_r+0x1b0>
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	3307      	adds	r3, #7
 80065fc:	f023 0307 	bic.w	r3, r3, #7
 8006600:	3308      	adds	r3, #8
 8006602:	9303      	str	r3, [sp, #12]
 8006604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006606:	4433      	add	r3, r6
 8006608:	9309      	str	r3, [sp, #36]	@ 0x24
 800660a:	e76a      	b.n	80064e2 <_svfiprintf_r+0x52>
 800660c:	460c      	mov	r4, r1
 800660e:	2001      	movs	r0, #1
 8006610:	fb0c 3202 	mla	r2, ip, r2, r3
 8006614:	e7a8      	b.n	8006568 <_svfiprintf_r+0xd8>
 8006616:	2300      	movs	r3, #0
 8006618:	f04f 0c0a 	mov.w	ip, #10
 800661c:	4619      	mov	r1, r3
 800661e:	3401      	adds	r4, #1
 8006620:	9305      	str	r3, [sp, #20]
 8006622:	4620      	mov	r0, r4
 8006624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006628:	3a30      	subs	r2, #48	@ 0x30
 800662a:	2a09      	cmp	r2, #9
 800662c:	d903      	bls.n	8006636 <_svfiprintf_r+0x1a6>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0c6      	beq.n	80065c0 <_svfiprintf_r+0x130>
 8006632:	9105      	str	r1, [sp, #20]
 8006634:	e7c4      	b.n	80065c0 <_svfiprintf_r+0x130>
 8006636:	4604      	mov	r4, r0
 8006638:	2301      	movs	r3, #1
 800663a:	fb0c 2101 	mla	r1, ip, r1, r2
 800663e:	e7f0      	b.n	8006622 <_svfiprintf_r+0x192>
 8006640:	ab03      	add	r3, sp, #12
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	462a      	mov	r2, r5
 8006646:	4638      	mov	r0, r7
 8006648:	4b0e      	ldr	r3, [pc, #56]	@ (8006684 <_svfiprintf_r+0x1f4>)
 800664a:	a904      	add	r1, sp, #16
 800664c:	f3af 8000 	nop.w
 8006650:	1c42      	adds	r2, r0, #1
 8006652:	4606      	mov	r6, r0
 8006654:	d1d6      	bne.n	8006604 <_svfiprintf_r+0x174>
 8006656:	89ab      	ldrh	r3, [r5, #12]
 8006658:	065b      	lsls	r3, r3, #25
 800665a:	f53f af2d 	bmi.w	80064b8 <_svfiprintf_r+0x28>
 800665e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006660:	e72c      	b.n	80064bc <_svfiprintf_r+0x2c>
 8006662:	ab03      	add	r3, sp, #12
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	462a      	mov	r2, r5
 8006668:	4638      	mov	r0, r7
 800666a:	4b06      	ldr	r3, [pc, #24]	@ (8006684 <_svfiprintf_r+0x1f4>)
 800666c:	a904      	add	r1, sp, #16
 800666e:	f000 f87d 	bl	800676c <_printf_i>
 8006672:	e7ed      	b.n	8006650 <_svfiprintf_r+0x1c0>
 8006674:	08006f5b 	.word	0x08006f5b
 8006678:	08006f61 	.word	0x08006f61
 800667c:	08006f65 	.word	0x08006f65
 8006680:	00000000 	.word	0x00000000
 8006684:	080063d9 	.word	0x080063d9

08006688 <_printf_common>:
 8006688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800668c:	4616      	mov	r6, r2
 800668e:	4698      	mov	r8, r3
 8006690:	688a      	ldr	r2, [r1, #8]
 8006692:	690b      	ldr	r3, [r1, #16]
 8006694:	4607      	mov	r7, r0
 8006696:	4293      	cmp	r3, r2
 8006698:	bfb8      	it	lt
 800669a:	4613      	movlt	r3, r2
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066a2:	460c      	mov	r4, r1
 80066a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066a8:	b10a      	cbz	r2, 80066ae <_printf_common+0x26>
 80066aa:	3301      	adds	r3, #1
 80066ac:	6033      	str	r3, [r6, #0]
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	0699      	lsls	r1, r3, #26
 80066b2:	bf42      	ittt	mi
 80066b4:	6833      	ldrmi	r3, [r6, #0]
 80066b6:	3302      	addmi	r3, #2
 80066b8:	6033      	strmi	r3, [r6, #0]
 80066ba:	6825      	ldr	r5, [r4, #0]
 80066bc:	f015 0506 	ands.w	r5, r5, #6
 80066c0:	d106      	bne.n	80066d0 <_printf_common+0x48>
 80066c2:	f104 0a19 	add.w	sl, r4, #25
 80066c6:	68e3      	ldr	r3, [r4, #12]
 80066c8:	6832      	ldr	r2, [r6, #0]
 80066ca:	1a9b      	subs	r3, r3, r2
 80066cc:	42ab      	cmp	r3, r5
 80066ce:	dc2b      	bgt.n	8006728 <_printf_common+0xa0>
 80066d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80066d4:	6822      	ldr	r2, [r4, #0]
 80066d6:	3b00      	subs	r3, #0
 80066d8:	bf18      	it	ne
 80066da:	2301      	movne	r3, #1
 80066dc:	0692      	lsls	r2, r2, #26
 80066de:	d430      	bmi.n	8006742 <_printf_common+0xba>
 80066e0:	4641      	mov	r1, r8
 80066e2:	4638      	mov	r0, r7
 80066e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80066e8:	47c8      	blx	r9
 80066ea:	3001      	adds	r0, #1
 80066ec:	d023      	beq.n	8006736 <_printf_common+0xae>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	6922      	ldr	r2, [r4, #16]
 80066f2:	f003 0306 	and.w	r3, r3, #6
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	bf14      	ite	ne
 80066fa:	2500      	movne	r5, #0
 80066fc:	6833      	ldreq	r3, [r6, #0]
 80066fe:	f04f 0600 	mov.w	r6, #0
 8006702:	bf08      	it	eq
 8006704:	68e5      	ldreq	r5, [r4, #12]
 8006706:	f104 041a 	add.w	r4, r4, #26
 800670a:	bf08      	it	eq
 800670c:	1aed      	subeq	r5, r5, r3
 800670e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006712:	bf08      	it	eq
 8006714:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006718:	4293      	cmp	r3, r2
 800671a:	bfc4      	itt	gt
 800671c:	1a9b      	subgt	r3, r3, r2
 800671e:	18ed      	addgt	r5, r5, r3
 8006720:	42b5      	cmp	r5, r6
 8006722:	d11a      	bne.n	800675a <_printf_common+0xd2>
 8006724:	2000      	movs	r0, #0
 8006726:	e008      	b.n	800673a <_printf_common+0xb2>
 8006728:	2301      	movs	r3, #1
 800672a:	4652      	mov	r2, sl
 800672c:	4641      	mov	r1, r8
 800672e:	4638      	mov	r0, r7
 8006730:	47c8      	blx	r9
 8006732:	3001      	adds	r0, #1
 8006734:	d103      	bne.n	800673e <_printf_common+0xb6>
 8006736:	f04f 30ff 	mov.w	r0, #4294967295
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	3501      	adds	r5, #1
 8006740:	e7c1      	b.n	80066c6 <_printf_common+0x3e>
 8006742:	2030      	movs	r0, #48	@ 0x30
 8006744:	18e1      	adds	r1, r4, r3
 8006746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006750:	4422      	add	r2, r4
 8006752:	3302      	adds	r3, #2
 8006754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006758:	e7c2      	b.n	80066e0 <_printf_common+0x58>
 800675a:	2301      	movs	r3, #1
 800675c:	4622      	mov	r2, r4
 800675e:	4641      	mov	r1, r8
 8006760:	4638      	mov	r0, r7
 8006762:	47c8      	blx	r9
 8006764:	3001      	adds	r0, #1
 8006766:	d0e6      	beq.n	8006736 <_printf_common+0xae>
 8006768:	3601      	adds	r6, #1
 800676a:	e7d9      	b.n	8006720 <_printf_common+0x98>

0800676c <_printf_i>:
 800676c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	7e0f      	ldrb	r7, [r1, #24]
 8006772:	4691      	mov	r9, r2
 8006774:	2f78      	cmp	r7, #120	@ 0x78
 8006776:	4680      	mov	r8, r0
 8006778:	460c      	mov	r4, r1
 800677a:	469a      	mov	sl, r3
 800677c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800677e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006782:	d807      	bhi.n	8006794 <_printf_i+0x28>
 8006784:	2f62      	cmp	r7, #98	@ 0x62
 8006786:	d80a      	bhi.n	800679e <_printf_i+0x32>
 8006788:	2f00      	cmp	r7, #0
 800678a:	f000 80d3 	beq.w	8006934 <_printf_i+0x1c8>
 800678e:	2f58      	cmp	r7, #88	@ 0x58
 8006790:	f000 80ba 	beq.w	8006908 <_printf_i+0x19c>
 8006794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800679c:	e03a      	b.n	8006814 <_printf_i+0xa8>
 800679e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067a2:	2b15      	cmp	r3, #21
 80067a4:	d8f6      	bhi.n	8006794 <_printf_i+0x28>
 80067a6:	a101      	add	r1, pc, #4	@ (adr r1, 80067ac <_printf_i+0x40>)
 80067a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067ac:	08006805 	.word	0x08006805
 80067b0:	08006819 	.word	0x08006819
 80067b4:	08006795 	.word	0x08006795
 80067b8:	08006795 	.word	0x08006795
 80067bc:	08006795 	.word	0x08006795
 80067c0:	08006795 	.word	0x08006795
 80067c4:	08006819 	.word	0x08006819
 80067c8:	08006795 	.word	0x08006795
 80067cc:	08006795 	.word	0x08006795
 80067d0:	08006795 	.word	0x08006795
 80067d4:	08006795 	.word	0x08006795
 80067d8:	0800691b 	.word	0x0800691b
 80067dc:	08006843 	.word	0x08006843
 80067e0:	080068d5 	.word	0x080068d5
 80067e4:	08006795 	.word	0x08006795
 80067e8:	08006795 	.word	0x08006795
 80067ec:	0800693d 	.word	0x0800693d
 80067f0:	08006795 	.word	0x08006795
 80067f4:	08006843 	.word	0x08006843
 80067f8:	08006795 	.word	0x08006795
 80067fc:	08006795 	.word	0x08006795
 8006800:	080068dd 	.word	0x080068dd
 8006804:	6833      	ldr	r3, [r6, #0]
 8006806:	1d1a      	adds	r2, r3, #4
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6032      	str	r2, [r6, #0]
 800680c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006814:	2301      	movs	r3, #1
 8006816:	e09e      	b.n	8006956 <_printf_i+0x1ea>
 8006818:	6833      	ldr	r3, [r6, #0]
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	1d19      	adds	r1, r3, #4
 800681e:	6031      	str	r1, [r6, #0]
 8006820:	0606      	lsls	r6, r0, #24
 8006822:	d501      	bpl.n	8006828 <_printf_i+0xbc>
 8006824:	681d      	ldr	r5, [r3, #0]
 8006826:	e003      	b.n	8006830 <_printf_i+0xc4>
 8006828:	0645      	lsls	r5, r0, #25
 800682a:	d5fb      	bpl.n	8006824 <_printf_i+0xb8>
 800682c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006830:	2d00      	cmp	r5, #0
 8006832:	da03      	bge.n	800683c <_printf_i+0xd0>
 8006834:	232d      	movs	r3, #45	@ 0x2d
 8006836:	426d      	negs	r5, r5
 8006838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800683c:	230a      	movs	r3, #10
 800683e:	4859      	ldr	r0, [pc, #356]	@ (80069a4 <_printf_i+0x238>)
 8006840:	e011      	b.n	8006866 <_printf_i+0xfa>
 8006842:	6821      	ldr	r1, [r4, #0]
 8006844:	6833      	ldr	r3, [r6, #0]
 8006846:	0608      	lsls	r0, r1, #24
 8006848:	f853 5b04 	ldr.w	r5, [r3], #4
 800684c:	d402      	bmi.n	8006854 <_printf_i+0xe8>
 800684e:	0649      	lsls	r1, r1, #25
 8006850:	bf48      	it	mi
 8006852:	b2ad      	uxthmi	r5, r5
 8006854:	2f6f      	cmp	r7, #111	@ 0x6f
 8006856:	6033      	str	r3, [r6, #0]
 8006858:	bf14      	ite	ne
 800685a:	230a      	movne	r3, #10
 800685c:	2308      	moveq	r3, #8
 800685e:	4851      	ldr	r0, [pc, #324]	@ (80069a4 <_printf_i+0x238>)
 8006860:	2100      	movs	r1, #0
 8006862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006866:	6866      	ldr	r6, [r4, #4]
 8006868:	2e00      	cmp	r6, #0
 800686a:	bfa8      	it	ge
 800686c:	6821      	ldrge	r1, [r4, #0]
 800686e:	60a6      	str	r6, [r4, #8]
 8006870:	bfa4      	itt	ge
 8006872:	f021 0104 	bicge.w	r1, r1, #4
 8006876:	6021      	strge	r1, [r4, #0]
 8006878:	b90d      	cbnz	r5, 800687e <_printf_i+0x112>
 800687a:	2e00      	cmp	r6, #0
 800687c:	d04b      	beq.n	8006916 <_printf_i+0x1aa>
 800687e:	4616      	mov	r6, r2
 8006880:	fbb5 f1f3 	udiv	r1, r5, r3
 8006884:	fb03 5711 	mls	r7, r3, r1, r5
 8006888:	5dc7      	ldrb	r7, [r0, r7]
 800688a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800688e:	462f      	mov	r7, r5
 8006890:	42bb      	cmp	r3, r7
 8006892:	460d      	mov	r5, r1
 8006894:	d9f4      	bls.n	8006880 <_printf_i+0x114>
 8006896:	2b08      	cmp	r3, #8
 8006898:	d10b      	bne.n	80068b2 <_printf_i+0x146>
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	07df      	lsls	r7, r3, #31
 800689e:	d508      	bpl.n	80068b2 <_printf_i+0x146>
 80068a0:	6923      	ldr	r3, [r4, #16]
 80068a2:	6861      	ldr	r1, [r4, #4]
 80068a4:	4299      	cmp	r1, r3
 80068a6:	bfde      	ittt	le
 80068a8:	2330      	movle	r3, #48	@ 0x30
 80068aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068b2:	1b92      	subs	r2, r2, r6
 80068b4:	6122      	str	r2, [r4, #16]
 80068b6:	464b      	mov	r3, r9
 80068b8:	4621      	mov	r1, r4
 80068ba:	4640      	mov	r0, r8
 80068bc:	f8cd a000 	str.w	sl, [sp]
 80068c0:	aa03      	add	r2, sp, #12
 80068c2:	f7ff fee1 	bl	8006688 <_printf_common>
 80068c6:	3001      	adds	r0, #1
 80068c8:	d14a      	bne.n	8006960 <_printf_i+0x1f4>
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295
 80068ce:	b004      	add	sp, #16
 80068d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d4:	6823      	ldr	r3, [r4, #0]
 80068d6:	f043 0320 	orr.w	r3, r3, #32
 80068da:	6023      	str	r3, [r4, #0]
 80068dc:	2778      	movs	r7, #120	@ 0x78
 80068de:	4832      	ldr	r0, [pc, #200]	@ (80069a8 <_printf_i+0x23c>)
 80068e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	6831      	ldr	r1, [r6, #0]
 80068e8:	061f      	lsls	r7, r3, #24
 80068ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80068ee:	d402      	bmi.n	80068f6 <_printf_i+0x18a>
 80068f0:	065f      	lsls	r7, r3, #25
 80068f2:	bf48      	it	mi
 80068f4:	b2ad      	uxthmi	r5, r5
 80068f6:	6031      	str	r1, [r6, #0]
 80068f8:	07d9      	lsls	r1, r3, #31
 80068fa:	bf44      	itt	mi
 80068fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006900:	6023      	strmi	r3, [r4, #0]
 8006902:	b11d      	cbz	r5, 800690c <_printf_i+0x1a0>
 8006904:	2310      	movs	r3, #16
 8006906:	e7ab      	b.n	8006860 <_printf_i+0xf4>
 8006908:	4826      	ldr	r0, [pc, #152]	@ (80069a4 <_printf_i+0x238>)
 800690a:	e7e9      	b.n	80068e0 <_printf_i+0x174>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	f023 0320 	bic.w	r3, r3, #32
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	e7f6      	b.n	8006904 <_printf_i+0x198>
 8006916:	4616      	mov	r6, r2
 8006918:	e7bd      	b.n	8006896 <_printf_i+0x12a>
 800691a:	6833      	ldr	r3, [r6, #0]
 800691c:	6825      	ldr	r5, [r4, #0]
 800691e:	1d18      	adds	r0, r3, #4
 8006920:	6961      	ldr	r1, [r4, #20]
 8006922:	6030      	str	r0, [r6, #0]
 8006924:	062e      	lsls	r6, r5, #24
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	d501      	bpl.n	800692e <_printf_i+0x1c2>
 800692a:	6019      	str	r1, [r3, #0]
 800692c:	e002      	b.n	8006934 <_printf_i+0x1c8>
 800692e:	0668      	lsls	r0, r5, #25
 8006930:	d5fb      	bpl.n	800692a <_printf_i+0x1be>
 8006932:	8019      	strh	r1, [r3, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	4616      	mov	r6, r2
 8006938:	6123      	str	r3, [r4, #16]
 800693a:	e7bc      	b.n	80068b6 <_printf_i+0x14a>
 800693c:	6833      	ldr	r3, [r6, #0]
 800693e:	2100      	movs	r1, #0
 8006940:	1d1a      	adds	r2, r3, #4
 8006942:	6032      	str	r2, [r6, #0]
 8006944:	681e      	ldr	r6, [r3, #0]
 8006946:	6862      	ldr	r2, [r4, #4]
 8006948:	4630      	mov	r0, r6
 800694a:	f000 f859 	bl	8006a00 <memchr>
 800694e:	b108      	cbz	r0, 8006954 <_printf_i+0x1e8>
 8006950:	1b80      	subs	r0, r0, r6
 8006952:	6060      	str	r0, [r4, #4]
 8006954:	6863      	ldr	r3, [r4, #4]
 8006956:	6123      	str	r3, [r4, #16]
 8006958:	2300      	movs	r3, #0
 800695a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800695e:	e7aa      	b.n	80068b6 <_printf_i+0x14a>
 8006960:	4632      	mov	r2, r6
 8006962:	4649      	mov	r1, r9
 8006964:	4640      	mov	r0, r8
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	47d0      	blx	sl
 800696a:	3001      	adds	r0, #1
 800696c:	d0ad      	beq.n	80068ca <_printf_i+0x15e>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	079b      	lsls	r3, r3, #30
 8006972:	d413      	bmi.n	800699c <_printf_i+0x230>
 8006974:	68e0      	ldr	r0, [r4, #12]
 8006976:	9b03      	ldr	r3, [sp, #12]
 8006978:	4298      	cmp	r0, r3
 800697a:	bfb8      	it	lt
 800697c:	4618      	movlt	r0, r3
 800697e:	e7a6      	b.n	80068ce <_printf_i+0x162>
 8006980:	2301      	movs	r3, #1
 8006982:	4632      	mov	r2, r6
 8006984:	4649      	mov	r1, r9
 8006986:	4640      	mov	r0, r8
 8006988:	47d0      	blx	sl
 800698a:	3001      	adds	r0, #1
 800698c:	d09d      	beq.n	80068ca <_printf_i+0x15e>
 800698e:	3501      	adds	r5, #1
 8006990:	68e3      	ldr	r3, [r4, #12]
 8006992:	9903      	ldr	r1, [sp, #12]
 8006994:	1a5b      	subs	r3, r3, r1
 8006996:	42ab      	cmp	r3, r5
 8006998:	dcf2      	bgt.n	8006980 <_printf_i+0x214>
 800699a:	e7eb      	b.n	8006974 <_printf_i+0x208>
 800699c:	2500      	movs	r5, #0
 800699e:	f104 0619 	add.w	r6, r4, #25
 80069a2:	e7f5      	b.n	8006990 <_printf_i+0x224>
 80069a4:	08006f6c 	.word	0x08006f6c
 80069a8:	08006f7d 	.word	0x08006f7d

080069ac <memmove>:
 80069ac:	4288      	cmp	r0, r1
 80069ae:	b510      	push	{r4, lr}
 80069b0:	eb01 0402 	add.w	r4, r1, r2
 80069b4:	d902      	bls.n	80069bc <memmove+0x10>
 80069b6:	4284      	cmp	r4, r0
 80069b8:	4623      	mov	r3, r4
 80069ba:	d807      	bhi.n	80069cc <memmove+0x20>
 80069bc:	1e43      	subs	r3, r0, #1
 80069be:	42a1      	cmp	r1, r4
 80069c0:	d008      	beq.n	80069d4 <memmove+0x28>
 80069c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069ca:	e7f8      	b.n	80069be <memmove+0x12>
 80069cc:	4601      	mov	r1, r0
 80069ce:	4402      	add	r2, r0
 80069d0:	428a      	cmp	r2, r1
 80069d2:	d100      	bne.n	80069d6 <memmove+0x2a>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069de:	e7f7      	b.n	80069d0 <memmove+0x24>

080069e0 <_sbrk_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	2300      	movs	r3, #0
 80069e4:	4d05      	ldr	r5, [pc, #20]	@ (80069fc <_sbrk_r+0x1c>)
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	f7fb fb5a 	bl	80020a4 <_sbrk>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_sbrk_r+0x1a>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_sbrk_r+0x1a>
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	20000344 	.word	0x20000344

08006a00 <memchr>:
 8006a00:	4603      	mov	r3, r0
 8006a02:	b510      	push	{r4, lr}
 8006a04:	b2c9      	uxtb	r1, r1
 8006a06:	4402      	add	r2, r0
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	d101      	bne.n	8006a12 <memchr+0x12>
 8006a0e:	2000      	movs	r0, #0
 8006a10:	e003      	b.n	8006a1a <memchr+0x1a>
 8006a12:	7804      	ldrb	r4, [r0, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	428c      	cmp	r4, r1
 8006a18:	d1f6      	bne.n	8006a08 <memchr+0x8>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <memcpy>:
 8006a1c:	440a      	add	r2, r1
 8006a1e:	4291      	cmp	r1, r2
 8006a20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a24:	d100      	bne.n	8006a28 <memcpy+0xc>
 8006a26:	4770      	bx	lr
 8006a28:	b510      	push	{r4, lr}
 8006a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a2e:	4291      	cmp	r1, r2
 8006a30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a34:	d1f9      	bne.n	8006a2a <memcpy+0xe>
 8006a36:	bd10      	pop	{r4, pc}

08006a38 <_realloc_r>:
 8006a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	4615      	mov	r5, r2
 8006a40:	460c      	mov	r4, r1
 8006a42:	b921      	cbnz	r1, 8006a4e <_realloc_r+0x16>
 8006a44:	4611      	mov	r1, r2
 8006a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4a:	f7ff bc39 	b.w	80062c0 <_malloc_r>
 8006a4e:	b92a      	cbnz	r2, 8006a5c <_realloc_r+0x24>
 8006a50:	f7ff fbcc 	bl	80061ec <_free_r>
 8006a54:	2400      	movs	r4, #0
 8006a56:	4620      	mov	r0, r4
 8006a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a5c:	f000 f81a 	bl	8006a94 <_malloc_usable_size_r>
 8006a60:	4285      	cmp	r5, r0
 8006a62:	4606      	mov	r6, r0
 8006a64:	d802      	bhi.n	8006a6c <_realloc_r+0x34>
 8006a66:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006a6a:	d8f4      	bhi.n	8006a56 <_realloc_r+0x1e>
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f7ff fc26 	bl	80062c0 <_malloc_r>
 8006a74:	4607      	mov	r7, r0
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d0ec      	beq.n	8006a54 <_realloc_r+0x1c>
 8006a7a:	42b5      	cmp	r5, r6
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	4621      	mov	r1, r4
 8006a80:	bf28      	it	cs
 8006a82:	4632      	movcs	r2, r6
 8006a84:	f7ff ffca 	bl	8006a1c <memcpy>
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	f7ff fbae 	bl	80061ec <_free_r>
 8006a90:	463c      	mov	r4, r7
 8006a92:	e7e0      	b.n	8006a56 <_realloc_r+0x1e>

08006a94 <_malloc_usable_size_r>:
 8006a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a98:	1f18      	subs	r0, r3, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bfbc      	itt	lt
 8006a9e:	580b      	ldrlt	r3, [r1, r0]
 8006aa0:	18c0      	addlt	r0, r0, r3
 8006aa2:	4770      	bx	lr

08006aa4 <_init>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr

08006ab0 <_fini>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr
