
EEPROM_at2402_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000325c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033f8  080033f8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080033f8  080033f8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033f8  080033f8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033f8  080033f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  2000005c  0800345c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  0800345c  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000935e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001623  00000000  00000000  00029426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d8  00000000  00000000  0002aa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f0  00000000  00000000  0002b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e8d  00000000  00000000  0002ba18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b6a4  00000000  00000000  000428a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084006  00000000  00000000  0004df49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000296c  00000000  00000000  000d1f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000d48bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003350 	.word	0x08003350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003350 	.word	0x08003350

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b092      	sub	sp, #72	; 0x48
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fadd 	bl	8000720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f87b 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f913 	bl	8000394 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016e:	f000 f8e7 	bl	8000340 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000172:	f000 f8b7 	bl	80002e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t chipAddress = 0xA0; // 0b1010000 7 bit address
 8000176:	23a0      	movs	r3, #160	; 0xa0
 8000178:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  //uint8_t addressWrite = (chipAddress | (0<<0)); // I2C tx/rx functions already change the R/W bit!!
  //uint8_t addressRead = (chipAddress | (1<<0));

  uint8_t dataReceive[10];
  uint8_t dummyByte[1] = {0x00};
 800017c:	2300      	movs	r3, #0
 800017e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  // welcome message
  char msg[] = "Hello I2C eeprom\r\n";
 8000182:	4b32      	ldr	r3, [pc, #200]	; (800024c <main+0xf0>)
 8000184:	f107 041c 	add.w	r4, r7, #28
 8000188:	461d      	mov	r5, r3
 800018a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800018c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800018e:	682b      	ldr	r3, [r5, #0]
 8000190:	461a      	mov	r2, r3
 8000192:	8022      	strh	r2, [r4, #0]
 8000194:	3402      	adds	r4, #2
 8000196:	0c1b      	lsrs	r3, r3, #16
 8000198:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 800019a:	f107 031c 	add.w	r3, r7, #28
 800019e:	4618      	mov	r0, r3
 80001a0:	f7ff ffd4 	bl	800014c <strlen>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	f107 011c 	add.w	r1, r7, #28
 80001ac:	f04f 33ff 	mov.w	r3, #4294967295
 80001b0:	4827      	ldr	r0, [pc, #156]	; (8000250 <main+0xf4>)
 80001b2:	f002 fa9b 	bl	80026ec <HAL_UART_Transmit>
//  HAL_I2C_Master_Receive(&hi2c1, addressRead, dataReceive, 1, HAL_MAX_DELAY);
//  HAL_Delay(10);
//  HAL_UART_Transmit(&huart2, dataReceive, 1, HAL_MAX_DELAY);

  // store 2 bytes starting in address 0x00
  uint8_t dataByte[3] = {0x00, 5, 12}; // store 5 in memory 0x00 and 12 in (n+1)= 0x01
 80001b6:	4a27      	ldr	r2, [pc, #156]	; (8000254 <main+0xf8>)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	6812      	ldr	r2, [r2, #0]
 80001be:	4611      	mov	r1, r2
 80001c0:	8019      	strh	r1, [r3, #0]
 80001c2:	3302      	adds	r3, #2
 80001c4:	0c12      	lsrs	r2, r2, #16
 80001c6:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, chipAddress , dataByte, 3, HAL_MAX_DELAY); // send word address, value
 80001c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80001cc:	b299      	uxth	r1, r3
 80001ce:	f107 0218 	add.w	r2, r7, #24
 80001d2:	f04f 33ff 	mov.w	r3, #4294967295
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	2303      	movs	r3, #3
 80001da:	481f      	ldr	r0, [pc, #124]	; (8000258 <main+0xfc>)
 80001dc:	f000 ff36 	bl	800104c <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 80001e0:	200a      	movs	r0, #10
 80001e2:	f000 faff 	bl	80007e4 <HAL_Delay>

  // read 2 bytes from data address 0x00, 0x01
  uint8_t startAddress[1] = {0x00};
 80001e6:	2300      	movs	r3, #0
 80001e8:	753b      	strb	r3, [r7, #20]
  HAL_I2C_Master_Transmit(&hi2c1, chipAddress , startAddress, 1, HAL_MAX_DELAY); // dummy write with word address 0x00 as starting address
 80001ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80001ee:	b299      	uxth	r1, r3
 80001f0:	f107 0214 	add.w	r2, r7, #20
 80001f4:	f04f 33ff 	mov.w	r3, #4294967295
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2301      	movs	r3, #1
 80001fc:	4816      	ldr	r0, [pc, #88]	; (8000258 <main+0xfc>)
 80001fe:	f000 ff25 	bl	800104c <HAL_I2C_Master_Transmit>
  HAL_Delay(10);
 8000202:	200a      	movs	r0, #10
 8000204:	f000 faee 	bl	80007e4 <HAL_Delay>
  HAL_I2C_Master_Receive(&hi2c1, chipAddress, dataReceive, 2, HAL_MAX_DELAY);
 8000208:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800020c:	b299      	uxth	r1, r3
 800020e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000212:	f04f 33ff 	mov.w	r3, #4294967295
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	2302      	movs	r3, #2
 800021a:	480f      	ldr	r0, [pc, #60]	; (8000258 <main+0xfc>)
 800021c:	f001 f814 	bl	8001248 <HAL_I2C_Master_Receive>

  char output[20];
  sprintf(output,"Stored values: %i, %i\r\n", dataReceive[0], dataReceive[1]);
 8000220:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000224:	461a      	mov	r2, r3
 8000226:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800022a:	4638      	mov	r0, r7
 800022c:	490b      	ldr	r1, [pc, #44]	; (800025c <main+0x100>)
 800022e:	f002 fbdd 	bl	80029ec <siprintf>
  HAL_UART_Transmit(&huart2, output, strlen(output), HAL_MAX_DELAY);
 8000232:	463b      	mov	r3, r7
 8000234:	4618      	mov	r0, r3
 8000236:	f7ff ff89 	bl	800014c <strlen>
 800023a:	4603      	mov	r3, r0
 800023c:	b29a      	uxth	r2, r3
 800023e:	4639      	mov	r1, r7
 8000240:	f04f 33ff 	mov.w	r3, #4294967295
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <main+0xf4>)
 8000246:	f002 fa51 	bl	80026ec <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024a:	e7fe      	b.n	800024a <main+0xee>
 800024c:	08003380 	.word	0x08003380
 8000250:	200000cc 	.word	0x200000cc
 8000254:	08003394 	.word	0x08003394
 8000258:	20000078 	.word	0x20000078
 800025c:	08003368 	.word	0x08003368

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b090      	sub	sp, #64	; 0x40
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0318 	add.w	r3, r7, #24
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fbdc 	bl	8002a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]
 8000280:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000282:	2302      	movs	r3, #2
 8000284:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000286:	2301      	movs	r3, #1
 8000288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	2310      	movs	r3, #16
 800028c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028e:	2302      	movs	r3, #2
 8000290:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000292:	2300      	movs	r3, #0
 8000294:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000296:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800029a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fdc3 	bl	8001e2c <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002ac:	f000 f8e0 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2302      	movs	r3, #2
 80002b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2102      	movs	r1, #2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 f830 	bl	8002330 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002d6:	f000 f8cb 	bl	8000470 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3740      	adds	r7, #64	; 0x40
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <MX_I2C1_Init+0x50>)
 80002ea:	4a13      	ldr	r2, [pc, #76]	; (8000338 <MX_I2C1_Init+0x54>)
 80002ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002ee:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_I2C1_Init+0x50>)
 80002f0:	4a12      	ldr	r2, [pc, #72]	; (800033c <MX_I2C1_Init+0x58>)
 80002f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <MX_I2C1_Init+0x50>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_I2C1_Init+0x50>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_I2C1_Init+0x50>)
 8000302:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000306:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000308:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <MX_I2C1_Init+0x50>)
 800030a:	2200      	movs	r2, #0
 800030c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_I2C1_Init+0x50>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <MX_I2C1_Init+0x50>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_I2C1_Init+0x50>)
 800031c:	2200      	movs	r2, #0
 800031e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000320:	4804      	ldr	r0, [pc, #16]	; (8000334 <MX_I2C1_Init+0x50>)
 8000322:	f000 fd4f 	bl	8000dc4 <HAL_I2C_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800032c:	f000 f8a0 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000078 	.word	0x20000078
 8000338:	40005400 	.word	0x40005400
 800033c:	000186a0 	.word	0x000186a0

08000340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000344:	4b11      	ldr	r3, [pc, #68]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000346:	4a12      	ldr	r2, [pc, #72]	; (8000390 <MX_USART2_UART_Init+0x50>)
 8000348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800034a:	4b10      	ldr	r3, [pc, #64]	; (800038c <MX_USART2_UART_Init+0x4c>)
 800034c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000352:	4b0e      	ldr	r3, [pc, #56]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000358:	4b0c      	ldr	r3, [pc, #48]	; (800038c <MX_USART2_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800035e:	4b0b      	ldr	r3, [pc, #44]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000364:	4b09      	ldr	r3, [pc, #36]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000366:	220c      	movs	r2, #12
 8000368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036a:	4b08      	ldr	r3, [pc, #32]	; (800038c <MX_USART2_UART_Init+0x4c>)
 800036c:	2200      	movs	r2, #0
 800036e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000376:	4805      	ldr	r0, [pc, #20]	; (800038c <MX_USART2_UART_Init+0x4c>)
 8000378:	f002 f968 	bl	800264c <HAL_UART_Init>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000382:	f000 f875 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	200000cc 	.word	0x200000cc
 8000390:	40004400 	.word	0x40004400

08000394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b088      	sub	sp, #32
 8000398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	f107 0310 	add.w	r3, r7, #16
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	605a      	str	r2, [r3, #4]
 80003a4:	609a      	str	r2, [r3, #8]
 80003a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a8:	4b2d      	ldr	r3, [pc, #180]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a2c      	ldr	r2, [pc, #176]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003ae:	f043 0310 	orr.w	r3, r3, #16
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b2a      	ldr	r3, [pc, #168]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0310 	and.w	r3, r3, #16
 80003bc:	60fb      	str	r3, [r7, #12]
 80003be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003c0:	4b27      	ldr	r3, [pc, #156]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a26      	ldr	r2, [pc, #152]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b24      	ldr	r3, [pc, #144]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0320 	and.w	r3, r3, #32
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b21      	ldr	r3, [pc, #132]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a20      	ldr	r2, [pc, #128]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b1e      	ldr	r3, [pc, #120]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	607b      	str	r3, [r7, #4]
 80003ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	4b1b      	ldr	r3, [pc, #108]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a1a      	ldr	r2, [pc, #104]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003f6:	f043 0308 	orr.w	r3, r3, #8
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b18      	ldr	r3, [pc, #96]	; (8000460 <MX_GPIO_Init+0xcc>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0308 	and.w	r3, r3, #8
 8000404:	603b      	str	r3, [r7, #0]
 8000406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2120      	movs	r1, #32
 800040c:	4815      	ldr	r0, [pc, #84]	; (8000464 <MX_GPIO_Init+0xd0>)
 800040e:	f000 fc9f 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_GPIO_Init+0xd4>)
 800041a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	4811      	ldr	r0, [pc, #68]	; (800046c <MX_GPIO_Init+0xd8>)
 8000428:	f000 fb0e 	bl	8000a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800042c:	2320      	movs	r3, #32
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	2301      	movs	r3, #1
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	2302      	movs	r3, #2
 800043a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	4808      	ldr	r0, [pc, #32]	; (8000464 <MX_GPIO_Init+0xd0>)
 8000444:	f000 fb00 	bl	8000a48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	2100      	movs	r1, #0
 800044c:	2028      	movs	r0, #40	; 0x28
 800044e:	f000 fac4 	bl	80009da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000452:	2028      	movs	r0, #40	; 0x28
 8000454:	f000 fadd 	bl	8000a12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800
 8000468:	10110000 	.word	0x10110000
 800046c:	40011000 	.word	0x40011000

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	e7fe      	b.n	8000478 <Error_Handler+0x8>
	...

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_MspInit+0x5c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <HAL_MspInit+0x5c>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_MspInit+0x5c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_MspInit+0x5c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <HAL_MspInit+0x5c>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <HAL_MspInit+0x5c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b2:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <HAL_MspInit+0x60>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <HAL_MspInit+0x60>)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010000 	.word	0x40010000

080004e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	; 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a1d      	ldr	r2, [pc, #116]	; (8000570 <HAL_I2C_MspInit+0x90>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d132      	bne.n	8000566 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <HAL_I2C_MspInit+0x94>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <HAL_I2C_MspInit+0x94>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <HAL_I2C_MspInit+0x94>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	613b      	str	r3, [r7, #16]
 8000516:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800051c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800051e:	2312      	movs	r3, #18
 8000520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000522:	2303      	movs	r3, #3
 8000524:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	4619      	mov	r1, r3
 800052c:	4812      	ldr	r0, [pc, #72]	; (8000578 <HAL_I2C_MspInit+0x98>)
 800052e:	f000 fa8b 	bl	8000a48 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_I2C_MspInit+0x9c>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	627b      	str	r3, [r7, #36]	; 0x24
 8000538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800053e:	627b      	str	r3, [r7, #36]	; 0x24
 8000540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000542:	f043 0302 	orr.w	r3, r3, #2
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <HAL_I2C_MspInit+0x9c>)
 800054a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_I2C_MspInit+0x94>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <HAL_I2C_MspInit+0x94>)
 8000554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_I2C_MspInit+0x94>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000566:	bf00      	nop
 8000568:	3728      	adds	r7, #40	; 0x28
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40005400 	.word	0x40005400
 8000574:	40021000 	.word	0x40021000
 8000578:	40010c00 	.word	0x40010c00
 800057c:	40010000 	.word	0x40010000

08000580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <HAL_UART_MspInit+0x70>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d123      	bne.n	80005e8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_UART_MspInit+0x74>)
 80005a2:	69db      	ldr	r3, [r3, #28]
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <HAL_UART_MspInit+0x74>)
 80005a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005aa:	61d3      	str	r3, [r2, #28]
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_UART_MspInit+0x74>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_UART_MspInit+0x74>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <HAL_UART_MspInit+0x74>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <HAL_UART_MspInit+0x74>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005d0:	230c      	movs	r3, #12
 80005d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d4:	2302      	movs	r3, #2
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <HAL_UART_MspInit+0x78>)
 80005e4:	f000 fa30 	bl	8000a48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40004400 	.word	0x40004400
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010800 	.word	0x40010800

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr

08000626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000642:	f000 f8b3 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800064e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000652:	f000 fb95 	bl	8000d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000664:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <_sbrk+0x5c>)
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <_sbrk+0x60>)
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <_sbrk+0x64>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <_sbrk+0x64>)
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <_sbrk+0x68>)
 800067c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	693a      	ldr	r2, [r7, #16]
 8000688:	429a      	cmp	r2, r3
 800068a:	d207      	bcs.n	800069c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800068c:	f002 f9d6 	bl	8002a3c <__errno>
 8000690:	4603      	mov	r3, r0
 8000692:	220c      	movs	r2, #12
 8000694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	e009      	b.n	80006b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <_sbrk+0x64>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <_sbrk+0x64>)
 80006ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ae:	68fb      	ldr	r3, [r7, #12]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20005000 	.word	0x20005000
 80006bc:	00000400 	.word	0x00000400
 80006c0:	20000114 	.word	0x20000114
 80006c4:	20000268 	.word	0x20000268

080006c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d4:	f7ff fff8 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006da:	490c      	ldr	r1, [pc, #48]	; (800070c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006dc:	4a0c      	ldr	r2, [pc, #48]	; (8000710 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a09      	ldr	r2, [pc, #36]	; (8000714 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006f0:	4c09      	ldr	r4, [pc, #36]	; (8000718 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fe:	f002 f9a3 	bl	8002a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff fd2b 	bl	800015c <main>
  bx lr
 8000706:	4770      	bx	lr
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000710:	08003400 	.word	0x08003400
  ldr r2, =_sbss
 8000714:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000718:	20000264 	.word	0x20000264

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>
	...

08000720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <HAL_Init+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <HAL_Init+0x28>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000730:	2003      	movs	r0, #3
 8000732:	f000 f947 	bl	80009c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f808 	bl	800074c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800073c:	f7ff fe9e 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000740:	2300      	movs	r3, #0
}
 8000742:	4618      	mov	r0, r3
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40022000 	.word	0x40022000

0800074c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x54>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_InitTick+0x58>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000762:	fbb3 f3f1 	udiv	r3, r3, r1
 8000766:	fbb2 f3f3 	udiv	r3, r2, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f95f 	bl	8000a2e <HAL_SYSTICK_Config>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e00e      	b.n	8000798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b0f      	cmp	r3, #15
 800077e:	d80a      	bhi.n	8000796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f000 f927 	bl	80009da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <HAL_InitTick+0x5c>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000792:	2300      	movs	r3, #0
 8000794:	e000      	b.n	8000798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
}
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000008 	.word	0x20000008
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b0:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <HAL_IncTick+0x1c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_IncTick+0x20>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a03      	ldr	r2, [pc, #12]	; (80007cc <HAL_IncTick+0x20>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000118 	.word	0x20000118

080007d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <HAL_GetTick+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000118 	.word	0x20000118

080007e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007ec:	f7ff fff0 	bl	80007d0 <HAL_GetTick>
 80007f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d005      	beq.n	800080a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_Delay+0x44>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	461a      	mov	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4413      	add	r3, r2
 8000808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800080a:	bf00      	nop
 800080c:	f7ff ffe0 	bl	80007d0 <HAL_GetTick>
 8000810:	4602      	mov	r2, r0
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	429a      	cmp	r2, r3
 800081a:	d8f7      	bhi.n	800080c <HAL_Delay+0x28>
  {
  }
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000008 	.word	0x20000008

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	db0b      	blt.n	80008ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	f003 021f 	and.w	r2, r3, #31
 80008a8:	4906      	ldr	r1, [pc, #24]	; (80008c4 <__NVIC_EnableIRQ+0x34>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	095b      	lsrs	r3, r3, #5
 80008b0:	2001      	movs	r0, #1
 80008b2:	fa00 f202 	lsl.w	r2, r0, r2
 80008b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	; 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000990:	d301      	bcc.n	8000996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000992:	2301      	movs	r3, #1
 8000994:	e00f      	b.n	80009b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <SysTick_Config+0x40>)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800099e:	210f      	movs	r1, #15
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f7ff ff90 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <SysTick_Config+0x40>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ae:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <SysTick_Config+0x40>)
 80009b0:	2207      	movs	r2, #7
 80009b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	e000e010 	.word	0xe000e010

080009c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff2d 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009da:	b580      	push	{r7, lr}
 80009dc:	b086      	sub	sp, #24
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009ec:	f7ff ff42 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	68b9      	ldr	r1, [r7, #8]
 80009f6:	6978      	ldr	r0, [r7, #20]
 80009f8:	f7ff ff90 	bl	800091c <NVIC_EncodePriority>
 80009fc:	4602      	mov	r2, r0
 80009fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a02:	4611      	mov	r1, r2
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff5f 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff35 	bl	8000890 <__NVIC_EnableIRQ>
}
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffa2 	bl	8000980 <SysTick_Config>
 8000a3c:	4603      	mov	r3, r0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b08b      	sub	sp, #44	; 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e169      	b.n	8000d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	f040 8158 	bne.w	8000d2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a9a      	ldr	r2, [pc, #616]	; (8000ce8 <HAL_GPIO_Init+0x2a0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d05e      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a84:	4a98      	ldr	r2, [pc, #608]	; (8000ce8 <HAL_GPIO_Init+0x2a0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d875      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000a8a:	4a98      	ldr	r2, [pc, #608]	; (8000cec <HAL_GPIO_Init+0x2a4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d058      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a90:	4a96      	ldr	r2, [pc, #600]	; (8000cec <HAL_GPIO_Init+0x2a4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d86f      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000a96:	4a96      	ldr	r2, [pc, #600]	; (8000cf0 <HAL_GPIO_Init+0x2a8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d052      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a9c:	4a94      	ldr	r2, [pc, #592]	; (8000cf0 <HAL_GPIO_Init+0x2a8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d869      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aa2:	4a94      	ldr	r2, [pc, #592]	; (8000cf4 <HAL_GPIO_Init+0x2ac>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d04c      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000aa8:	4a92      	ldr	r2, [pc, #584]	; (8000cf4 <HAL_GPIO_Init+0x2ac>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d863      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aae:	4a92      	ldr	r2, [pc, #584]	; (8000cf8 <HAL_GPIO_Init+0x2b0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d046      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a90      	ldr	r2, [pc, #576]	; (8000cf8 <HAL_GPIO_Init+0x2b0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d85d      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aba:	2b12      	cmp	r3, #18
 8000abc:	d82a      	bhi.n	8000b14 <HAL_GPIO_Init+0xcc>
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d859      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000ac2:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <HAL_GPIO_Init+0x80>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000b43 	.word	0x08000b43
 8000acc:	08000b1d 	.word	0x08000b1d
 8000ad0:	08000b2f 	.word	0x08000b2f
 8000ad4:	08000b71 	.word	0x08000b71
 8000ad8:	08000b77 	.word	0x08000b77
 8000adc:	08000b77 	.word	0x08000b77
 8000ae0:	08000b77 	.word	0x08000b77
 8000ae4:	08000b77 	.word	0x08000b77
 8000ae8:	08000b77 	.word	0x08000b77
 8000aec:	08000b77 	.word	0x08000b77
 8000af0:	08000b77 	.word	0x08000b77
 8000af4:	08000b77 	.word	0x08000b77
 8000af8:	08000b77 	.word	0x08000b77
 8000afc:	08000b77 	.word	0x08000b77
 8000b00:	08000b77 	.word	0x08000b77
 8000b04:	08000b77 	.word	0x08000b77
 8000b08:	08000b77 	.word	0x08000b77
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b39 	.word	0x08000b39
 8000b14:	4a79      	ldr	r2, [pc, #484]	; (8000cfc <HAL_GPIO_Init+0x2b4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d013      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b1a:	e02c      	b.n	8000b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e029      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e024      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	3308      	adds	r3, #8
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e01f      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	330c      	adds	r3, #12
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e01a      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e013      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d105      	bne.n	8000b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	611a      	str	r2, [r3, #16]
          break;
 8000b62:	e009      	b.n	8000b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b64:	2308      	movs	r3, #8
 8000b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	615a      	str	r2, [r3, #20]
          break;
 8000b6e:	e003      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e000      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          break;
 8000b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2bff      	cmp	r3, #255	; 0xff
 8000b7c:	d801      	bhi.n	8000b82 <HAL_GPIO_Init+0x13a>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	e001      	b.n	8000b86 <HAL_GPIO_Init+0x13e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3304      	adds	r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2bff      	cmp	r3, #255	; 0xff
 8000b8c:	d802      	bhi.n	8000b94 <HAL_GPIO_Init+0x14c>
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	e002      	b.n	8000b9a <HAL_GPIO_Init+0x152>
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	3b08      	subs	r3, #8
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	401a      	ands	r2, r3
 8000bac:	6a39      	ldr	r1, [r7, #32]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 80b1 	beq.w	8000d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc8:	4b4d      	ldr	r3, [pc, #308]	; (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a4c      	ldr	r2, [pc, #304]	; (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b4a      	ldr	r3, [pc, #296]	; (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be0:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <HAL_GPIO_Init+0x2bc>)
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	3302      	adds	r3, #2
 8000be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a40      	ldr	r2, [pc, #256]	; (8000d08 <HAL_GPIO_Init+0x2c0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d013      	beq.n	8000c34 <HAL_GPIO_Init+0x1ec>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a3f      	ldr	r2, [pc, #252]	; (8000d0c <HAL_GPIO_Init+0x2c4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d00d      	beq.n	8000c30 <HAL_GPIO_Init+0x1e8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3e      	ldr	r2, [pc, #248]	; (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d007      	beq.n	8000c2c <HAL_GPIO_Init+0x1e4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3d      	ldr	r2, [pc, #244]	; (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d101      	bne.n	8000c28 <HAL_GPIO_Init+0x1e0>
 8000c24:	2303      	movs	r3, #3
 8000c26:	e006      	b.n	8000c36 <HAL_GPIO_Init+0x1ee>
 8000c28:	2304      	movs	r3, #4
 8000c2a:	e004      	b.n	8000c36 <HAL_GPIO_Init+0x1ee>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e002      	b.n	8000c36 <HAL_GPIO_Init+0x1ee>
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <HAL_GPIO_Init+0x1ee>
 8000c34:	2300      	movs	r3, #0
 8000c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c38:	f002 0203 	and.w	r2, r2, #3
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	4093      	lsls	r3, r2
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c46:	492f      	ldr	r1, [pc, #188]	; (8000d04 <HAL_GPIO_Init+0x2bc>)
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c60:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	492c      	ldr	r1, [pc, #176]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
 8000c6c:	e006      	b.n	8000c7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4928      	ldr	r1, [pc, #160]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c88:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	4922      	ldr	r1, [pc, #136]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60cb      	str	r3, [r1, #12]
 8000c94:	e006      	b.n	8000ca4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	491e      	ldr	r1, [pc, #120]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4918      	ldr	r1, [pc, #96]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
 8000cbc:	e006      	b.n	8000ccc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4914      	ldr	r1, [pc, #80]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d021      	beq.n	8000d1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	490e      	ldr	r1, [pc, #56]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	600b      	str	r3, [r1, #0]
 8000ce4:	e021      	b.n	8000d2a <HAL_GPIO_Init+0x2e2>
 8000ce6:	bf00      	nop
 8000ce8:	10320000 	.word	0x10320000
 8000cec:	10310000 	.word	0x10310000
 8000cf0:	10220000 	.word	0x10220000
 8000cf4:	10210000 	.word	0x10210000
 8000cf8:	10120000 	.word	0x10120000
 8000cfc:	10110000 	.word	0x10110000
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40011000 	.word	0x40011000
 8000d14:	40011400 	.word	0x40011400
 8000d18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_GPIO_Init+0x304>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	4909      	ldr	r1, [pc, #36]	; (8000d4c <HAL_GPIO_Init+0x304>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d36:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f47f ae8e 	bne.w	8000a5c <HAL_GPIO_Init+0x14>
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	372c      	adds	r7, #44	; 0x2c
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	807b      	strh	r3, [r7, #2]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d60:	787b      	ldrb	r3, [r7, #1]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d66:	887a      	ldrh	r2, [r7, #2]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d6c:	e003      	b.n	8000d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	041a      	lsls	r2, r3, #16
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	611a      	str	r2, [r3, #16]
}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d8a:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f806 	bl	8000db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40010400 	.word	0x40010400

08000db0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e12b      	b.n	800102e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d106      	bne.n	8000df0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2200      	movs	r2, #0
 8000de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff fb78 	bl	80004e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2224      	movs	r2, #36	; 0x24
 8000df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f022 0201 	bic.w	r2, r2, #1
 8000e06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e28:	f001 fbca 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8000e2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4a81      	ldr	r2, [pc, #516]	; (8001038 <HAL_I2C_Init+0x274>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d807      	bhi.n	8000e48 <HAL_I2C_Init+0x84>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4a80      	ldr	r2, [pc, #512]	; (800103c <HAL_I2C_Init+0x278>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	bf94      	ite	ls
 8000e40:	2301      	movls	r3, #1
 8000e42:	2300      	movhi	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	e006      	b.n	8000e56 <HAL_I2C_Init+0x92>
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4a7d      	ldr	r2, [pc, #500]	; (8001040 <HAL_I2C_Init+0x27c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	bf94      	ite	ls
 8000e50:	2301      	movls	r3, #1
 8000e52:	2300      	movhi	r3, #0
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e0e7      	b.n	800102e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	4a78      	ldr	r2, [pc, #480]	; (8001044 <HAL_I2C_Init+0x280>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	0c9b      	lsrs	r3, r3, #18
 8000e68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68ba      	ldr	r2, [r7, #8]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4a6a      	ldr	r2, [pc, #424]	; (8001038 <HAL_I2C_Init+0x274>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d802      	bhi.n	8000e98 <HAL_I2C_Init+0xd4>
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	3301      	adds	r3, #1
 8000e96:	e009      	b.n	8000eac <HAL_I2C_Init+0xe8>
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	4a69      	ldr	r2, [pc, #420]	; (8001048 <HAL_I2C_Init+0x284>)
 8000ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	3301      	adds	r3, #1
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	69db      	ldr	r3, [r3, #28]
 8000eba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000ebe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	495c      	ldr	r1, [pc, #368]	; (8001038 <HAL_I2C_Init+0x274>)
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d819      	bhi.n	8000f00 <HAL_I2C_Init+0x13c>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	1e59      	subs	r1, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000eda:	1c59      	adds	r1, r3, #1
 8000edc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00a      	beq.n	8000efc <HAL_I2C_Init+0x138>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1e59      	subs	r1, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000efa:	e051      	b.n	8000fa0 <HAL_I2C_Init+0x1dc>
 8000efc:	2304      	movs	r3, #4
 8000efe:	e04f      	b.n	8000fa0 <HAL_I2C_Init+0x1dc>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d111      	bne.n	8000f2c <HAL_I2C_Init+0x168>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	1e58      	subs	r0, r3, #1
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6859      	ldr	r1, [r3, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	440b      	add	r3, r1
 8000f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf0c      	ite	eq
 8000f24:	2301      	moveq	r3, #1
 8000f26:	2300      	movne	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	e012      	b.n	8000f52 <HAL_I2C_Init+0x18e>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	1e58      	subs	r0, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6859      	ldr	r1, [r3, #4]
 8000f34:	460b      	mov	r3, r1
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	440b      	add	r3, r1
 8000f3a:	0099      	lsls	r1, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f42:	3301      	adds	r3, #1
 8000f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_Init+0x196>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e022      	b.n	8000fa0 <HAL_I2C_Init+0x1dc>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10e      	bne.n	8000f80 <HAL_I2C_Init+0x1bc>
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	1e58      	subs	r0, r3, #1
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6859      	ldr	r1, [r3, #4]
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	440b      	add	r3, r1
 8000f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f74:	3301      	adds	r3, #1
 8000f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f7e:	e00f      	b.n	8000fa0 <HAL_I2C_Init+0x1dc>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	1e58      	subs	r0, r3, #1
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	0099      	lsls	r1, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	6809      	ldr	r1, [r1, #0]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69da      	ldr	r2, [r3, #28]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000fce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	6911      	ldr	r1, [r2, #16]
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	68d2      	ldr	r2, [r2, #12]
 8000fda:	4311      	orrs	r1, r2
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	430b      	orrs	r3, r1
 8000fe2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695a      	ldr	r2, [r3, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2220      	movs	r2, #32
 800101a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	000186a0 	.word	0x000186a0
 800103c:	001e847f 	.word	0x001e847f
 8001040:	003d08ff 	.word	0x003d08ff
 8001044:	431bde83 	.word	0x431bde83
 8001048:	10624dd3 	.word	0x10624dd3

0800104c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af02      	add	r7, sp, #8
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	461a      	mov	r2, r3
 8001058:	460b      	mov	r3, r1
 800105a:	817b      	strh	r3, [r7, #10]
 800105c:	4613      	mov	r3, r2
 800105e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001060:	f7ff fbb6 	bl	80007d0 <HAL_GetTick>
 8001064:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b20      	cmp	r3, #32
 8001070:	f040 80e0 	bne.w	8001234 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2319      	movs	r3, #25
 800107a:	2201      	movs	r2, #1
 800107c:	4970      	ldr	r1, [pc, #448]	; (8001240 <HAL_I2C_Master_Transmit+0x1f4>)
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 fc9e 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800108a:	2302      	movs	r3, #2
 800108c:	e0d3      	b.n	8001236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_I2C_Master_Transmit+0x50>
 8001098:	2302      	movs	r3, #2
 800109a:	e0cc      	b.n	8001236 <HAL_I2C_Master_Transmit+0x1ea>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d007      	beq.n	80010c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0201 	orr.w	r2, r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2221      	movs	r2, #33	; 0x21
 80010d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2210      	movs	r2, #16
 80010de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	893a      	ldrh	r2, [r7, #8]
 80010f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <HAL_I2C_Master_Transmit+0x1f8>)
 8001102:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001104:	8979      	ldrh	r1, [r7, #10]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	6a3a      	ldr	r2, [r7, #32]
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f000 fb08 	bl	8001720 <I2C_MasterRequestWrite>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e08d      	b.n	8001236 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	613b      	str	r3, [r7, #16]
 800112e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001130:	e066      	b.n	8001200 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001132:	697a      	ldr	r2, [r7, #20]
 8001134:	6a39      	ldr	r1, [r7, #32]
 8001136:	68f8      	ldr	r0, [r7, #12]
 8001138:	f000 fd5c 	bl	8001bf4 <I2C_WaitOnTXEFlagUntilTimeout>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00d      	beq.n	800115e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	2b04      	cmp	r3, #4
 8001148:	d107      	bne.n	800115a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001158:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e06b      	b.n	8001236 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001178:	b29b      	uxth	r3, r3
 800117a:	3b01      	subs	r3, #1
 800117c:	b29a      	uxth	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001186:	3b01      	subs	r3, #1
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695b      	ldr	r3, [r3, #20]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b04      	cmp	r3, #4
 800119a:	d11b      	bne.n	80011d4 <HAL_I2C_Master_Transmit+0x188>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d017      	beq.n	80011d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011be:	b29b      	uxth	r3, r3
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011cc:	3b01      	subs	r3, #1
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	6a39      	ldr	r1, [r7, #32]
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 fd53 	bl	8001c84 <I2C_WaitOnBTFFlagUntilTimeout>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00d      	beq.n	8001200 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	2b04      	cmp	r3, #4
 80011ea:	d107      	bne.n	80011fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e01a      	b.n	8001236 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001204:	2b00      	cmp	r3, #0
 8001206:	d194      	bne.n	8001132 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001216:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2220      	movs	r2, #32
 800121c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2200      	movs	r2, #0
 800122c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	e000      	b.n	8001236 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001234:	2302      	movs	r3, #2
  }
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	00100002 	.word	0x00100002
 8001244:	ffff0000 	.word	0xffff0000

08001248 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08c      	sub	sp, #48	; 0x30
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	461a      	mov	r2, r3
 8001254:	460b      	mov	r3, r1
 8001256:	817b      	strh	r3, [r7, #10]
 8001258:	4613      	mov	r3, r2
 800125a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff fab6 	bl	80007d0 <HAL_GetTick>
 8001264:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b20      	cmp	r3, #32
 8001270:	f040 824b 	bne.w	800170a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2319      	movs	r3, #25
 800127a:	2201      	movs	r2, #1
 800127c:	497f      	ldr	r1, [pc, #508]	; (800147c <HAL_I2C_Master_Receive+0x234>)
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 fb9e 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800128a:	2302      	movs	r3, #2
 800128c:	e23e      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_I2C_Master_Receive+0x54>
 8001298:	2302      	movs	r3, #2
 800129a:	e237      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d007      	beq.n	80012c2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2222      	movs	r2, #34	; 0x22
 80012d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2210      	movs	r2, #16
 80012de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	893a      	ldrh	r2, [r7, #8]
 80012f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4a5f      	ldr	r2, [pc, #380]	; (8001480 <HAL_I2C_Master_Receive+0x238>)
 8001302:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001304:	8979      	ldrh	r1, [r7, #10]
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 fa8a 	bl	8001824 <I2C_MasterRequestRead>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e1f8      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131e:	2b00      	cmp	r3, #0
 8001320:	d113      	bne.n	800134a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e1cc      	b.n	80016e4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800134e:	2b01      	cmp	r3, #1
 8001350:	d11e      	bne.n	8001390 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001360:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001362:	b672      	cpsid	i
}
 8001364:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	61bb      	str	r3, [r7, #24]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800138a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800138c:	b662      	cpsie	i
}
 800138e:	e035      	b.n	80013fc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001394:	2b02      	cmp	r3, #2
 8001396:	d11e      	bne.n	80013d6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013d2:	b662      	cpsie	i
}
 80013d4:	e012      	b.n	80013fc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80013fc:	e172      	b.n	80016e4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001402:	2b03      	cmp	r3, #3
 8001404:	f200 811f 	bhi.w	8001646 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140c:	2b01      	cmp	r3, #1
 800140e:	d123      	bne.n	8001458 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 fc7d 	bl	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e173      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800144c:	b29b      	uxth	r3, r3
 800144e:	3b01      	subs	r3, #1
 8001450:	b29a      	uxth	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001456:	e145      	b.n	80016e4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145c:	2b02      	cmp	r3, #2
 800145e:	d152      	bne.n	8001506 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001466:	2200      	movs	r2, #0
 8001468:	4906      	ldr	r1, [pc, #24]	; (8001484 <HAL_I2C_Master_Receive+0x23c>)
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f000 faa8 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d008      	beq.n	8001488 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e148      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
 800147a:	bf00      	nop
 800147c:	00100002 	.word	0x00100002
 8001480:	ffff0000 	.word	0xffff0000
 8001484:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800149a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691a      	ldr	r2, [r3, #16]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80014ce:	b662      	cpsie	i
}
 80014d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001504:	e0ee      	b.n	80016e4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150c:	2200      	movs	r2, #0
 800150e:	4981      	ldr	r1, [pc, #516]	; (8001714 <HAL_I2C_Master_Receive+0x4cc>)
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f000 fa55 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0f5      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800152e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155c:	b29b      	uxth	r3, r3
 800155e:	3b01      	subs	r3, #1
 8001560:	b29a      	uxth	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001566:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <HAL_I2C_Master_Receive+0x4d0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	08db      	lsrs	r3, r3, #3
 800156c:	4a6b      	ldr	r2, [pc, #428]	; (800171c <HAL_I2C_Master_Receive+0x4d4>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0a1a      	lsrs	r2, r3, #8
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00da      	lsls	r2, r3, #3
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	3b01      	subs	r3, #1
 8001584:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d118      	bne.n	80015be <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2220      	movs	r2, #32
 8001596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f043 0220 	orr.w	r2, r3, #32
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015ae:	b662      	cpsie	i
}
 80015b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e0a6      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	d1d9      	bne.n	8001580 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691a      	ldr	r2, [r3, #16]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	3b01      	subs	r3, #1
 8001608:	b29a      	uxth	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800160e:	b662      	cpsie	i
}
 8001610:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162e:	3b01      	subs	r3, #1
 8001630:	b29a      	uxth	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163a:	b29b      	uxth	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001644:	e04e      	b.n	80016e4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fb62 	bl	8001d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e058      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691a      	ldr	r2, [r3, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001676:	3b01      	subs	r3, #1
 8001678:	b29a      	uxth	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001682:	b29b      	uxth	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	f003 0304 	and.w	r3, r3, #4
 8001696:	2b04      	cmp	r3, #4
 8001698:	d124      	bne.n	80016e4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d107      	bne.n	80016b2 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f47f ae88 	bne.w	80013fe <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800170a:	2302      	movs	r3, #2
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	00010004 	.word	0x00010004
 8001718:	20000000 	.word	0x20000000
 800171c:	14f8b589 	.word	0x14f8b589

08001720 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af02      	add	r7, sp, #8
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	460b      	mov	r3, r1
 800172e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b08      	cmp	r3, #8
 800173a:	d006      	beq.n	800174a <I2C_MasterRequestWrite+0x2a>
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d003      	beq.n	800174a <I2C_MasterRequestWrite+0x2a>
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001748:	d108      	bne.n	800175c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e00b      	b.n	8001774 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001760:	2b12      	cmp	r3, #18
 8001762:	d107      	bne.n	8001774 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001772:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 f91d 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179a:	d103      	bne.n	80017a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e035      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b0:	d108      	bne.n	80017c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017b2:	897b      	ldrh	r3, [r7, #10]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	e01b      	b.n	80017fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017c4:	897b      	ldrh	r3, [r7, #10]
 80017c6:	11db      	asrs	r3, r3, #7
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	f003 0306 	and.w	r3, r3, #6
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	f063 030f 	orn	r3, r3, #15
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	490e      	ldr	r1, [pc, #56]	; (800181c <I2C_MasterRequestWrite+0xfc>)
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f966 	bl	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e010      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017f2:	897b      	ldrh	r3, [r7, #10]
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <I2C_MasterRequestWrite+0x100>)
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f956 	bl	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	00010008 	.word	0x00010008
 8001820:	00010002 	.word	0x00010002

08001824 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	460b      	mov	r3, r1
 8001832:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001848:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b08      	cmp	r3, #8
 800184e:	d006      	beq.n	800185e <I2C_MasterRequestRead+0x3a>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d003      	beq.n	800185e <I2C_MasterRequestRead+0x3a>
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800185c:	d108      	bne.n	8001870 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	e00b      	b.n	8001888 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	2b11      	cmp	r3, #17
 8001876:	d107      	bne.n	8001888 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001886:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f893 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ae:	d103      	bne.n	80018b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e079      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018c4:	d108      	bne.n	80018d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018c6:	897b      	ldrh	r3, [r7, #10]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	611a      	str	r2, [r3, #16]
 80018d6:	e05f      	b.n	8001998 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	11db      	asrs	r3, r3, #7
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f003 0306 	and.w	r3, r3, #6
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	f063 030f 	orn	r3, r3, #15
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4930      	ldr	r1, [pc, #192]	; (80019b8 <I2C_MasterRequestRead+0x194>)
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 f8dc 	bl	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e054      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001906:	897b      	ldrh	r3, [r7, #10]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	4929      	ldr	r1, [pc, #164]	; (80019bc <I2C_MasterRequestRead+0x198>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 f8cc 	bl	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e044      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	613b      	str	r3, [r7, #16]
 800193a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800194a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f831 	bl	80019c0 <I2C_WaitOnFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00d      	beq.n	8001980 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001972:	d103      	bne.n	800197c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e017      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001980:	897b      	ldrh	r3, [r7, #10]
 8001982:	11db      	asrs	r3, r3, #7
 8001984:	b2db      	uxtb	r3, r3
 8001986:	f003 0306 	and.w	r3, r3, #6
 800198a:	b2db      	uxtb	r3, r3
 800198c:	f063 030e 	orn	r3, r3, #14
 8001990:	b2da      	uxtb	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	4907      	ldr	r1, [pc, #28]	; (80019bc <I2C_MasterRequestRead+0x198>)
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f000 f888 	bl	8001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	00010008 	.word	0x00010008
 80019bc:	00010002 	.word	0x00010002

080019c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	4613      	mov	r3, r2
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019d0:	e048      	b.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d044      	beq.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7fe fef9 	bl	80007d0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d139      	bne.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	0c1b      	lsrs	r3, r3, #16
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d10d      	bne.n	8001a16 <I2C_WaitOnFlagUntilTimeout+0x56>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	43da      	mvns	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4013      	ands	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	e00c      	b.n	8001a30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	43da      	mvns	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	4013      	ands	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf0c      	ite	eq
 8001a28:	2301      	moveq	r3, #1
 8001a2a:	2300      	movne	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	461a      	mov	r2, r3
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d116      	bne.n	8001a64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f043 0220 	orr.w	r2, r3, #32
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e023      	b.n	8001aac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	0c1b      	lsrs	r3, r3, #16
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d10d      	bne.n	8001a8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	43da      	mvns	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	461a      	mov	r2, r3
 8001a88:	e00c      	b.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	43da      	mvns	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4013      	ands	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d093      	beq.n	80019d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ac2:	e071      	b.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d123      	bne.n	8001b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f043 0204 	orr.w	r2, r3, #4
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e067      	b.n	8001bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b22:	d041      	beq.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b24:	f7fe fe54 	bl	80007d0 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d302      	bcc.n	8001b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d136      	bne.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d10c      	bne.n	8001b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	bf14      	ite	ne
 8001b56:	2301      	movne	r3, #1
 8001b58:	2300      	moveq	r3, #0
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	e00b      	b.n	8001b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	43da      	mvns	r2, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	bf14      	ite	ne
 8001b70:	2301      	movne	r3, #1
 8001b72:	2300      	moveq	r3, #0
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e021      	b.n	8001bec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	0c1b      	lsrs	r3, r3, #16
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d10c      	bne.n	8001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	43da      	mvns	r2, r3
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	e00b      	b.n	8001be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f47f af6d 	bne.w	8001ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c00:	e034      	b.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f8e3 	bl	8001dce <I2C_IsAcknowledgeFailed>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e034      	b.n	8001c7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d028      	beq.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7fe fdd9 	bl	80007d0 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d11d      	bne.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b80      	cmp	r3, #128	; 0x80
 8001c3c:	d016      	beq.n	8001c6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2220      	movs	r2, #32
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e007      	b.n	8001c7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c76:	2b80      	cmp	r3, #128	; 0x80
 8001c78:	d1c3      	bne.n	8001c02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c90:	e034      	b.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f89b 	bl	8001dce <I2C_IsAcknowledgeFailed>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e034      	b.n	8001d0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d028      	beq.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001caa:	f7fe fd91 	bl	80007d0 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d302      	bcc.n	8001cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d11d      	bne.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d016      	beq.n	8001cfc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	f043 0220 	orr.w	r2, r3, #32
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e007      	b.n	8001d0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d1c3      	bne.n	8001c92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d20:	e049      	b.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d119      	bne.n	8001d64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0210 	mvn.w	r2, #16
 8001d38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e030      	b.n	8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d64:	f7fe fd34 	bl	80007d0 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d302      	bcc.n	8001d7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d11d      	bne.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d016      	beq.n	8001db6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f043 0220 	orr.w	r2, r3, #32
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e007      	b.n	8001dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b40      	cmp	r3, #64	; 0x40
 8001dc2:	d1ae      	bne.n	8001d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de4:	d11b      	bne.n	8001e1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f043 0204 	orr.w	r2, r3, #4
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e272      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8087 	beq.w	8001f5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4c:	4b92      	ldr	r3, [pc, #584]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d00c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e58:	4b8f      	ldr	r3, [pc, #572]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d112      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5e>
 8001e64:	4b8c      	ldr	r3, [pc, #560]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e70:	d10b      	bne.n	8001e8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e72:	4b89      	ldr	r3, [pc, #548]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d06c      	beq.n	8001f58 <HAL_RCC_OscConfig+0x12c>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d168      	bne.n	8001f58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e24c      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x76>
 8001e94:	4b80      	ldr	r3, [pc, #512]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a7f      	ldr	r2, [pc, #508]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	e02e      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x98>
 8001eaa:	4b7b      	ldr	r3, [pc, #492]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7a      	ldr	r2, [pc, #488]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b78      	ldr	r3, [pc, #480]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a77      	ldr	r2, [pc, #476]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0xbc>
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a71      	ldr	r2, [pc, #452]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6e      	ldr	r2, [pc, #440]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	4b6b      	ldr	r3, [pc, #428]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a6a      	ldr	r2, [pc, #424]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b68      	ldr	r3, [pc, #416]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a67      	ldr	r2, [pc, #412]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7fe fc62 	bl	80007d0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7fe fc5e 	bl	80007d0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e200      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xe4>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe fc4e 	bl	80007d0 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7fe fc4a 	bl	80007d0 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	; 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1ec      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b53      	ldr	r3, [pc, #332]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x10c>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f66:	4b4c      	ldr	r3, [pc, #304]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x18c>
 8001f7e:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1c0      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b3d      	ldr	r3, [pc, #244]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4939      	ldr	r1, [pc, #228]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fc03 	bl	80007d0 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7fe fbff 	bl	80007d0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1a1      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4927      	ldr	r1, [pc, #156]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b26      	ldr	r3, [pc, #152]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe fbe2 	bl	80007d0 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7fe fbde 	bl	80007d0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e180      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03a      	beq.n	80020b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d019      	beq.n	8002076 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7fe fbc2 	bl	80007d0 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7fe fbbe 	bl	80007d0 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e160      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCC_OscConfig+0x26c>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800206e:	2001      	movs	r0, #1
 8002070:	f000 face 	bl	8002610 <RCC_Delay>
 8002074:	e01c      	b.n	80020b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7fe fba8 	bl	80007d0 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002082:	e00f      	b.n	80020a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002084:	f7fe fba4 	bl	80007d0 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d908      	bls.n	80020a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e146      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	42420000 	.word	0x42420000
 80020a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a4:	4b92      	ldr	r3, [pc, #584]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e9      	bne.n	8002084 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a6 	beq.w	800220a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b8b      	ldr	r3, [pc, #556]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10d      	bne.n	80020ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	4a87      	ldr	r2, [pc, #540]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	61d3      	str	r3, [r2, #28]
 80020da:	4b85      	ldr	r3, [pc, #532]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b82      	ldr	r3, [pc, #520]	; (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b7f      	ldr	r3, [pc, #508]	; (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a7e      	ldr	r2, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7fe fb65 	bl	80007d0 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7fe fb61 	bl	80007d0 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	; 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e103      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b75      	ldr	r3, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x4c8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x312>
 8002130:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	4a6e      	ldr	r2, [pc, #440]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6213      	str	r3, [r2, #32]
 800213c:	e02d      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x334>
 8002146:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	6213      	str	r3, [r2, #32]
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f023 0304 	bic.w	r3, r3, #4
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	e01c      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x356>
 8002168:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a60      	ldr	r2, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6213      	str	r3, [r2, #32]
 8002180:	e00b      	b.n	800219a <HAL_RCC_OscConfig+0x36e>
 8002182:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a5a      	ldr	r2, [pc, #360]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 0301 	bic.w	r3, r3, #1
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d015      	beq.n	80021ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7fe fb15 	bl	80007d0 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7fe fb11 	bl	80007d0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e0b1      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ee      	beq.n	80021aa <HAL_RCC_OscConfig+0x37e>
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7fe faff 	bl	80007d0 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fafb 	bl	80007d0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e09b      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	4b40      	ldr	r3, [pc, #256]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ee      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b3c      	ldr	r3, [pc, #240]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a3b      	ldr	r2, [pc, #236]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8087 	beq.w	8002322 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	d061      	beq.n	80022e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d146      	bne.n	80022b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002228:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7fe facf 	bl	80007d0 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7fe facb 	bl	80007d0 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e06d      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225c:	d108      	bne.n	8002270 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	4921      	ldr	r1, [pc, #132]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002270:	4b1f      	ldr	r3, [pc, #124]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a19      	ldr	r1, [r3, #32]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	430b      	orrs	r3, r1
 8002282:	491b      	ldr	r1, [pc, #108]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	; (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 800228a:	2201      	movs	r2, #1
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7fe fa9f 	bl	80007d0 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002296:	f7fe fa9b 	bl	80007d0 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e03d      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x46a>
 80022b4:	e035      	b.n	8002322 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_RCC_OscConfig+0x4cc>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fa88 	bl	80007d0 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fa84 	bl	80007d0 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e026      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x498>
 80022e2:	e01e      	b.n	8002322 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e019      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_OscConfig+0x500>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	429a      	cmp	r2, r3
 800230e:	d106      	bne.n	800231e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	429a      	cmp	r2, r3
 800231c:	d001      	beq.n	8002322 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000

08002330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0d0      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b6a      	ldr	r3, [pc, #424]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d910      	bls.n	8002374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b67      	ldr	r3, [pc, #412]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 0207 	bic.w	r2, r3, #7
 800235a:	4965      	ldr	r1, [pc, #404]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0b8      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800238c:	4b59      	ldr	r3, [pc, #356]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002396:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	494d      	ldr	r1, [pc, #308]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d040      	beq.n	8002450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d115      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e07f      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ee:	4b41      	ldr	r3, [pc, #260]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e073      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fe:	4b3d      	ldr	r3, [pc, #244]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06b      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800240e:	4b39      	ldr	r3, [pc, #228]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f023 0203 	bic.w	r2, r3, #3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4936      	ldr	r1, [pc, #216]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002420:	f7fe f9d6 	bl	80007d0 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	e00a      	b.n	800243e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002428:	f7fe f9d2 	bl	80007d0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	f241 3288 	movw	r2, #5000	; 0x1388
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e053      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243e:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 020c 	and.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	429a      	cmp	r2, r3
 800244e:	d1eb      	bne.n	8002428 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002450:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d210      	bcs.n	8002480 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f023 0207 	bic.w	r2, r3, #7
 8002466:	4922      	ldr	r1, [pc, #136]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d001      	beq.n	8002480 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e032      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	4916      	ldr	r1, [pc, #88]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	490e      	ldr	r1, [pc, #56]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024be:	f000 f821 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024c2:	4602      	mov	r2, r0
 80024c4:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	490a      	ldr	r1, [pc, #40]	; (80024f8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	5ccb      	ldrb	r3, [r1, r3]
 80024d2:	fa22 f303 	lsr.w	r3, r2, r3
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_RCC_ClockConfig+0x1cc>)
 80024d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <HAL_RCC_ClockConfig+0x1d0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe f934 	bl	800074c <HAL_InitTick>

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08003398 	.word	0x08003398
 80024fc:	20000000 	.word	0x20000000
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_RCC_GetSysClockFreq+0x94>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d002      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x30>
 800252e:	2b08      	cmp	r3, #8
 8002530:	d003      	beq.n	800253a <HAL_RCC_GetSysClockFreq+0x36>
 8002532:	e027      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002534:	4b19      	ldr	r3, [pc, #100]	; (800259c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	613b      	str	r3, [r7, #16]
      break;
 8002538:	e027      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	0c9b      	lsrs	r3, r3, #18
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	4a17      	ldr	r2, [pc, #92]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002544:	5cd3      	ldrb	r3, [r2, r3]
 8002546:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_RCC_GetSysClockFreq+0x94>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	0c5b      	lsrs	r3, r3, #17
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800255e:	5cd3      	ldrb	r3, [r2, r3]
 8002560:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a0d      	ldr	r2, [pc, #52]	; (800259c <HAL_RCC_GetSysClockFreq+0x98>)
 8002566:	fb03 f202 	mul.w	r2, r3, r2
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e004      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	613b      	str	r3, [r7, #16]
      break;
 8002582:	e002      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetSysClockFreq+0x98>)
 8002586:	613b      	str	r3, [r7, #16]
      break;
 8002588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800258a:	693b      	ldr	r3, [r7, #16]
}
 800258c:	4618      	mov	r0, r3
 800258e:	371c      	adds	r7, #28
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	007a1200 	.word	0x007a1200
 80025a0:	080033b0 	.word	0x080033b0
 80025a4:	080033c0 	.word	0x080033c0
 80025a8:	003d0900 	.word	0x003d0900

080025ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_RCC_GetHCLKFreq+0x10>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	20000000 	.word	0x20000000

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c4:	f7ff fff2 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40021000 	.word	0x40021000
 80025e4:	080033a8 	.word	0x080033a8

080025e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025ec:	f7ff ffde 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	0adb      	lsrs	r3, r3, #11
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	080033a8 	.word	0x080033a8

08002610 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002618:	4b0a      	ldr	r3, [pc, #40]	; (8002644 <RCC_Delay+0x34>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <RCC_Delay+0x38>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0a5b      	lsrs	r3, r3, #9
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800262c:	bf00      	nop
  }
  while (Delay --);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1e5a      	subs	r2, r3, #1
 8002632:	60fa      	str	r2, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f9      	bne.n	800262c <RCC_Delay+0x1c>
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	20000000 	.word	0x20000000
 8002648:	10624dd3 	.word	0x10624dd3

0800264c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e042      	b.n	80026e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fd ff84 	bl	8000580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	; 0x24
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800268e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f91d 	bl	80028d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b20      	cmp	r3, #32
 800270a:	d16d      	bne.n	80027e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_UART_Transmit+0x2c>
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e066      	b.n	80027ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2221      	movs	r2, #33	; 0x21
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800272a:	f7fe f851 	bl	80007d0 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	88fa      	ldrh	r2, [r7, #6]
 8002734:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	88fa      	ldrh	r2, [r7, #6]
 800273a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002744:	d108      	bne.n	8002758 <HAL_UART_Transmit+0x6c>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e003      	b.n	8002760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002760:	e02a      	b.n	80027b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f840 	bl	80027f2 <UART_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e036      	b.n	80027ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10b      	bne.n	800279a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002790:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	3302      	adds	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	e007      	b.n	80027aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1cf      	bne.n	8002762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2140      	movs	r1, #64	; 0x40
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f810 	bl	80027f2 <UART_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e006      	b.n	80027ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b090      	sub	sp, #64	; 0x40
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002802:	e050      	b.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d04c      	beq.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800280c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <UART_WaitOnFlagUntilTimeout+0x30>
 8002812:	f7fd ffdd 	bl	80007d0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800281e:	429a      	cmp	r2, r3
 8002820:	d241      	bcs.n	80028a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	330c      	adds	r3, #12
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002842:	637a      	str	r2, [r7, #52]	; 0x34
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e5      	bne.n	8002822 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3314      	adds	r3, #20
 800285c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	e853 3f00 	ldrex	r3, [r3]
 8002864:	613b      	str	r3, [r7, #16]
   return(result);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3314      	adds	r3, #20
 8002874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002876:	623a      	str	r2, [r7, #32]
 8002878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287a:	69f9      	ldr	r1, [r7, #28]
 800287c:	6a3a      	ldr	r2, [r7, #32]
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	61bb      	str	r3, [r7, #24]
   return(result);
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e5      	bne.n	8002856 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e00f      	b.n	80028c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4013      	ands	r3, r2
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d09f      	beq.n	8002804 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3740      	adds	r7, #64	; 0x40
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800290a:	f023 030c 	bic.w	r3, r3, #12
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	430b      	orrs	r3, r1
 8002916:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a2c      	ldr	r2, [pc, #176]	; (80029e4 <UART_SetConfig+0x114>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d103      	bne.n	8002940 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002938:	f7ff fe56 	bl	80025e8 <HAL_RCC_GetPCLK2Freq>
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	e002      	b.n	8002946 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002940:	f7ff fe3e 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8002944:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009a      	lsls	r2, r3, #2
 8002950:	441a      	add	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <UART_SetConfig+0x118>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	0119      	lsls	r1, r3, #4
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009a      	lsls	r2, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fbb2 f2f3 	udiv	r2, r2, r3
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <UART_SetConfig+0x118>)
 800297e:	fba3 0302 	umull	r0, r3, r3, r2
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2064      	movs	r0, #100	; 0x64
 8002986:	fb00 f303 	mul.w	r3, r0, r3
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	3332      	adds	r3, #50	; 0x32
 8002990:	4a15      	ldr	r2, [pc, #84]	; (80029e8 <UART_SetConfig+0x118>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299c:	4419      	add	r1, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	441a      	add	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <UART_SetConfig+0x118>)
 80029b6:	fba3 0302 	umull	r0, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2064      	movs	r0, #100	; 0x64
 80029be:	fb00 f303 	mul.w	r3, r0, r3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	3332      	adds	r3, #50	; 0x32
 80029c8:	4a07      	ldr	r2, [pc, #28]	; (80029e8 <UART_SetConfig+0x118>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	f003 020f 	and.w	r2, r3, #15
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	440a      	add	r2, r1
 80029da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029dc:	bf00      	nop
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40013800 	.word	0x40013800
 80029e8:	51eb851f 	.word	0x51eb851f

080029ec <siprintf>:
 80029ec:	b40e      	push	{r1, r2, r3}
 80029ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80029f2:	b500      	push	{lr}
 80029f4:	b09c      	sub	sp, #112	; 0x70
 80029f6:	ab1d      	add	r3, sp, #116	; 0x74
 80029f8:	9002      	str	r0, [sp, #8]
 80029fa:	9006      	str	r0, [sp, #24]
 80029fc:	9107      	str	r1, [sp, #28]
 80029fe:	9104      	str	r1, [sp, #16]
 8002a00:	4808      	ldr	r0, [pc, #32]	; (8002a24 <siprintf+0x38>)
 8002a02:	4909      	ldr	r1, [pc, #36]	; (8002a28 <siprintf+0x3c>)
 8002a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a08:	9105      	str	r1, [sp, #20]
 8002a0a:	6800      	ldr	r0, [r0, #0]
 8002a0c:	a902      	add	r1, sp, #8
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	f000 f98e 	bl	8002d30 <_svfiprintf_r>
 8002a14:	2200      	movs	r2, #0
 8002a16:	9b02      	ldr	r3, [sp, #8]
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	b01c      	add	sp, #112	; 0x70
 8002a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a20:	b003      	add	sp, #12
 8002a22:	4770      	bx	lr
 8002a24:	20000058 	.word	0x20000058
 8002a28:	ffff0208 	.word	0xffff0208

08002a2c <memset>:
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4402      	add	r2, r0
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d100      	bne.n	8002a36 <memset+0xa>
 8002a34:	4770      	bx	lr
 8002a36:	f803 1b01 	strb.w	r1, [r3], #1
 8002a3a:	e7f9      	b.n	8002a30 <memset+0x4>

08002a3c <__errno>:
 8002a3c:	4b01      	ldr	r3, [pc, #4]	; (8002a44 <__errno+0x8>)
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000058 	.word	0x20000058

08002a48 <__libc_init_array>:
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	2600      	movs	r6, #0
 8002a4c:	4d0c      	ldr	r5, [pc, #48]	; (8002a80 <__libc_init_array+0x38>)
 8002a4e:	4c0d      	ldr	r4, [pc, #52]	; (8002a84 <__libc_init_array+0x3c>)
 8002a50:	1b64      	subs	r4, r4, r5
 8002a52:	10a4      	asrs	r4, r4, #2
 8002a54:	42a6      	cmp	r6, r4
 8002a56:	d109      	bne.n	8002a6c <__libc_init_array+0x24>
 8002a58:	f000 fc7a 	bl	8003350 <_init>
 8002a5c:	2600      	movs	r6, #0
 8002a5e:	4d0a      	ldr	r5, [pc, #40]	; (8002a88 <__libc_init_array+0x40>)
 8002a60:	4c0a      	ldr	r4, [pc, #40]	; (8002a8c <__libc_init_array+0x44>)
 8002a62:	1b64      	subs	r4, r4, r5
 8002a64:	10a4      	asrs	r4, r4, #2
 8002a66:	42a6      	cmp	r6, r4
 8002a68:	d105      	bne.n	8002a76 <__libc_init_array+0x2e>
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}
 8002a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a70:	4798      	blx	r3
 8002a72:	3601      	adds	r6, #1
 8002a74:	e7ee      	b.n	8002a54 <__libc_init_array+0xc>
 8002a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7a:	4798      	blx	r3
 8002a7c:	3601      	adds	r6, #1
 8002a7e:	e7f2      	b.n	8002a66 <__libc_init_array+0x1e>
 8002a80:	080033f8 	.word	0x080033f8
 8002a84:	080033f8 	.word	0x080033f8
 8002a88:	080033f8 	.word	0x080033f8
 8002a8c:	080033fc 	.word	0x080033fc

08002a90 <__retarget_lock_acquire_recursive>:
 8002a90:	4770      	bx	lr

08002a92 <__retarget_lock_release_recursive>:
 8002a92:	4770      	bx	lr

08002a94 <_free_r>:
 8002a94:	b538      	push	{r3, r4, r5, lr}
 8002a96:	4605      	mov	r5, r0
 8002a98:	2900      	cmp	r1, #0
 8002a9a:	d040      	beq.n	8002b1e <_free_r+0x8a>
 8002a9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002aa0:	1f0c      	subs	r4, r1, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bfb8      	it	lt
 8002aa6:	18e4      	addlt	r4, r4, r3
 8002aa8:	f000 f8dc 	bl	8002c64 <__malloc_lock>
 8002aac:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <_free_r+0x8c>)
 8002aae:	6813      	ldr	r3, [r2, #0]
 8002ab0:	b933      	cbnz	r3, 8002ac0 <_free_r+0x2c>
 8002ab2:	6063      	str	r3, [r4, #4]
 8002ab4:	6014      	str	r4, [r2, #0]
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002abc:	f000 b8d8 	b.w	8002c70 <__malloc_unlock>
 8002ac0:	42a3      	cmp	r3, r4
 8002ac2:	d908      	bls.n	8002ad6 <_free_r+0x42>
 8002ac4:	6820      	ldr	r0, [r4, #0]
 8002ac6:	1821      	adds	r1, r4, r0
 8002ac8:	428b      	cmp	r3, r1
 8002aca:	bf01      	itttt	eq
 8002acc:	6819      	ldreq	r1, [r3, #0]
 8002ace:	685b      	ldreq	r3, [r3, #4]
 8002ad0:	1809      	addeq	r1, r1, r0
 8002ad2:	6021      	streq	r1, [r4, #0]
 8002ad4:	e7ed      	b.n	8002ab2 <_free_r+0x1e>
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	b10b      	cbz	r3, 8002ae0 <_free_r+0x4c>
 8002adc:	42a3      	cmp	r3, r4
 8002ade:	d9fa      	bls.n	8002ad6 <_free_r+0x42>
 8002ae0:	6811      	ldr	r1, [r2, #0]
 8002ae2:	1850      	adds	r0, r2, r1
 8002ae4:	42a0      	cmp	r0, r4
 8002ae6:	d10b      	bne.n	8002b00 <_free_r+0x6c>
 8002ae8:	6820      	ldr	r0, [r4, #0]
 8002aea:	4401      	add	r1, r0
 8002aec:	1850      	adds	r0, r2, r1
 8002aee:	4283      	cmp	r3, r0
 8002af0:	6011      	str	r1, [r2, #0]
 8002af2:	d1e0      	bne.n	8002ab6 <_free_r+0x22>
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4408      	add	r0, r1
 8002afa:	6010      	str	r0, [r2, #0]
 8002afc:	6053      	str	r3, [r2, #4]
 8002afe:	e7da      	b.n	8002ab6 <_free_r+0x22>
 8002b00:	d902      	bls.n	8002b08 <_free_r+0x74>
 8002b02:	230c      	movs	r3, #12
 8002b04:	602b      	str	r3, [r5, #0]
 8002b06:	e7d6      	b.n	8002ab6 <_free_r+0x22>
 8002b08:	6820      	ldr	r0, [r4, #0]
 8002b0a:	1821      	adds	r1, r4, r0
 8002b0c:	428b      	cmp	r3, r1
 8002b0e:	bf01      	itttt	eq
 8002b10:	6819      	ldreq	r1, [r3, #0]
 8002b12:	685b      	ldreq	r3, [r3, #4]
 8002b14:	1809      	addeq	r1, r1, r0
 8002b16:	6021      	streq	r1, [r4, #0]
 8002b18:	6063      	str	r3, [r4, #4]
 8002b1a:	6054      	str	r4, [r2, #4]
 8002b1c:	e7cb      	b.n	8002ab6 <_free_r+0x22>
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
 8002b20:	2000025c 	.word	0x2000025c

08002b24 <sbrk_aligned>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	4e0e      	ldr	r6, [pc, #56]	; (8002b60 <sbrk_aligned+0x3c>)
 8002b28:	460c      	mov	r4, r1
 8002b2a:	6831      	ldr	r1, [r6, #0]
 8002b2c:	4605      	mov	r5, r0
 8002b2e:	b911      	cbnz	r1, 8002b36 <sbrk_aligned+0x12>
 8002b30:	f000 fbaa 	bl	8003288 <_sbrk_r>
 8002b34:	6030      	str	r0, [r6, #0]
 8002b36:	4621      	mov	r1, r4
 8002b38:	4628      	mov	r0, r5
 8002b3a:	f000 fba5 	bl	8003288 <_sbrk_r>
 8002b3e:	1c43      	adds	r3, r0, #1
 8002b40:	d00a      	beq.n	8002b58 <sbrk_aligned+0x34>
 8002b42:	1cc4      	adds	r4, r0, #3
 8002b44:	f024 0403 	bic.w	r4, r4, #3
 8002b48:	42a0      	cmp	r0, r4
 8002b4a:	d007      	beq.n	8002b5c <sbrk_aligned+0x38>
 8002b4c:	1a21      	subs	r1, r4, r0
 8002b4e:	4628      	mov	r0, r5
 8002b50:	f000 fb9a 	bl	8003288 <_sbrk_r>
 8002b54:	3001      	adds	r0, #1
 8002b56:	d101      	bne.n	8002b5c <sbrk_aligned+0x38>
 8002b58:	f04f 34ff 	mov.w	r4, #4294967295
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	bd70      	pop	{r4, r5, r6, pc}
 8002b60:	20000260 	.word	0x20000260

08002b64 <_malloc_r>:
 8002b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b68:	1ccd      	adds	r5, r1, #3
 8002b6a:	f025 0503 	bic.w	r5, r5, #3
 8002b6e:	3508      	adds	r5, #8
 8002b70:	2d0c      	cmp	r5, #12
 8002b72:	bf38      	it	cc
 8002b74:	250c      	movcc	r5, #12
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	4607      	mov	r7, r0
 8002b7a:	db01      	blt.n	8002b80 <_malloc_r+0x1c>
 8002b7c:	42a9      	cmp	r1, r5
 8002b7e:	d905      	bls.n	8002b8c <_malloc_r+0x28>
 8002b80:	230c      	movs	r3, #12
 8002b82:	2600      	movs	r6, #0
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4630      	mov	r0, r6
 8002b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002c60 <_malloc_r+0xfc>
 8002b90:	f000 f868 	bl	8002c64 <__malloc_lock>
 8002b94:	f8d8 3000 	ldr.w	r3, [r8]
 8002b98:	461c      	mov	r4, r3
 8002b9a:	bb5c      	cbnz	r4, 8002bf4 <_malloc_r+0x90>
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	f7ff ffc0 	bl	8002b24 <sbrk_aligned>
 8002ba4:	1c43      	adds	r3, r0, #1
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	d155      	bne.n	8002c56 <_malloc_r+0xf2>
 8002baa:	f8d8 4000 	ldr.w	r4, [r8]
 8002bae:	4626      	mov	r6, r4
 8002bb0:	2e00      	cmp	r6, #0
 8002bb2:	d145      	bne.n	8002c40 <_malloc_r+0xdc>
 8002bb4:	2c00      	cmp	r4, #0
 8002bb6:	d048      	beq.n	8002c4a <_malloc_r+0xe6>
 8002bb8:	6823      	ldr	r3, [r4, #0]
 8002bba:	4631      	mov	r1, r6
 8002bbc:	4638      	mov	r0, r7
 8002bbe:	eb04 0903 	add.w	r9, r4, r3
 8002bc2:	f000 fb61 	bl	8003288 <_sbrk_r>
 8002bc6:	4581      	cmp	r9, r0
 8002bc8:	d13f      	bne.n	8002c4a <_malloc_r+0xe6>
 8002bca:	6821      	ldr	r1, [r4, #0]
 8002bcc:	4638      	mov	r0, r7
 8002bce:	1a6d      	subs	r5, r5, r1
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	f7ff ffa7 	bl	8002b24 <sbrk_aligned>
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	d037      	beq.n	8002c4a <_malloc_r+0xe6>
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	442b      	add	r3, r5
 8002bde:	6023      	str	r3, [r4, #0]
 8002be0:	f8d8 3000 	ldr.w	r3, [r8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d038      	beq.n	8002c5a <_malloc_r+0xf6>
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	42a2      	cmp	r2, r4
 8002bec:	d12b      	bne.n	8002c46 <_malloc_r+0xe2>
 8002bee:	2200      	movs	r2, #0
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e00f      	b.n	8002c14 <_malloc_r+0xb0>
 8002bf4:	6822      	ldr	r2, [r4, #0]
 8002bf6:	1b52      	subs	r2, r2, r5
 8002bf8:	d41f      	bmi.n	8002c3a <_malloc_r+0xd6>
 8002bfa:	2a0b      	cmp	r2, #11
 8002bfc:	d917      	bls.n	8002c2e <_malloc_r+0xca>
 8002bfe:	1961      	adds	r1, r4, r5
 8002c00:	42a3      	cmp	r3, r4
 8002c02:	6025      	str	r5, [r4, #0]
 8002c04:	bf18      	it	ne
 8002c06:	6059      	strne	r1, [r3, #4]
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	bf08      	it	eq
 8002c0c:	f8c8 1000 	streq.w	r1, [r8]
 8002c10:	5162      	str	r2, [r4, r5]
 8002c12:	604b      	str	r3, [r1, #4]
 8002c14:	4638      	mov	r0, r7
 8002c16:	f104 060b 	add.w	r6, r4, #11
 8002c1a:	f000 f829 	bl	8002c70 <__malloc_unlock>
 8002c1e:	f026 0607 	bic.w	r6, r6, #7
 8002c22:	1d23      	adds	r3, r4, #4
 8002c24:	1af2      	subs	r2, r6, r3
 8002c26:	d0ae      	beq.n	8002b86 <_malloc_r+0x22>
 8002c28:	1b9b      	subs	r3, r3, r6
 8002c2a:	50a3      	str	r3, [r4, r2]
 8002c2c:	e7ab      	b.n	8002b86 <_malloc_r+0x22>
 8002c2e:	42a3      	cmp	r3, r4
 8002c30:	6862      	ldr	r2, [r4, #4]
 8002c32:	d1dd      	bne.n	8002bf0 <_malloc_r+0x8c>
 8002c34:	f8c8 2000 	str.w	r2, [r8]
 8002c38:	e7ec      	b.n	8002c14 <_malloc_r+0xb0>
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	6864      	ldr	r4, [r4, #4]
 8002c3e:	e7ac      	b.n	8002b9a <_malloc_r+0x36>
 8002c40:	4634      	mov	r4, r6
 8002c42:	6876      	ldr	r6, [r6, #4]
 8002c44:	e7b4      	b.n	8002bb0 <_malloc_r+0x4c>
 8002c46:	4613      	mov	r3, r2
 8002c48:	e7cc      	b.n	8002be4 <_malloc_r+0x80>
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	4638      	mov	r0, r7
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	f000 f80e 	bl	8002c70 <__malloc_unlock>
 8002c54:	e797      	b.n	8002b86 <_malloc_r+0x22>
 8002c56:	6025      	str	r5, [r4, #0]
 8002c58:	e7dc      	b.n	8002c14 <_malloc_r+0xb0>
 8002c5a:	605b      	str	r3, [r3, #4]
 8002c5c:	deff      	udf	#255	; 0xff
 8002c5e:	bf00      	nop
 8002c60:	2000025c 	.word	0x2000025c

08002c64 <__malloc_lock>:
 8002c64:	4801      	ldr	r0, [pc, #4]	; (8002c6c <__malloc_lock+0x8>)
 8002c66:	f7ff bf13 	b.w	8002a90 <__retarget_lock_acquire_recursive>
 8002c6a:	bf00      	nop
 8002c6c:	20000258 	.word	0x20000258

08002c70 <__malloc_unlock>:
 8002c70:	4801      	ldr	r0, [pc, #4]	; (8002c78 <__malloc_unlock+0x8>)
 8002c72:	f7ff bf0e 	b.w	8002a92 <__retarget_lock_release_recursive>
 8002c76:	bf00      	nop
 8002c78:	20000258 	.word	0x20000258

08002c7c <__ssputs_r>:
 8002c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c80:	461f      	mov	r7, r3
 8002c82:	688e      	ldr	r6, [r1, #8]
 8002c84:	4682      	mov	sl, r0
 8002c86:	42be      	cmp	r6, r7
 8002c88:	460c      	mov	r4, r1
 8002c8a:	4690      	mov	r8, r2
 8002c8c:	680b      	ldr	r3, [r1, #0]
 8002c8e:	d82c      	bhi.n	8002cea <__ssputs_r+0x6e>
 8002c90:	898a      	ldrh	r2, [r1, #12]
 8002c92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c96:	d026      	beq.n	8002ce6 <__ssputs_r+0x6a>
 8002c98:	6965      	ldr	r5, [r4, #20]
 8002c9a:	6909      	ldr	r1, [r1, #16]
 8002c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ca0:	eba3 0901 	sub.w	r9, r3, r1
 8002ca4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002ca8:	1c7b      	adds	r3, r7, #1
 8002caa:	444b      	add	r3, r9
 8002cac:	106d      	asrs	r5, r5, #1
 8002cae:	429d      	cmp	r5, r3
 8002cb0:	bf38      	it	cc
 8002cb2:	461d      	movcc	r5, r3
 8002cb4:	0553      	lsls	r3, r2, #21
 8002cb6:	d527      	bpl.n	8002d08 <__ssputs_r+0x8c>
 8002cb8:	4629      	mov	r1, r5
 8002cba:	f7ff ff53 	bl	8002b64 <_malloc_r>
 8002cbe:	4606      	mov	r6, r0
 8002cc0:	b360      	cbz	r0, 8002d1c <__ssputs_r+0xa0>
 8002cc2:	464a      	mov	r2, r9
 8002cc4:	6921      	ldr	r1, [r4, #16]
 8002cc6:	f000 fafd 	bl	80032c4 <memcpy>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd4:	81a3      	strh	r3, [r4, #12]
 8002cd6:	6126      	str	r6, [r4, #16]
 8002cd8:	444e      	add	r6, r9
 8002cda:	6026      	str	r6, [r4, #0]
 8002cdc:	463e      	mov	r6, r7
 8002cde:	6165      	str	r5, [r4, #20]
 8002ce0:	eba5 0509 	sub.w	r5, r5, r9
 8002ce4:	60a5      	str	r5, [r4, #8]
 8002ce6:	42be      	cmp	r6, r7
 8002ce8:	d900      	bls.n	8002cec <__ssputs_r+0x70>
 8002cea:	463e      	mov	r6, r7
 8002cec:	4632      	mov	r2, r6
 8002cee:	4641      	mov	r1, r8
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	f000 faaf 	bl	8003254 <memmove>
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	68a3      	ldr	r3, [r4, #8]
 8002cfa:	1b9b      	subs	r3, r3, r6
 8002cfc:	60a3      	str	r3, [r4, #8]
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	4433      	add	r3, r6
 8002d02:	6023      	str	r3, [r4, #0]
 8002d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d08:	462a      	mov	r2, r5
 8002d0a:	f000 fae9 	bl	80032e0 <_realloc_r>
 8002d0e:	4606      	mov	r6, r0
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d1e0      	bne.n	8002cd6 <__ssputs_r+0x5a>
 8002d14:	4650      	mov	r0, sl
 8002d16:	6921      	ldr	r1, [r4, #16]
 8002d18:	f7ff febc 	bl	8002a94 <_free_r>
 8002d1c:	230c      	movs	r3, #12
 8002d1e:	f8ca 3000 	str.w	r3, [sl]
 8002d22:	89a3      	ldrh	r3, [r4, #12]
 8002d24:	f04f 30ff 	mov.w	r0, #4294967295
 8002d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d2c:	81a3      	strh	r3, [r4, #12]
 8002d2e:	e7e9      	b.n	8002d04 <__ssputs_r+0x88>

08002d30 <_svfiprintf_r>:
 8002d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d34:	4698      	mov	r8, r3
 8002d36:	898b      	ldrh	r3, [r1, #12]
 8002d38:	4607      	mov	r7, r0
 8002d3a:	061b      	lsls	r3, r3, #24
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	4614      	mov	r4, r2
 8002d40:	b09d      	sub	sp, #116	; 0x74
 8002d42:	d50e      	bpl.n	8002d62 <_svfiprintf_r+0x32>
 8002d44:	690b      	ldr	r3, [r1, #16]
 8002d46:	b963      	cbnz	r3, 8002d62 <_svfiprintf_r+0x32>
 8002d48:	2140      	movs	r1, #64	; 0x40
 8002d4a:	f7ff ff0b 	bl	8002b64 <_malloc_r>
 8002d4e:	6028      	str	r0, [r5, #0]
 8002d50:	6128      	str	r0, [r5, #16]
 8002d52:	b920      	cbnz	r0, 8002d5e <_svfiprintf_r+0x2e>
 8002d54:	230c      	movs	r3, #12
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5c:	e0d0      	b.n	8002f00 <_svfiprintf_r+0x1d0>
 8002d5e:	2340      	movs	r3, #64	; 0x40
 8002d60:	616b      	str	r3, [r5, #20]
 8002d62:	2300      	movs	r3, #0
 8002d64:	9309      	str	r3, [sp, #36]	; 0x24
 8002d66:	2320      	movs	r3, #32
 8002d68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d6c:	2330      	movs	r3, #48	; 0x30
 8002d6e:	f04f 0901 	mov.w	r9, #1
 8002d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d76:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002f18 <_svfiprintf_r+0x1e8>
 8002d7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d7e:	4623      	mov	r3, r4
 8002d80:	469a      	mov	sl, r3
 8002d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d86:	b10a      	cbz	r2, 8002d8c <_svfiprintf_r+0x5c>
 8002d88:	2a25      	cmp	r2, #37	; 0x25
 8002d8a:	d1f9      	bne.n	8002d80 <_svfiprintf_r+0x50>
 8002d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8002d90:	d00b      	beq.n	8002daa <_svfiprintf_r+0x7a>
 8002d92:	465b      	mov	r3, fp
 8002d94:	4622      	mov	r2, r4
 8002d96:	4629      	mov	r1, r5
 8002d98:	4638      	mov	r0, r7
 8002d9a:	f7ff ff6f 	bl	8002c7c <__ssputs_r>
 8002d9e:	3001      	adds	r0, #1
 8002da0:	f000 80a9 	beq.w	8002ef6 <_svfiprintf_r+0x1c6>
 8002da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002da6:	445a      	add	r2, fp
 8002da8:	9209      	str	r2, [sp, #36]	; 0x24
 8002daa:	f89a 3000 	ldrb.w	r3, [sl]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80a1 	beq.w	8002ef6 <_svfiprintf_r+0x1c6>
 8002db4:	2300      	movs	r3, #0
 8002db6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002dbe:	f10a 0a01 	add.w	sl, sl, #1
 8002dc2:	9304      	str	r3, [sp, #16]
 8002dc4:	9307      	str	r3, [sp, #28]
 8002dc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dca:	931a      	str	r3, [sp, #104]	; 0x68
 8002dcc:	4654      	mov	r4, sl
 8002dce:	2205      	movs	r2, #5
 8002dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dd4:	4850      	ldr	r0, [pc, #320]	; (8002f18 <_svfiprintf_r+0x1e8>)
 8002dd6:	f000 fa67 	bl	80032a8 <memchr>
 8002dda:	9a04      	ldr	r2, [sp, #16]
 8002ddc:	b9d8      	cbnz	r0, 8002e16 <_svfiprintf_r+0xe6>
 8002dde:	06d0      	lsls	r0, r2, #27
 8002de0:	bf44      	itt	mi
 8002de2:	2320      	movmi	r3, #32
 8002de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002de8:	0711      	lsls	r1, r2, #28
 8002dea:	bf44      	itt	mi
 8002dec:	232b      	movmi	r3, #43	; 0x2b
 8002dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002df2:	f89a 3000 	ldrb.w	r3, [sl]
 8002df6:	2b2a      	cmp	r3, #42	; 0x2a
 8002df8:	d015      	beq.n	8002e26 <_svfiprintf_r+0xf6>
 8002dfa:	4654      	mov	r4, sl
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f04f 0c0a 	mov.w	ip, #10
 8002e02:	9a07      	ldr	r2, [sp, #28]
 8002e04:	4621      	mov	r1, r4
 8002e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e0a:	3b30      	subs	r3, #48	; 0x30
 8002e0c:	2b09      	cmp	r3, #9
 8002e0e:	d94d      	bls.n	8002eac <_svfiprintf_r+0x17c>
 8002e10:	b1b0      	cbz	r0, 8002e40 <_svfiprintf_r+0x110>
 8002e12:	9207      	str	r2, [sp, #28]
 8002e14:	e014      	b.n	8002e40 <_svfiprintf_r+0x110>
 8002e16:	eba0 0308 	sub.w	r3, r0, r8
 8002e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	46a2      	mov	sl, r4
 8002e22:	9304      	str	r3, [sp, #16]
 8002e24:	e7d2      	b.n	8002dcc <_svfiprintf_r+0x9c>
 8002e26:	9b03      	ldr	r3, [sp, #12]
 8002e28:	1d19      	adds	r1, r3, #4
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	9103      	str	r1, [sp, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bfbb      	ittet	lt
 8002e32:	425b      	neglt	r3, r3
 8002e34:	f042 0202 	orrlt.w	r2, r2, #2
 8002e38:	9307      	strge	r3, [sp, #28]
 8002e3a:	9307      	strlt	r3, [sp, #28]
 8002e3c:	bfb8      	it	lt
 8002e3e:	9204      	strlt	r2, [sp, #16]
 8002e40:	7823      	ldrb	r3, [r4, #0]
 8002e42:	2b2e      	cmp	r3, #46	; 0x2e
 8002e44:	d10c      	bne.n	8002e60 <_svfiprintf_r+0x130>
 8002e46:	7863      	ldrb	r3, [r4, #1]
 8002e48:	2b2a      	cmp	r3, #42	; 0x2a
 8002e4a:	d134      	bne.n	8002eb6 <_svfiprintf_r+0x186>
 8002e4c:	9b03      	ldr	r3, [sp, #12]
 8002e4e:	3402      	adds	r4, #2
 8002e50:	1d1a      	adds	r2, r3, #4
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	9203      	str	r2, [sp, #12]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bfb8      	it	lt
 8002e5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e5e:	9305      	str	r3, [sp, #20]
 8002e60:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002f1c <_svfiprintf_r+0x1ec>
 8002e64:	2203      	movs	r2, #3
 8002e66:	4650      	mov	r0, sl
 8002e68:	7821      	ldrb	r1, [r4, #0]
 8002e6a:	f000 fa1d 	bl	80032a8 <memchr>
 8002e6e:	b138      	cbz	r0, 8002e80 <_svfiprintf_r+0x150>
 8002e70:	2240      	movs	r2, #64	; 0x40
 8002e72:	9b04      	ldr	r3, [sp, #16]
 8002e74:	eba0 000a 	sub.w	r0, r0, sl
 8002e78:	4082      	lsls	r2, r0
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	3401      	adds	r4, #1
 8002e7e:	9304      	str	r3, [sp, #16]
 8002e80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e84:	2206      	movs	r2, #6
 8002e86:	4826      	ldr	r0, [pc, #152]	; (8002f20 <_svfiprintf_r+0x1f0>)
 8002e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e8c:	f000 fa0c 	bl	80032a8 <memchr>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	d038      	beq.n	8002f06 <_svfiprintf_r+0x1d6>
 8002e94:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <_svfiprintf_r+0x1f4>)
 8002e96:	bb1b      	cbnz	r3, 8002ee0 <_svfiprintf_r+0x1b0>
 8002e98:	9b03      	ldr	r3, [sp, #12]
 8002e9a:	3307      	adds	r3, #7
 8002e9c:	f023 0307 	bic.w	r3, r3, #7
 8002ea0:	3308      	adds	r3, #8
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ea6:	4433      	add	r3, r6
 8002ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eaa:	e768      	b.n	8002d7e <_svfiprintf_r+0x4e>
 8002eac:	460c      	mov	r4, r1
 8002eae:	2001      	movs	r0, #1
 8002eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002eb4:	e7a6      	b.n	8002e04 <_svfiprintf_r+0xd4>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f04f 0c0a 	mov.w	ip, #10
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	3401      	adds	r4, #1
 8002ec0:	9305      	str	r3, [sp, #20]
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ec8:	3a30      	subs	r2, #48	; 0x30
 8002eca:	2a09      	cmp	r2, #9
 8002ecc:	d903      	bls.n	8002ed6 <_svfiprintf_r+0x1a6>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0c6      	beq.n	8002e60 <_svfiprintf_r+0x130>
 8002ed2:	9105      	str	r1, [sp, #20]
 8002ed4:	e7c4      	b.n	8002e60 <_svfiprintf_r+0x130>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	2301      	movs	r3, #1
 8002eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ede:	e7f0      	b.n	8002ec2 <_svfiprintf_r+0x192>
 8002ee0:	ab03      	add	r3, sp, #12
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	462a      	mov	r2, r5
 8002ee6:	4638      	mov	r0, r7
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <_svfiprintf_r+0x1f8>)
 8002eea:	a904      	add	r1, sp, #16
 8002eec:	f3af 8000 	nop.w
 8002ef0:	1c42      	adds	r2, r0, #1
 8002ef2:	4606      	mov	r6, r0
 8002ef4:	d1d6      	bne.n	8002ea4 <_svfiprintf_r+0x174>
 8002ef6:	89ab      	ldrh	r3, [r5, #12]
 8002ef8:	065b      	lsls	r3, r3, #25
 8002efa:	f53f af2d 	bmi.w	8002d58 <_svfiprintf_r+0x28>
 8002efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f00:	b01d      	add	sp, #116	; 0x74
 8002f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f06:	ab03      	add	r3, sp, #12
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	462a      	mov	r2, r5
 8002f0c:	4638      	mov	r0, r7
 8002f0e:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <_svfiprintf_r+0x1f8>)
 8002f10:	a904      	add	r1, sp, #16
 8002f12:	f000 f87d 	bl	8003010 <_printf_i>
 8002f16:	e7eb      	b.n	8002ef0 <_svfiprintf_r+0x1c0>
 8002f18:	080033c2 	.word	0x080033c2
 8002f1c:	080033c8 	.word	0x080033c8
 8002f20:	080033cc 	.word	0x080033cc
 8002f24:	00000000 	.word	0x00000000
 8002f28:	08002c7d 	.word	0x08002c7d

08002f2c <_printf_common>:
 8002f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f30:	4616      	mov	r6, r2
 8002f32:	4699      	mov	r9, r3
 8002f34:	688a      	ldr	r2, [r1, #8]
 8002f36:	690b      	ldr	r3, [r1, #16]
 8002f38:	4607      	mov	r7, r0
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	bfb8      	it	lt
 8002f3e:	4613      	movlt	r3, r2
 8002f40:	6033      	str	r3, [r6, #0]
 8002f42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f46:	460c      	mov	r4, r1
 8002f48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f4c:	b10a      	cbz	r2, 8002f52 <_printf_common+0x26>
 8002f4e:	3301      	adds	r3, #1
 8002f50:	6033      	str	r3, [r6, #0]
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	0699      	lsls	r1, r3, #26
 8002f56:	bf42      	ittt	mi
 8002f58:	6833      	ldrmi	r3, [r6, #0]
 8002f5a:	3302      	addmi	r3, #2
 8002f5c:	6033      	strmi	r3, [r6, #0]
 8002f5e:	6825      	ldr	r5, [r4, #0]
 8002f60:	f015 0506 	ands.w	r5, r5, #6
 8002f64:	d106      	bne.n	8002f74 <_printf_common+0x48>
 8002f66:	f104 0a19 	add.w	sl, r4, #25
 8002f6a:	68e3      	ldr	r3, [r4, #12]
 8002f6c:	6832      	ldr	r2, [r6, #0]
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	42ab      	cmp	r3, r5
 8002f72:	dc2b      	bgt.n	8002fcc <_printf_common+0xa0>
 8002f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f78:	1e13      	subs	r3, r2, #0
 8002f7a:	6822      	ldr	r2, [r4, #0]
 8002f7c:	bf18      	it	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	0692      	lsls	r2, r2, #26
 8002f82:	d430      	bmi.n	8002fe6 <_printf_common+0xba>
 8002f84:	4649      	mov	r1, r9
 8002f86:	4638      	mov	r0, r7
 8002f88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f8c:	47c0      	blx	r8
 8002f8e:	3001      	adds	r0, #1
 8002f90:	d023      	beq.n	8002fda <_printf_common+0xae>
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	6922      	ldr	r2, [r4, #16]
 8002f96:	f003 0306 	and.w	r3, r3, #6
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf14      	ite	ne
 8002f9e:	2500      	movne	r5, #0
 8002fa0:	6833      	ldreq	r3, [r6, #0]
 8002fa2:	f04f 0600 	mov.w	r6, #0
 8002fa6:	bf08      	it	eq
 8002fa8:	68e5      	ldreq	r5, [r4, #12]
 8002faa:	f104 041a 	add.w	r4, r4, #26
 8002fae:	bf08      	it	eq
 8002fb0:	1aed      	subeq	r5, r5, r3
 8002fb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002fb6:	bf08      	it	eq
 8002fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	bfc4      	itt	gt
 8002fc0:	1a9b      	subgt	r3, r3, r2
 8002fc2:	18ed      	addgt	r5, r5, r3
 8002fc4:	42b5      	cmp	r5, r6
 8002fc6:	d11a      	bne.n	8002ffe <_printf_common+0xd2>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	e008      	b.n	8002fde <_printf_common+0xb2>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	4652      	mov	r2, sl
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	4638      	mov	r0, r7
 8002fd4:	47c0      	blx	r8
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d103      	bne.n	8002fe2 <_printf_common+0xb6>
 8002fda:	f04f 30ff 	mov.w	r0, #4294967295
 8002fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe2:	3501      	adds	r5, #1
 8002fe4:	e7c1      	b.n	8002f6a <_printf_common+0x3e>
 8002fe6:	2030      	movs	r0, #48	; 0x30
 8002fe8:	18e1      	adds	r1, r4, r3
 8002fea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ff4:	4422      	add	r2, r4
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ffc:	e7c2      	b.n	8002f84 <_printf_common+0x58>
 8002ffe:	2301      	movs	r3, #1
 8003000:	4622      	mov	r2, r4
 8003002:	4649      	mov	r1, r9
 8003004:	4638      	mov	r0, r7
 8003006:	47c0      	blx	r8
 8003008:	3001      	adds	r0, #1
 800300a:	d0e6      	beq.n	8002fda <_printf_common+0xae>
 800300c:	3601      	adds	r6, #1
 800300e:	e7d9      	b.n	8002fc4 <_printf_common+0x98>

08003010 <_printf_i>:
 8003010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003014:	7e0f      	ldrb	r7, [r1, #24]
 8003016:	4691      	mov	r9, r2
 8003018:	2f78      	cmp	r7, #120	; 0x78
 800301a:	4680      	mov	r8, r0
 800301c:	460c      	mov	r4, r1
 800301e:	469a      	mov	sl, r3
 8003020:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003026:	d807      	bhi.n	8003038 <_printf_i+0x28>
 8003028:	2f62      	cmp	r7, #98	; 0x62
 800302a:	d80a      	bhi.n	8003042 <_printf_i+0x32>
 800302c:	2f00      	cmp	r7, #0
 800302e:	f000 80d5 	beq.w	80031dc <_printf_i+0x1cc>
 8003032:	2f58      	cmp	r7, #88	; 0x58
 8003034:	f000 80c1 	beq.w	80031ba <_printf_i+0x1aa>
 8003038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800303c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003040:	e03a      	b.n	80030b8 <_printf_i+0xa8>
 8003042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003046:	2b15      	cmp	r3, #21
 8003048:	d8f6      	bhi.n	8003038 <_printf_i+0x28>
 800304a:	a101      	add	r1, pc, #4	; (adr r1, 8003050 <_printf_i+0x40>)
 800304c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003050:	080030a9 	.word	0x080030a9
 8003054:	080030bd 	.word	0x080030bd
 8003058:	08003039 	.word	0x08003039
 800305c:	08003039 	.word	0x08003039
 8003060:	08003039 	.word	0x08003039
 8003064:	08003039 	.word	0x08003039
 8003068:	080030bd 	.word	0x080030bd
 800306c:	08003039 	.word	0x08003039
 8003070:	08003039 	.word	0x08003039
 8003074:	08003039 	.word	0x08003039
 8003078:	08003039 	.word	0x08003039
 800307c:	080031c3 	.word	0x080031c3
 8003080:	080030e9 	.word	0x080030e9
 8003084:	0800317d 	.word	0x0800317d
 8003088:	08003039 	.word	0x08003039
 800308c:	08003039 	.word	0x08003039
 8003090:	080031e5 	.word	0x080031e5
 8003094:	08003039 	.word	0x08003039
 8003098:	080030e9 	.word	0x080030e9
 800309c:	08003039 	.word	0x08003039
 80030a0:	08003039 	.word	0x08003039
 80030a4:	08003185 	.word	0x08003185
 80030a8:	682b      	ldr	r3, [r5, #0]
 80030aa:	1d1a      	adds	r2, r3, #4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	602a      	str	r2, [r5, #0]
 80030b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030b8:	2301      	movs	r3, #1
 80030ba:	e0a0      	b.n	80031fe <_printf_i+0x1ee>
 80030bc:	6820      	ldr	r0, [r4, #0]
 80030be:	682b      	ldr	r3, [r5, #0]
 80030c0:	0607      	lsls	r7, r0, #24
 80030c2:	f103 0104 	add.w	r1, r3, #4
 80030c6:	6029      	str	r1, [r5, #0]
 80030c8:	d501      	bpl.n	80030ce <_printf_i+0xbe>
 80030ca:	681e      	ldr	r6, [r3, #0]
 80030cc:	e003      	b.n	80030d6 <_printf_i+0xc6>
 80030ce:	0646      	lsls	r6, r0, #25
 80030d0:	d5fb      	bpl.n	80030ca <_printf_i+0xba>
 80030d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80030d6:	2e00      	cmp	r6, #0
 80030d8:	da03      	bge.n	80030e2 <_printf_i+0xd2>
 80030da:	232d      	movs	r3, #45	; 0x2d
 80030dc:	4276      	negs	r6, r6
 80030de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030e2:	230a      	movs	r3, #10
 80030e4:	4859      	ldr	r0, [pc, #356]	; (800324c <_printf_i+0x23c>)
 80030e6:	e012      	b.n	800310e <_printf_i+0xfe>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	6820      	ldr	r0, [r4, #0]
 80030ec:	1d19      	adds	r1, r3, #4
 80030ee:	6029      	str	r1, [r5, #0]
 80030f0:	0605      	lsls	r5, r0, #24
 80030f2:	d501      	bpl.n	80030f8 <_printf_i+0xe8>
 80030f4:	681e      	ldr	r6, [r3, #0]
 80030f6:	e002      	b.n	80030fe <_printf_i+0xee>
 80030f8:	0641      	lsls	r1, r0, #25
 80030fa:	d5fb      	bpl.n	80030f4 <_printf_i+0xe4>
 80030fc:	881e      	ldrh	r6, [r3, #0]
 80030fe:	2f6f      	cmp	r7, #111	; 0x6f
 8003100:	bf0c      	ite	eq
 8003102:	2308      	moveq	r3, #8
 8003104:	230a      	movne	r3, #10
 8003106:	4851      	ldr	r0, [pc, #324]	; (800324c <_printf_i+0x23c>)
 8003108:	2100      	movs	r1, #0
 800310a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800310e:	6865      	ldr	r5, [r4, #4]
 8003110:	2d00      	cmp	r5, #0
 8003112:	bfa8      	it	ge
 8003114:	6821      	ldrge	r1, [r4, #0]
 8003116:	60a5      	str	r5, [r4, #8]
 8003118:	bfa4      	itt	ge
 800311a:	f021 0104 	bicge.w	r1, r1, #4
 800311e:	6021      	strge	r1, [r4, #0]
 8003120:	b90e      	cbnz	r6, 8003126 <_printf_i+0x116>
 8003122:	2d00      	cmp	r5, #0
 8003124:	d04b      	beq.n	80031be <_printf_i+0x1ae>
 8003126:	4615      	mov	r5, r2
 8003128:	fbb6 f1f3 	udiv	r1, r6, r3
 800312c:	fb03 6711 	mls	r7, r3, r1, r6
 8003130:	5dc7      	ldrb	r7, [r0, r7]
 8003132:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003136:	4637      	mov	r7, r6
 8003138:	42bb      	cmp	r3, r7
 800313a:	460e      	mov	r6, r1
 800313c:	d9f4      	bls.n	8003128 <_printf_i+0x118>
 800313e:	2b08      	cmp	r3, #8
 8003140:	d10b      	bne.n	800315a <_printf_i+0x14a>
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	07de      	lsls	r6, r3, #31
 8003146:	d508      	bpl.n	800315a <_printf_i+0x14a>
 8003148:	6923      	ldr	r3, [r4, #16]
 800314a:	6861      	ldr	r1, [r4, #4]
 800314c:	4299      	cmp	r1, r3
 800314e:	bfde      	ittt	le
 8003150:	2330      	movle	r3, #48	; 0x30
 8003152:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003156:	f105 35ff 	addle.w	r5, r5, #4294967295
 800315a:	1b52      	subs	r2, r2, r5
 800315c:	6122      	str	r2, [r4, #16]
 800315e:	464b      	mov	r3, r9
 8003160:	4621      	mov	r1, r4
 8003162:	4640      	mov	r0, r8
 8003164:	f8cd a000 	str.w	sl, [sp]
 8003168:	aa03      	add	r2, sp, #12
 800316a:	f7ff fedf 	bl	8002f2c <_printf_common>
 800316e:	3001      	adds	r0, #1
 8003170:	d14a      	bne.n	8003208 <_printf_i+0x1f8>
 8003172:	f04f 30ff 	mov.w	r0, #4294967295
 8003176:	b004      	add	sp, #16
 8003178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	f043 0320 	orr.w	r3, r3, #32
 8003182:	6023      	str	r3, [r4, #0]
 8003184:	2778      	movs	r7, #120	; 0x78
 8003186:	4832      	ldr	r0, [pc, #200]	; (8003250 <_printf_i+0x240>)
 8003188:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	6829      	ldr	r1, [r5, #0]
 8003190:	061f      	lsls	r7, r3, #24
 8003192:	f851 6b04 	ldr.w	r6, [r1], #4
 8003196:	d402      	bmi.n	800319e <_printf_i+0x18e>
 8003198:	065f      	lsls	r7, r3, #25
 800319a:	bf48      	it	mi
 800319c:	b2b6      	uxthmi	r6, r6
 800319e:	07df      	lsls	r7, r3, #31
 80031a0:	bf48      	it	mi
 80031a2:	f043 0320 	orrmi.w	r3, r3, #32
 80031a6:	6029      	str	r1, [r5, #0]
 80031a8:	bf48      	it	mi
 80031aa:	6023      	strmi	r3, [r4, #0]
 80031ac:	b91e      	cbnz	r6, 80031b6 <_printf_i+0x1a6>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	f023 0320 	bic.w	r3, r3, #32
 80031b4:	6023      	str	r3, [r4, #0]
 80031b6:	2310      	movs	r3, #16
 80031b8:	e7a6      	b.n	8003108 <_printf_i+0xf8>
 80031ba:	4824      	ldr	r0, [pc, #144]	; (800324c <_printf_i+0x23c>)
 80031bc:	e7e4      	b.n	8003188 <_printf_i+0x178>
 80031be:	4615      	mov	r5, r2
 80031c0:	e7bd      	b.n	800313e <_printf_i+0x12e>
 80031c2:	682b      	ldr	r3, [r5, #0]
 80031c4:	6826      	ldr	r6, [r4, #0]
 80031c6:	1d18      	adds	r0, r3, #4
 80031c8:	6961      	ldr	r1, [r4, #20]
 80031ca:	6028      	str	r0, [r5, #0]
 80031cc:	0635      	lsls	r5, r6, #24
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	d501      	bpl.n	80031d6 <_printf_i+0x1c6>
 80031d2:	6019      	str	r1, [r3, #0]
 80031d4:	e002      	b.n	80031dc <_printf_i+0x1cc>
 80031d6:	0670      	lsls	r0, r6, #25
 80031d8:	d5fb      	bpl.n	80031d2 <_printf_i+0x1c2>
 80031da:	8019      	strh	r1, [r3, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	4615      	mov	r5, r2
 80031e0:	6123      	str	r3, [r4, #16]
 80031e2:	e7bc      	b.n	800315e <_printf_i+0x14e>
 80031e4:	682b      	ldr	r3, [r5, #0]
 80031e6:	2100      	movs	r1, #0
 80031e8:	1d1a      	adds	r2, r3, #4
 80031ea:	602a      	str	r2, [r5, #0]
 80031ec:	681d      	ldr	r5, [r3, #0]
 80031ee:	6862      	ldr	r2, [r4, #4]
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f859 	bl	80032a8 <memchr>
 80031f6:	b108      	cbz	r0, 80031fc <_printf_i+0x1ec>
 80031f8:	1b40      	subs	r0, r0, r5
 80031fa:	6060      	str	r0, [r4, #4]
 80031fc:	6863      	ldr	r3, [r4, #4]
 80031fe:	6123      	str	r3, [r4, #16]
 8003200:	2300      	movs	r3, #0
 8003202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003206:	e7aa      	b.n	800315e <_printf_i+0x14e>
 8003208:	462a      	mov	r2, r5
 800320a:	4649      	mov	r1, r9
 800320c:	4640      	mov	r0, r8
 800320e:	6923      	ldr	r3, [r4, #16]
 8003210:	47d0      	blx	sl
 8003212:	3001      	adds	r0, #1
 8003214:	d0ad      	beq.n	8003172 <_printf_i+0x162>
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	079b      	lsls	r3, r3, #30
 800321a:	d413      	bmi.n	8003244 <_printf_i+0x234>
 800321c:	68e0      	ldr	r0, [r4, #12]
 800321e:	9b03      	ldr	r3, [sp, #12]
 8003220:	4298      	cmp	r0, r3
 8003222:	bfb8      	it	lt
 8003224:	4618      	movlt	r0, r3
 8003226:	e7a6      	b.n	8003176 <_printf_i+0x166>
 8003228:	2301      	movs	r3, #1
 800322a:	4632      	mov	r2, r6
 800322c:	4649      	mov	r1, r9
 800322e:	4640      	mov	r0, r8
 8003230:	47d0      	blx	sl
 8003232:	3001      	adds	r0, #1
 8003234:	d09d      	beq.n	8003172 <_printf_i+0x162>
 8003236:	3501      	adds	r5, #1
 8003238:	68e3      	ldr	r3, [r4, #12]
 800323a:	9903      	ldr	r1, [sp, #12]
 800323c:	1a5b      	subs	r3, r3, r1
 800323e:	42ab      	cmp	r3, r5
 8003240:	dcf2      	bgt.n	8003228 <_printf_i+0x218>
 8003242:	e7eb      	b.n	800321c <_printf_i+0x20c>
 8003244:	2500      	movs	r5, #0
 8003246:	f104 0619 	add.w	r6, r4, #25
 800324a:	e7f5      	b.n	8003238 <_printf_i+0x228>
 800324c:	080033d3 	.word	0x080033d3
 8003250:	080033e4 	.word	0x080033e4

08003254 <memmove>:
 8003254:	4288      	cmp	r0, r1
 8003256:	b510      	push	{r4, lr}
 8003258:	eb01 0402 	add.w	r4, r1, r2
 800325c:	d902      	bls.n	8003264 <memmove+0x10>
 800325e:	4284      	cmp	r4, r0
 8003260:	4623      	mov	r3, r4
 8003262:	d807      	bhi.n	8003274 <memmove+0x20>
 8003264:	1e43      	subs	r3, r0, #1
 8003266:	42a1      	cmp	r1, r4
 8003268:	d008      	beq.n	800327c <memmove+0x28>
 800326a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800326e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003272:	e7f8      	b.n	8003266 <memmove+0x12>
 8003274:	4601      	mov	r1, r0
 8003276:	4402      	add	r2, r0
 8003278:	428a      	cmp	r2, r1
 800327a:	d100      	bne.n	800327e <memmove+0x2a>
 800327c:	bd10      	pop	{r4, pc}
 800327e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003286:	e7f7      	b.n	8003278 <memmove+0x24>

08003288 <_sbrk_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	2300      	movs	r3, #0
 800328c:	4d05      	ldr	r5, [pc, #20]	; (80032a4 <_sbrk_r+0x1c>)
 800328e:	4604      	mov	r4, r0
 8003290:	4608      	mov	r0, r1
 8003292:	602b      	str	r3, [r5, #0]
 8003294:	f7fd f9e2 	bl	800065c <_sbrk>
 8003298:	1c43      	adds	r3, r0, #1
 800329a:	d102      	bne.n	80032a2 <_sbrk_r+0x1a>
 800329c:	682b      	ldr	r3, [r5, #0]
 800329e:	b103      	cbz	r3, 80032a2 <_sbrk_r+0x1a>
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	bd38      	pop	{r3, r4, r5, pc}
 80032a4:	20000254 	.word	0x20000254

080032a8 <memchr>:
 80032a8:	4603      	mov	r3, r0
 80032aa:	b510      	push	{r4, lr}
 80032ac:	b2c9      	uxtb	r1, r1
 80032ae:	4402      	add	r2, r0
 80032b0:	4293      	cmp	r3, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	d101      	bne.n	80032ba <memchr+0x12>
 80032b6:	2000      	movs	r0, #0
 80032b8:	e003      	b.n	80032c2 <memchr+0x1a>
 80032ba:	7804      	ldrb	r4, [r0, #0]
 80032bc:	3301      	adds	r3, #1
 80032be:	428c      	cmp	r4, r1
 80032c0:	d1f6      	bne.n	80032b0 <memchr+0x8>
 80032c2:	bd10      	pop	{r4, pc}

080032c4 <memcpy>:
 80032c4:	440a      	add	r2, r1
 80032c6:	4291      	cmp	r1, r2
 80032c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80032cc:	d100      	bne.n	80032d0 <memcpy+0xc>
 80032ce:	4770      	bx	lr
 80032d0:	b510      	push	{r4, lr}
 80032d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032d6:	4291      	cmp	r1, r2
 80032d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032dc:	d1f9      	bne.n	80032d2 <memcpy+0xe>
 80032de:	bd10      	pop	{r4, pc}

080032e0 <_realloc_r>:
 80032e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e4:	4680      	mov	r8, r0
 80032e6:	4614      	mov	r4, r2
 80032e8:	460e      	mov	r6, r1
 80032ea:	b921      	cbnz	r1, 80032f6 <_realloc_r+0x16>
 80032ec:	4611      	mov	r1, r2
 80032ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032f2:	f7ff bc37 	b.w	8002b64 <_malloc_r>
 80032f6:	b92a      	cbnz	r2, 8003304 <_realloc_r+0x24>
 80032f8:	f7ff fbcc 	bl	8002a94 <_free_r>
 80032fc:	4625      	mov	r5, r4
 80032fe:	4628      	mov	r0, r5
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	f000 f81b 	bl	800333e <_malloc_usable_size_r>
 8003308:	4284      	cmp	r4, r0
 800330a:	4607      	mov	r7, r0
 800330c:	d802      	bhi.n	8003314 <_realloc_r+0x34>
 800330e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003312:	d812      	bhi.n	800333a <_realloc_r+0x5a>
 8003314:	4621      	mov	r1, r4
 8003316:	4640      	mov	r0, r8
 8003318:	f7ff fc24 	bl	8002b64 <_malloc_r>
 800331c:	4605      	mov	r5, r0
 800331e:	2800      	cmp	r0, #0
 8003320:	d0ed      	beq.n	80032fe <_realloc_r+0x1e>
 8003322:	42bc      	cmp	r4, r7
 8003324:	4622      	mov	r2, r4
 8003326:	4631      	mov	r1, r6
 8003328:	bf28      	it	cs
 800332a:	463a      	movcs	r2, r7
 800332c:	f7ff ffca 	bl	80032c4 <memcpy>
 8003330:	4631      	mov	r1, r6
 8003332:	4640      	mov	r0, r8
 8003334:	f7ff fbae 	bl	8002a94 <_free_r>
 8003338:	e7e1      	b.n	80032fe <_realloc_r+0x1e>
 800333a:	4635      	mov	r5, r6
 800333c:	e7df      	b.n	80032fe <_realloc_r+0x1e>

0800333e <_malloc_usable_size_r>:
 800333e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003342:	1f18      	subs	r0, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	bfbc      	itt	lt
 8003348:	580b      	ldrlt	r3, [r1, r0]
 800334a:	18c0      	addlt	r0, r0, r3
 800334c:	4770      	bx	lr
	...

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
