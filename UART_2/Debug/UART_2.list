
UART_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000234c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  08002458  08002458  00012458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002674  08002674  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002674  08002674  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002674  08002674  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800267c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  080026d8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080026d8  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000691e  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015bb  00000000  00000000  000269e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000658  00000000  00000000  00027fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004c7  00000000  00000000  00028600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d0e  00000000  00000000  00028ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008807  00000000  00000000  0003f7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081988  00000000  00000000  00047fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001d80  00000000  00000000  000c9964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000cb6e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002440 	.word	0x08002440

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002440 	.word	0x08002440

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b34      	ldr	r3, [pc, #208]	; (8000244 <MX_GPIO_Init+0xe8>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a33      	ldr	r2, [pc, #204]	; (8000244 <MX_GPIO_Init+0xe8>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b31      	ldr	r3, [pc, #196]	; (8000244 <MX_GPIO_Init+0xe8>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b2e      	ldr	r3, [pc, #184]	; (8000244 <MX_GPIO_Init+0xe8>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a2d      	ldr	r2, [pc, #180]	; (8000244 <MX_GPIO_Init+0xe8>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b2b      	ldr	r3, [pc, #172]	; (8000244 <MX_GPIO_Init+0xe8>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b28      	ldr	r3, [pc, #160]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a27      	ldr	r2, [pc, #156]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b25      	ldr	r3, [pc, #148]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b8:	4b22      	ldr	r3, [pc, #136]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a21      	ldr	r2, [pc, #132]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001be:	f043 0304 	orr.w	r3, r3, #4
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <MX_GPIO_Init+0xe8>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0304 	and.w	r3, r3, #4
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	481c      	ldr	r0, [pc, #112]	; (8000248 <MX_GPIO_Init+0xec>)
 80001d8:	f000 fd2a 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 80001dc:	2200      	movs	r2, #0
 80001de:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80001e2:	481a      	ldr	r0, [pc, #104]	; (800024c <MX_GPIO_Init+0xf0>)
 80001e4:	f000 fd24 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80001e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ee:	2301      	movs	r3, #1
 80001f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f2:	2300      	movs	r3, #0
 80001f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f6:	2302      	movs	r3, #2
 80001f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80001fa:	f107 0310 	add.w	r3, r7, #16
 80001fe:	4619      	mov	r1, r3
 8000200:	4811      	ldr	r0, [pc, #68]	; (8000248 <MX_GPIO_Init+0xec>)
 8000202:	f000 fb91 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000206:	2302      	movs	r3, #2
 8000208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <MX_GPIO_Init+0xf0>)
 800021a:	f000 fb85 	bl	8000928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|BLUE_LED_Pin;
 800021e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000224:	2301      	movs	r3, #1
 8000226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000228:	2300      	movs	r3, #0
 800022a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022c:	2302      	movs	r3, #2
 800022e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000230:	f107 0310 	add.w	r3, r7, #16
 8000234:	4619      	mov	r1, r3
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <MX_GPIO_Init+0xf0>)
 8000238:	f000 fb76 	bl	8000928 <HAL_GPIO_Init>

}
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40021000 	.word	0x40021000
 8000248:	40011000 	.word	0x40011000
 800024c:	40010c00 	.word	0x40010c00

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t option = 0; // Initial option value
 8000256:	2300      	movs	r3, #0
 8000258:	71fb      	strb	r3, [r7, #7]
	uint8_t result = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 fa1d 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f814 	bl	800028e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f7ff ff79 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800026a:	f000 f97b 	bl	8000564 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printMessage:

	  printWelcomeMessage();
 800026e:	f000 f84b 	bl	8000308 <printWelcomeMessage>

	  /* Infinite loop */
	  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
		  option = readInput();
 8000272:	f000 f861 	bl	8000338 <readInput>
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
		  result = processInput(option);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f87b 	bl	8000378 <processInput>
 8000282:	4603      	mov	r3, r0
 8000284:	71bb      	strb	r3, [r7, #6]
		  if(result==1) goto printMessage;
 8000286:	79bb      	ldrb	r3, [r7, #6]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d1f2      	bne.n	8000272 <main+0x22>
 800028c:	e7ef      	b.n	800026e <main+0x1e>

0800028e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b090      	sub	sp, #64	; 0x40
 8000292:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	2228      	movs	r2, #40	; 0x28
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f001 fc3d 	bl	8001b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b0:	2301      	movs	r3, #1
 80002b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ba:	2300      	movs	r3, #0
 80002bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fce6 	bl	8000c94 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x44>
  {
    Error_Handler();
 80002ce:	f000 f8ab 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80002d6:	2301      	movs	r3, #1
 80002d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 ff54 	bl	8001198 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002f6:	f000 f897 	bl	8000428 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002fa:	f001 f837 	bl	800136c <HAL_RCC_EnableCSS>
}
 80002fe:	bf00      	nop
 8000300:	3740      	adds	r7, #64	; 0x40
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */

/* Print welcome message at startup*/
void printWelcomeMessage(void){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 800030c:	f04f 33ff 	mov.w	r3, #4294967295
 8000310:	2224      	movs	r2, #36	; 0x24
 8000312:	4906      	ldr	r1, [pc, #24]	; (800032c <printWelcomeMessage+0x24>)
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <printWelcomeMessage+0x28>)
 8000316:	f001 f943 	bl	80015a0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 800031a:	f04f 33ff 	mov.w	r3, #4294967295
 800031e:	2248      	movs	r2, #72	; 0x48
 8000320:	4904      	ldr	r1, [pc, #16]	; (8000334 <printWelcomeMessage+0x2c>)
 8000322:	4803      	ldr	r0, [pc, #12]	; (8000330 <printWelcomeMessage+0x28>)
 8000324:	f001 f93c 	bl	80015a0 <HAL_UART_Transmit>
}
 8000328:	bf00      	nop
 800032a:	bd80      	pop	{r7, pc}
 800032c:	08002458 	.word	0x08002458
 8000330:	2000007c 	.word	0x2000007c
 8000334:	08002480 	.word	0x08002480

08000338 <readInput>:


/* Read user input and return the option selected 1-2-3*/
uint8_t readInput(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
	char rxBuffer[1];

	HAL_UART_Transmit(&huart1, PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 800033e:	f04f 33ff 	mov.w	r3, #4294967295
 8000342:	2203      	movs	r2, #3
 8000344:	490a      	ldr	r1, [pc, #40]	; (8000370 <readInput+0x38>)
 8000346:	480b      	ldr	r0, [pc, #44]	; (8000374 <readInput+0x3c>)
 8000348:	f001 f92a 	bl	80015a0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rxBuffer, 1, HAL_MAX_DELAY);
 800034c:	1d39      	adds	r1, r7, #4
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
 8000352:	2201      	movs	r2, #1
 8000354:	4807      	ldr	r0, [pc, #28]	; (8000374 <readInput+0x3c>)
 8000356:	f001 f9a6 	bl	80016a6 <HAL_UART_Receive>

	return atoi(rxBuffer);
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fb31 	bl	80019c4 <atoi>
 8000362:	4603      	mov	r3, r0
 8000364:	b2db      	uxtb	r3, r3
}
 8000366:	4618      	mov	r0, r3
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	080024cc 	.word	0x080024cc
 8000374:	2000007c 	.word	0x2000007c

08000378 <processInput>:

uint8_t processInput(uint8_t option){
 8000378:	b580      	push	{r7, lr}
 800037a:	b08a      	sub	sp, #40	; 0x28
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	char msg[30];

	// print what was selected
	sprintf(msg, "\r\n> Executing OPTION %d...\r\n",option);
 8000382:	79fa      	ldrb	r2, [r7, #7]
 8000384:	f107 0308 	add.w	r3, r7, #8
 8000388:	4922      	ldr	r1, [pc, #136]	; (8000414 <processInput+0x9c>)
 800038a:	4618      	mov	r0, r3
 800038c:	f001 fba6 	bl	8001adc <siprintf>
	HAL_UART_Transmit(&huart1, msg, strlen(msg), HAL_MAX_DELAY);
 8000390:	f107 0308 	add.w	r3, r7, #8
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff fed9 	bl	800014c <strlen>
 800039a:	4603      	mov	r3, r0
 800039c:	b29a      	uxth	r2, r3
 800039e:	f107 0108 	add.w	r1, r7, #8
 80003a2:	f04f 33ff 	mov.w	r3, #4294967295
 80003a6:	481c      	ldr	r0, [pc, #112]	; (8000418 <processInput+0xa0>)
 80003a8:	f001 f8fa 	bl	80015a0 <HAL_UART_Transmit>

	// Execute selected action
	switch(option){
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	2b03      	cmp	r3, #3
 80003b0:	d014      	beq.n	80003dc <processInput+0x64>
 80003b2:	2b03      	cmp	r3, #3
 80003b4:	dc1b      	bgt.n	80003ee <processInput+0x76>
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d002      	beq.n	80003c0 <processInput+0x48>
 80003ba:	2b02      	cmp	r3, #2
 80003bc:	d007      	beq.n	80003ce <processInput+0x56>
 80003be:	e016      	b.n	80003ee <processInput+0x76>
	case 1: // toggle green led
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 80003c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c4:	4815      	ldr	r0, [pc, #84]	; (800041c <processInput+0xa4>)
 80003c6:	f000 fc4b 	bl	8000c60 <HAL_GPIO_TogglePin>
		return 0;
 80003ca:	2300      	movs	r3, #0
 80003cc:	e01d      	b.n	800040a <processInput+0x92>
	case 2: // toggle blue led
		HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80003ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d2:	4812      	ldr	r0, [pc, #72]	; (800041c <processInput+0xa4>)
 80003d4:	f000 fc44 	bl	8000c60 <HAL_GPIO_TogglePin>
		return 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	e016      	b.n	800040a <processInput+0x92>
	case 3:
		HAL_UART_Transmit(&huart1, "\a", 1, HAL_MAX_DELAY);
 80003dc:	f04f 33ff 	mov.w	r3, #4294967295
 80003e0:	2201      	movs	r2, #1
 80003e2:	490f      	ldr	r1, [pc, #60]	; (8000420 <processInput+0xa8>)
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <processInput+0xa0>)
 80003e6:	f001 f8db 	bl	80015a0 <HAL_UART_Transmit>
		return 0;
 80003ea:	2300      	movs	r3, #0
 80003ec:	e00d      	b.n	800040a <processInput+0x92>
	default:
		sprintf(msg, "\r\n> %d is not a valid option");
 80003ee:	f107 0308 	add.w	r3, r7, #8
 80003f2:	490c      	ldr	r1, [pc, #48]	; (8000424 <processInput+0xac>)
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 fb71 	bl	8001adc <siprintf>
		HAL_UART_Transmit(&huart1, "\a", 1, HAL_MAX_DELAY);
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
 80003fe:	2201      	movs	r2, #1
 8000400:	4907      	ldr	r1, [pc, #28]	; (8000420 <processInput+0xa8>)
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <processInput+0xa0>)
 8000404:	f001 f8cc 	bl	80015a0 <HAL_UART_Transmit>
		return 1;
 8000408:	2301      	movs	r3, #1

	}

}
 800040a:	4618      	mov	r0, r3
 800040c:	3728      	adds	r7, #40	; 0x28
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	080024d0 	.word	0x080024d0
 8000418:	2000007c 	.word	0x2000007c
 800041c:	40010c00 	.word	0x40010c00
 8000420:	080024f0 	.word	0x080024f0
 8000424:	080024f4 	.word	0x080024f4

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	e7fe      	b.n	8000430 <Error_Handler+0x8>
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	; (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	; (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_MspInit+0x60>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_MspInit+0x60>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800049c:	f000 fff8 	bl	8001490 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <NMI_Handler+0x8>

080004a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	e7fe      	b.n	80004ac <MemManage_Handler+0x4>

080004ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b2:	e7fe      	b.n	80004b2 <BusFault_Handler+0x4>

080004b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <UsageFault_Handler+0x4>

080004ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e2:	f000 f921 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <_sbrk+0x5c>)
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <_sbrk+0x60>)
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <_sbrk+0x64>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d102      	bne.n	800050e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <_sbrk+0x64>)
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <_sbrk+0x68>)
 800050c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <_sbrk+0x64>)
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4413      	add	r3, r2
 8000516:	693a      	ldr	r2, [r7, #16]
 8000518:	429a      	cmp	r2, r3
 800051a:	d207      	bcs.n	800052c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800051c:	f001 fb06 	bl	8001b2c <__errno>
 8000520:	4603      	mov	r3, r0
 8000522:	220c      	movs	r2, #12
 8000524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	e009      	b.n	8000540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <_sbrk+0x64>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <_sbrk+0x64>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <_sbrk+0x64>)
 800053c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800053e:	68fb      	ldr	r3, [r7, #12]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20005000 	.word	0x20005000
 800054c:	00000400 	.word	0x00000400
 8000550:	20000078 	.word	0x20000078
 8000554:	20000210 	.word	0x20000210

08000558 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000568:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 800056a:	4a12      	ldr	r2, [pc, #72]	; (80005b4 <MX_USART1_UART_Init+0x50>)
 800056c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000570:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000574:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 800058a:	220c      	movs	r2, #12
 800058c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 8000596:	2200      	movs	r2, #0
 8000598:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_USART1_UART_Init+0x4c>)
 800059c:	f000 ffb0 	bl	8001500 <HAL_UART_Init>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005a6:	f7ff ff3f 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000007c 	.word	0x2000007c
 80005b4:	40013800 	.word	0x40013800

080005b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <HAL_UART_MspInit+0x8c>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d131      	bne.n	800063c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <HAL_UART_MspInit+0x90>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	4a1a      	ldr	r2, [pc, #104]	; (8000648 <HAL_UART_MspInit+0x90>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e2:	6193      	str	r3, [r2, #24]
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <HAL_UART_MspInit+0x90>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_UART_MspInit+0x90>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a14      	ldr	r2, [pc, #80]	; (8000648 <HAL_UART_MspInit+0x90>)
 80005f6:	f043 0304 	orr.w	r3, r3, #4
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_UART_MspInit+0x90>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f003 0304 	and.w	r3, r3, #4
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000616:	f107 0310 	add.w	r3, r7, #16
 800061a:	4619      	mov	r1, r3
 800061c:	480b      	ldr	r0, [pc, #44]	; (800064c <HAL_UART_MspInit+0x94>)
 800061e:	f000 f983 	bl	8000928 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000626:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	4619      	mov	r1, r3
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <HAL_UART_MspInit+0x94>)
 8000638:	f000 f976 	bl	8000928 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800063c:	bf00      	nop
 800063e:	3720      	adds	r7, #32
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40013800 	.word	0x40013800
 8000648:	40021000 	.word	0x40021000
 800064c:	40010800 	.word	0x40010800

08000650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000650:	f7ff ff82 	bl	8000558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000656:	490c      	ldr	r1, [pc, #48]	; (8000688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <LoopFillZerobss+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800066c:	4c09      	ldr	r4, [pc, #36]	; (8000694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067a:	f001 fa5d 	bl	8001b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fde7 	bl	8000250 <main>
  bx lr
 8000682:	4770      	bx	lr
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800068c:	0800267c 	.word	0x0800267c
  ldr r2, =_sbss
 8000690:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000694:	20000210 	.word	0x20000210

08000698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_2_IRQHandler>
	...

0800069c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_Init+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <HAL_Init+0x28>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f907 	bl	80008c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b2:	200f      	movs	r0, #15
 80006b4:	f000 f808 	bl	80006c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff febc 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_InitTick+0x54>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <HAL_InitTick+0x58>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006de:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f911 	bl	800090e <HAL_SYSTICK_Config>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00e      	b.n	8000714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d80a      	bhi.n	8000712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295
 8000704:	f000 f8e7 	bl	80008d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <HAL_InitTick+0x5c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	e000      	b.n	8000714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000008 	.word	0x20000008
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <HAL_IncTick+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x20>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	4a03      	ldr	r2, [pc, #12]	; (8000748 <HAL_IncTick+0x20>)
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	20000008 	.word	0x20000008
 8000748:	200000c4 	.word	0x200000c4

0800074c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b02      	ldr	r3, [pc, #8]	; (800075c <HAL_GetTick+0x10>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	200000c4 	.word	0x200000c4

08000760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	60d3      	str	r3, [r2, #12]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	f003 0307 	and.w	r3, r3, #7
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	db0a      	blt.n	80007ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	b2da      	uxtb	r2, r3
 80007dc:	490c      	ldr	r1, [pc, #48]	; (8000810 <__NVIC_SetPriority+0x4c>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	0112      	lsls	r2, r2, #4
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	440b      	add	r3, r1
 80007e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ec:	e00a      	b.n	8000804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4908      	ldr	r1, [pc, #32]	; (8000814 <__NVIC_SetPriority+0x50>)
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	f003 030f 	and.w	r3, r3, #15
 80007fa:	3b04      	subs	r3, #4
 80007fc:	0112      	lsls	r2, r2, #4
 80007fe:	b2d2      	uxtb	r2, r2
 8000800:	440b      	add	r3, r1
 8000802:	761a      	strb	r2, [r3, #24]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000818:	b480      	push	{r7}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f1c3 0307 	rsb	r3, r3, #7
 8000832:	2b04      	cmp	r3, #4
 8000834:	bf28      	it	cs
 8000836:	2304      	movcs	r3, #4
 8000838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3304      	adds	r3, #4
 800083e:	2b06      	cmp	r3, #6
 8000840:	d902      	bls.n	8000848 <NVIC_EncodePriority+0x30>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3b03      	subs	r3, #3
 8000846:	e000      	b.n	800084a <NVIC_EncodePriority+0x32>
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084c:	f04f 32ff 	mov.w	r2, #4294967295
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43da      	mvns	r2, r3
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	401a      	ands	r2, r3
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000860:	f04f 31ff 	mov.w	r1, #4294967295
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	fa01 f303 	lsl.w	r3, r1, r3
 800086a:	43d9      	mvns	r1, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000870:	4313      	orrs	r3, r2
         );
}
 8000872:	4618      	mov	r0, r3
 8000874:	3724      	adds	r7, #36	; 0x24
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	3b01      	subs	r3, #1
 8000888:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800088c:	d301      	bcc.n	8000892 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088e:	2301      	movs	r3, #1
 8000890:	e00f      	b.n	80008b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <SysTick_Config+0x40>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089a:	210f      	movs	r1, #15
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f7ff ff90 	bl	80007c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	4b05      	ldr	r3, [pc, #20]	; (80008bc <SysTick_Config+0x40>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <SysTick_Config+0x40>)
 80008ac:	2207      	movs	r2, #7
 80008ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff49 	bl	8000760 <__NVIC_SetPriorityGrouping>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	4603      	mov	r3, r0
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
 80008e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e8:	f7ff ff5e 	bl	80007a8 <__NVIC_GetPriorityGrouping>
 80008ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ee:	687a      	ldr	r2, [r7, #4]
 80008f0:	68b9      	ldr	r1, [r7, #8]
 80008f2:	6978      	ldr	r0, [r7, #20]
 80008f4:	f7ff ff90 	bl	8000818 <NVIC_EncodePriority>
 80008f8:	4602      	mov	r2, r0
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4611      	mov	r1, r2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff5f 	bl	80007c4 <__NVIC_SetPriority>
}
 8000906:	bf00      	nop
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffb0 	bl	800087c <SysTick_Config>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000928:	b480      	push	{r7}
 800092a:	b08b      	sub	sp, #44	; 0x2c
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093a:	e169      	b.n	8000c10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800093c:	2201      	movs	r2, #1
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	69fa      	ldr	r2, [r7, #28]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	429a      	cmp	r2, r3
 8000956:	f040 8158 	bne.w	8000c0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	4a9a      	ldr	r2, [pc, #616]	; (8000bc8 <HAL_GPIO_Init+0x2a0>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d05e      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000964:	4a98      	ldr	r2, [pc, #608]	; (8000bc8 <HAL_GPIO_Init+0x2a0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d875      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800096a:	4a98      	ldr	r2, [pc, #608]	; (8000bcc <HAL_GPIO_Init+0x2a4>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d058      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000970:	4a96      	ldr	r2, [pc, #600]	; (8000bcc <HAL_GPIO_Init+0x2a4>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d86f      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000976:	4a96      	ldr	r2, [pc, #600]	; (8000bd0 <HAL_GPIO_Init+0x2a8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d052      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 800097c:	4a94      	ldr	r2, [pc, #592]	; (8000bd0 <HAL_GPIO_Init+0x2a8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d869      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 8000982:	4a94      	ldr	r2, [pc, #592]	; (8000bd4 <HAL_GPIO_Init+0x2ac>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d04c      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000988:	4a92      	ldr	r2, [pc, #584]	; (8000bd4 <HAL_GPIO_Init+0x2ac>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d863      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800098e:	4a92      	ldr	r2, [pc, #584]	; (8000bd8 <HAL_GPIO_Init+0x2b0>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d046      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
 8000994:	4a90      	ldr	r2, [pc, #576]	; (8000bd8 <HAL_GPIO_Init+0x2b0>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d85d      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 800099a:	2b12      	cmp	r3, #18
 800099c:	d82a      	bhi.n	80009f4 <HAL_GPIO_Init+0xcc>
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d859      	bhi.n	8000a56 <HAL_GPIO_Init+0x12e>
 80009a2:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <HAL_GPIO_Init+0x80>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	08000a23 	.word	0x08000a23
 80009ac:	080009fd 	.word	0x080009fd
 80009b0:	08000a0f 	.word	0x08000a0f
 80009b4:	08000a51 	.word	0x08000a51
 80009b8:	08000a57 	.word	0x08000a57
 80009bc:	08000a57 	.word	0x08000a57
 80009c0:	08000a57 	.word	0x08000a57
 80009c4:	08000a57 	.word	0x08000a57
 80009c8:	08000a57 	.word	0x08000a57
 80009cc:	08000a57 	.word	0x08000a57
 80009d0:	08000a57 	.word	0x08000a57
 80009d4:	08000a57 	.word	0x08000a57
 80009d8:	08000a57 	.word	0x08000a57
 80009dc:	08000a57 	.word	0x08000a57
 80009e0:	08000a57 	.word	0x08000a57
 80009e4:	08000a57 	.word	0x08000a57
 80009e8:	08000a57 	.word	0x08000a57
 80009ec:	08000a05 	.word	0x08000a05
 80009f0:	08000a19 	.word	0x08000a19
 80009f4:	4a79      	ldr	r2, [pc, #484]	; (8000bdc <HAL_GPIO_Init+0x2b4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d013      	beq.n	8000a22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009fa:	e02c      	b.n	8000a56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	623b      	str	r3, [r7, #32]
          break;
 8000a02:	e029      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	623b      	str	r3, [r7, #32]
          break;
 8000a0c:	e024      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	68db      	ldr	r3, [r3, #12]
 8000a12:	3308      	adds	r3, #8
 8000a14:	623b      	str	r3, [r7, #32]
          break;
 8000a16:	e01f      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	330c      	adds	r3, #12
 8000a1e:	623b      	str	r3, [r7, #32]
          break;
 8000a20:	e01a      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d102      	bne.n	8000a30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	623b      	str	r3, [r7, #32]
          break;
 8000a2e:	e013      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d105      	bne.n	8000a44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a38:	2308      	movs	r3, #8
 8000a3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	611a      	str	r2, [r3, #16]
          break;
 8000a42:	e009      	b.n	8000a58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a44:	2308      	movs	r3, #8
 8000a46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	615a      	str	r2, [r3, #20]
          break;
 8000a4e:	e003      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
          break;
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_Init+0x130>
          break;
 8000a56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2bff      	cmp	r3, #255	; 0xff
 8000a5c:	d801      	bhi.n	8000a62 <HAL_GPIO_Init+0x13a>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	e001      	b.n	8000a66 <HAL_GPIO_Init+0x13e>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3304      	adds	r3, #4
 8000a66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2bff      	cmp	r3, #255	; 0xff
 8000a6c:	d802      	bhi.n	8000a74 <HAL_GPIO_Init+0x14c>
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	e002      	b.n	8000a7a <HAL_GPIO_Init+0x152>
 8000a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a76:	3b08      	subs	r3, #8
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	210f      	movs	r1, #15
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	6a39      	ldr	r1, [r7, #32]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	fa01 f303 	lsl.w	r3, r1, r3
 8000a94:	431a      	orrs	r2, r3
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 80b1 	beq.w	8000c0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa8:	4b4d      	ldr	r3, [pc, #308]	; (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a4c      	ldr	r2, [pc, #304]	; (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b4a      	ldr	r3, [pc, #296]	; (8000be0 <HAL_GPIO_Init+0x2b8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ac0:	4a48      	ldr	r2, [pc, #288]	; (8000be4 <HAL_GPIO_Init+0x2bc>)
 8000ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac4:	089b      	lsrs	r3, r3, #2
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000acc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f003 0303 	and.w	r3, r3, #3
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	220f      	movs	r2, #15
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <HAL_GPIO_Init+0x2c0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d013      	beq.n	8000b14 <HAL_GPIO_Init+0x1ec>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a3f      	ldr	r2, [pc, #252]	; (8000bec <HAL_GPIO_Init+0x2c4>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d00d      	beq.n	8000b10 <HAL_GPIO_Init+0x1e8>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a3e      	ldr	r2, [pc, #248]	; (8000bf0 <HAL_GPIO_Init+0x2c8>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d007      	beq.n	8000b0c <HAL_GPIO_Init+0x1e4>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a3d      	ldr	r2, [pc, #244]	; (8000bf4 <HAL_GPIO_Init+0x2cc>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d101      	bne.n	8000b08 <HAL_GPIO_Init+0x1e0>
 8000b04:	2303      	movs	r3, #3
 8000b06:	e006      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b08:	2304      	movs	r3, #4
 8000b0a:	e004      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e002      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b10:	2301      	movs	r3, #1
 8000b12:	e000      	b.n	8000b16 <HAL_GPIO_Init+0x1ee>
 8000b14:	2300      	movs	r3, #0
 8000b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b18:	f002 0203 	and.w	r2, r2, #3
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4093      	lsls	r3, r2
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b26:	492f      	ldr	r1, [pc, #188]	; (8000be4 <HAL_GPIO_Init+0x2bc>)
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d006      	beq.n	8000b4e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b42:	689a      	ldr	r2, [r3, #8]
 8000b44:	492c      	ldr	r1, [pc, #176]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	608b      	str	r3, [r1, #8]
 8000b4c:	e006      	b.n	8000b5c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	43db      	mvns	r3, r3
 8000b56:	4928      	ldr	r1, [pc, #160]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	4013      	ands	r3, r2
 8000b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	68da      	ldr	r2, [r3, #12]
 8000b6c:	4922      	ldr	r1, [pc, #136]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	60cb      	str	r3, [r1, #12]
 8000b74:	e006      	b.n	8000b84 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	43db      	mvns	r3, r3
 8000b7e:	491e      	ldr	r1, [pc, #120]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	4918      	ldr	r1, [pc, #96]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	685a      	ldr	r2, [r3, #4]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4914      	ldr	r1, [pc, #80]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	490e      	ldr	r1, [pc, #56]	; (8000bf8 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	600b      	str	r3, [r1, #0]
 8000bc4:	e021      	b.n	8000c0a <HAL_GPIO_Init+0x2e2>
 8000bc6:	bf00      	nop
 8000bc8:	10320000 	.word	0x10320000
 8000bcc:	10310000 	.word	0x10310000
 8000bd0:	10220000 	.word	0x10220000
 8000bd4:	10210000 	.word	0x10210000
 8000bd8:	10120000 	.word	0x10120000
 8000bdc:	10110000 	.word	0x10110000
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010000 	.word	0x40010000
 8000be8:	40010800 	.word	0x40010800
 8000bec:	40010c00 	.word	0x40010c00
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	40011400 	.word	0x40011400
 8000bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_GPIO_Init+0x304>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	4909      	ldr	r1, [pc, #36]	; (8000c2c <HAL_GPIO_Init+0x304>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f47f ae8e 	bne.w	800093c <HAL_GPIO_Init+0x14>
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	372c      	adds	r7, #44	; 0x2c
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c40:	787b      	ldrb	r3, [r7, #1]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c4c:	e003      	b.n	8000c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	041a      	lsls	r2, r3, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	611a      	str	r2, [r3, #16]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4013      	ands	r3, r2
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43d9      	mvns	r1, r3
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	400b      	ands	r3, r1
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	611a      	str	r2, [r3, #16]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e272      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 8087 	beq.w	8000dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb4:	4b92      	ldr	r3, [pc, #584]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 030c 	and.w	r3, r3, #12
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	d00c      	beq.n	8000cda <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc0:	4b8f      	ldr	r3, [pc, #572]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 030c 	and.w	r3, r3, #12
 8000cc8:	2b08      	cmp	r3, #8
 8000cca:	d112      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5e>
 8000ccc:	4b8c      	ldr	r3, [pc, #560]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd8:	d10b      	bne.n	8000cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cda:	4b89      	ldr	r3, [pc, #548]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d06c      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x12c>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d168      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e24c      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfa:	d106      	bne.n	8000d0a <HAL_RCC_OscConfig+0x76>
 8000cfc:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a7f      	ldr	r2, [pc, #508]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d06:	6013      	str	r3, [r2, #0]
 8000d08:	e02e      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10c      	bne.n	8000d2c <HAL_RCC_OscConfig+0x98>
 8000d12:	4b7b      	ldr	r3, [pc, #492]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a7a      	ldr	r2, [pc, #488]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	4b78      	ldr	r3, [pc, #480]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a77      	ldr	r2, [pc, #476]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	e01d      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d34:	d10c      	bne.n	8000d50 <HAL_RCC_OscConfig+0xbc>
 8000d36:	4b72      	ldr	r3, [pc, #456]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a71      	ldr	r2, [pc, #452]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	4b6f      	ldr	r3, [pc, #444]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a6e      	ldr	r2, [pc, #440]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e00b      	b.n	8000d68 <HAL_RCC_OscConfig+0xd4>
 8000d50:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a6a      	ldr	r2, [pc, #424]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	4b68      	ldr	r3, [pc, #416]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a67      	ldr	r2, [pc, #412]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d66:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d013      	beq.n	8000d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d70:	f7ff fcec 	bl	800074c <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fce8 	bl	800074c <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	; 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e200      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0xe4>
 8000d96:	e014      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d98:	f7ff fcd8 	bl	800074c <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da0:	f7ff fcd4 	bl	800074c <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b64      	cmp	r3, #100	; 0x64
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e1ec      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db2:	4b53      	ldr	r3, [pc, #332]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f0      	bne.n	8000da0 <HAL_RCC_OscConfig+0x10c>
 8000dbe:	e000      	b.n	8000dc2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d063      	beq.n	8000e96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dce:	4b4c      	ldr	r3, [pc, #304]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 030c 	and.w	r3, r3, #12
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dda:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d11c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x18c>
 8000de6:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d116      	bne.n	8000e20 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d001      	beq.n	8000e0a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e1c0      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	4939      	ldr	r1, [pc, #228]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e1e:	e03a      	b.n	8000e96 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d020      	beq.n	8000e6a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fc8d 	bl	800074c <HAL_GetTick>
 8000e32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e36:	f7ff fc89 	bl	800074c <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e1a1      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d0f0      	beq.n	8000e36 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e54:	4b2a      	ldr	r3, [pc, #168]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4927      	ldr	r1, [pc, #156]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	4313      	orrs	r3, r2
 8000e66:	600b      	str	r3, [r1, #0]
 8000e68:	e015      	b.n	8000e96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <HAL_RCC_OscConfig+0x270>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fc6c 	bl	800074c <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e78:	f7ff fc68 	bl	800074c <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e180      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8a:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0308 	and.w	r3, r3, #8
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d03a      	beq.n	8000f18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d019      	beq.n	8000ede <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb0:	f7ff fc4c 	bl	800074c <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fc48 	bl	800074c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e160      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f000 faee 	bl	80014b8 <RCC_Delay>
 8000edc:	e01c      	b.n	8000f18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_RCC_OscConfig+0x274>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee4:	f7ff fc32 	bl	800074c <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eea:	e00f      	b.n	8000f0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000eec:	f7ff fc2e 	bl	800074c <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d908      	bls.n	8000f0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e146      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000
 8000f04:	42420000 	.word	0x42420000
 8000f08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0c:	4b92      	ldr	r3, [pc, #584]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1e9      	bne.n	8000eec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f000 80a6 	beq.w	8001072 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f2a:	4b8b      	ldr	r3, [pc, #556]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10d      	bne.n	8000f52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f36:	4b88      	ldr	r3, [pc, #544]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a87      	ldr	r2, [pc, #540]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b85      	ldr	r3, [pc, #532]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f52:	4b82      	ldr	r3, [pc, #520]	; (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d118      	bne.n	8000f90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f5e:	4b7f      	ldr	r3, [pc, #508]	; (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7e      	ldr	r2, [pc, #504]	; (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fbef 	bl	800074c <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f72:	f7ff fbeb 	bl	800074c <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b64      	cmp	r3, #100	; 0x64
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e103      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f84:	4b75      	ldr	r3, [pc, #468]	; (800115c <HAL_RCC_OscConfig+0x4c8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x312>
 8000f98:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a6e      	ldr	r2, [pc, #440]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6213      	str	r3, [r2, #32]
 8000fa4:	e02d      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x334>
 8000fae:	4b6a      	ldr	r3, [pc, #424]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4a69      	ldr	r2, [pc, #420]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	6213      	str	r3, [r2, #32]
 8000fba:	4b67      	ldr	r3, [pc, #412]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	6a1b      	ldr	r3, [r3, #32]
 8000fbe:	4a66      	ldr	r2, [pc, #408]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	f023 0304 	bic.w	r3, r3, #4
 8000fc4:	6213      	str	r3, [r2, #32]
 8000fc6:	e01c      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d10c      	bne.n	8000fea <HAL_RCC_OscConfig+0x356>
 8000fd0:	4b61      	ldr	r3, [pc, #388]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	4a60      	ldr	r2, [pc, #384]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6213      	str	r3, [r2, #32]
 8000fdc:	4b5e      	ldr	r3, [pc, #376]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	6a1b      	ldr	r3, [r3, #32]
 8000fe0:	4a5d      	ldr	r2, [pc, #372]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6213      	str	r3, [r2, #32]
 8000fe8:	e00b      	b.n	8001002 <HAL_RCC_OscConfig+0x36e>
 8000fea:	4b5b      	ldr	r3, [pc, #364]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a5a      	ldr	r2, [pc, #360]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	4b58      	ldr	r3, [pc, #352]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a57      	ldr	r2, [pc, #348]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d015      	beq.n	8001036 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fb9f 	bl	800074c <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001010:	e00a      	b.n	8001028 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001012:	f7ff fb9b 	bl	800074c <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	4293      	cmp	r3, r2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e0b1      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	6a1b      	ldr	r3, [r3, #32]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0ee      	beq.n	8001012 <HAL_RCC_OscConfig+0x37e>
 8001034:	e014      	b.n	8001060 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001036:	f7ff fb89 	bl	800074c <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800103c:	e00a      	b.n	8001054 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800103e:	f7ff fb85 	bl	800074c <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	f241 3288 	movw	r2, #5000	; 0x1388
 800104c:	4293      	cmp	r3, r2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e09b      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001054:	4b40      	ldr	r3, [pc, #256]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ee      	bne.n	800103e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d105      	bne.n	8001072 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001066:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4a3b      	ldr	r2, [pc, #236]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001070:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 8087 	beq.w	800118a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d061      	beq.n	800114c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69db      	ldr	r3, [r3, #28]
 800108c:	2b02      	cmp	r3, #2
 800108e:	d146      	bne.n	800111e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001090:	4b33      	ldr	r3, [pc, #204]	; (8001160 <HAL_RCC_OscConfig+0x4cc>)
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fb59 	bl	800074c <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fb55 	bl	800074c <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e06d      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f0      	bne.n	800109e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d108      	bne.n	80010d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010c6:	4b24      	ldr	r3, [pc, #144]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	4921      	ldr	r1, [pc, #132]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010d8:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a19      	ldr	r1, [r3, #32]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	430b      	orrs	r3, r1
 80010ea:	491b      	ldr	r1, [pc, #108]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <HAL_RCC_OscConfig+0x4cc>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff fb29 	bl	800074c <HAL_GetTick>
 80010fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010fc:	e008      	b.n	8001110 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fe:	f7ff fb25 	bl	800074c <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e03d      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f0      	beq.n	80010fe <HAL_RCC_OscConfig+0x46a>
 800111c:	e035      	b.n	800118a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <HAL_RCC_OscConfig+0x4cc>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fb12 	bl	800074c <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800112c:	f7ff fb0e 	bl	800074c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e026      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f0      	bne.n	800112c <HAL_RCC_OscConfig+0x498>
 800114a:	e01e      	b.n	800118a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d107      	bne.n	8001164 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e019      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
 8001158:	40021000 	.word	0x40021000
 800115c:	40007000 	.word	0x40007000
 8001160:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_OscConfig+0x500>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	429a      	cmp	r2, r3
 8001176:	d106      	bne.n	8001186 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001182:	429a      	cmp	r2, r3
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40021000 	.word	0x40021000

08001198 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0d0      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011ac:	4b6a      	ldr	r3, [pc, #424]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d910      	bls.n	80011dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ba:	4b67      	ldr	r3, [pc, #412]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f023 0207 	bic.w	r2, r3, #7
 80011c2:	4965      	ldr	r1, [pc, #404]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ca:	4b63      	ldr	r3, [pc, #396]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d001      	beq.n	80011dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0b8      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d020      	beq.n	800122a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	4a58      	ldr	r2, [pc, #352]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80011fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0308 	and.w	r3, r3, #8
 8001208:	2b00      	cmp	r3, #0
 800120a:	d005      	beq.n	8001218 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800120c:	4b53      	ldr	r3, [pc, #332]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	4a52      	ldr	r2, [pc, #328]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001216:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001218:	4b50      	ldr	r3, [pc, #320]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	494d      	ldr	r1, [pc, #308]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	4313      	orrs	r3, r2
 8001228:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	d040      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d107      	bne.n	800124e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d115      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e07f      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d107      	bne.n	8001266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001256:	4b41      	ldr	r3, [pc, #260]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e073      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001266:	4b3d      	ldr	r3, [pc, #244]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e06b      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001276:	4b39      	ldr	r3, [pc, #228]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f023 0203 	bic.w	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4936      	ldr	r1, [pc, #216]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001288:	f7ff fa60 	bl	800074c <HAL_GetTick>
 800128c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800128e:	e00a      	b.n	80012a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001290:	f7ff fa5c 	bl	800074c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	; 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e053      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	4b2d      	ldr	r3, [pc, #180]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 020c 	and.w	r2, r3, #12
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d1eb      	bne.n	8001290 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d210      	bcs.n	80012e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 0207 	bic.w	r2, r3, #7
 80012ce:	4922      	ldr	r1, [pc, #136]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <HAL_RCC_ClockConfig+0x1c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e032      	b.n	800134e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d008      	beq.n	8001306 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	4916      	ldr	r1, [pc, #88]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	4313      	orrs	r3, r2
 8001304:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d009      	beq.n	8001326 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	490e      	ldr	r1, [pc, #56]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001326:	f000 f82d 	bl	8001384 <HAL_RCC_GetSysClockFreq>
 800132a:	4602      	mov	r2, r0
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <HAL_RCC_ClockConfig+0x1c8>)
 8001338:	5ccb      	ldrb	r3, [r1, r3]
 800133a:	fa22 f303 	lsr.w	r3, r2, r3
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_RCC_ClockConfig+0x1cc>)
 8001340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_ClockConfig+0x1d0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f9be 	bl	80006c8 <HAL_InitTick>

  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40022000 	.word	0x40022000
 800135c:	40021000 	.word	0x40021000
 8001360:	08002514 	.word	0x08002514
 8001364:	20000000 	.word	0x20000000
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_RCC_EnableCSS+0x14>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	4242004c 	.word	0x4242004c

08001384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <HAL_RCC_GetSysClockFreq+0x94>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d002      	beq.n	80013b4 <HAL_RCC_GetSysClockFreq+0x30>
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d003      	beq.n	80013ba <HAL_RCC_GetSysClockFreq+0x36>
 80013b2:	e027      	b.n	8001404 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_RCC_GetSysClockFreq+0x98>)
 80013b6:	613b      	str	r3, [r7, #16]
      break;
 80013b8:	e027      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	0c9b      	lsrs	r3, r3, #18
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d010      	beq.n	80013f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <HAL_RCC_GetSysClockFreq+0x94>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	0c5b      	lsrs	r3, r3, #17
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	4a11      	ldr	r2, [pc, #68]	; (8001424 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013de:	5cd3      	ldrb	r3, [r2, r3]
 80013e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_RCC_GetSysClockFreq+0x98>)
 80013e6:	fb03 f202 	mul.w	r2, r3, r2
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e004      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a0c      	ldr	r2, [pc, #48]	; (8001428 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013f8:	fb02 f303 	mul.w	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	613b      	str	r3, [r7, #16]
      break;
 8001402:	e002      	b.n	800140a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <HAL_RCC_GetSysClockFreq+0x98>)
 8001406:	613b      	str	r3, [r7, #16]
      break;
 8001408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800140a:	693b      	ldr	r3, [r7, #16]
}
 800140c:	4618      	mov	r0, r3
 800140e:	371c      	adds	r7, #28
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	007a1200 	.word	0x007a1200
 8001420:	0800252c 	.word	0x0800252c
 8001424:	0800253c 	.word	0x0800253c
 8001428:	003d0900 	.word	0x003d0900

0800142c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_RCC_GetHCLKFreq+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000000 	.word	0x20000000

08001440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001444:	f7ff fff2 	bl	800142c <HAL_RCC_GetHCLKFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	08002524 	.word	0x08002524

08001468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800146c:	f7ff ffde 	bl	800142c <HAL_RCC_GetHCLKFreq>
 8001470:	4602      	mov	r2, r0
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	0adb      	lsrs	r3, r3, #11
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	4903      	ldr	r1, [pc, #12]	; (800148c <HAL_RCC_GetPCLK2Freq+0x24>)
 800147e:	5ccb      	ldrb	r3, [r1, r3]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000
 800148c:	08002524 	.word	0x08002524

08001490 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149c:	2b80      	cmp	r3, #128	; 0x80
 800149e:	d104      	bne.n	80014aa <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80014a0:	f000 f828 	bl	80014f4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	701a      	strb	r2, [r3, #0]
  }
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	4002100a 	.word	0x4002100a

080014b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <RCC_Delay+0x34>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <RCC_Delay+0x38>)
 80014c6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ca:	0a5b      	lsrs	r3, r3, #9
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d4:	bf00      	nop
  }
  while (Delay --);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	60fa      	str	r2, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <RCC_Delay+0x1c>
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	20000000 	.word	0x20000000
 80014f0:	10624dd3 	.word	0x10624dd3

080014f4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e042      	b.n	8001598 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f7ff f846 	bl	80005b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2224      	movs	r2, #36	; 0x24
 8001530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68da      	ldr	r2, [r3, #12]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001542:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f9af 	bl	80018a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001558:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001568:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68da      	ldr	r2, [r3, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001578:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	4613      	mov	r3, r2
 80015ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	2b20      	cmp	r3, #32
 80015be:	d16d      	bne.n	800169c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <HAL_UART_Transmit+0x2c>
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e066      	b.n	800169e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2221      	movs	r2, #33	; 0x21
 80015da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80015de:	f7ff f8b5 	bl	800074c <HAL_GetTick>
 80015e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	88fa      	ldrh	r2, [r7, #6]
 80015e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	88fa      	ldrh	r2, [r7, #6]
 80015ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015f8:	d108      	bne.n	800160c <HAL_UART_Transmit+0x6c>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d104      	bne.n	800160c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	e003      	b.n	8001614 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001614:	e02a      	b.n	800166c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2200      	movs	r2, #0
 800161e:	2180      	movs	r1, #128	; 0x80
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f8d2 	bl	80017ca <UART_WaitOnFlagUntilTimeout>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e036      	b.n	800169e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10b      	bne.n	800164e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001644:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	3302      	adds	r3, #2
 800164a:	61bb      	str	r3, [r7, #24]
 800164c:	e007      	b.n	800165e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	781a      	ldrb	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001662:	b29b      	uxth	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b29a      	uxth	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001670:	b29b      	uxth	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1cf      	bne.n	8001616 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2200      	movs	r2, #0
 800167e:	2140      	movs	r1, #64	; 0x40
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f8a2 	bl	80017ca <UART_WaitOnFlagUntilTimeout>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e006      	b.n	800169e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	e000      	b.n	800169e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800169c:	2302      	movs	r3, #2
  }
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b08a      	sub	sp, #40	; 0x28
 80016aa:	af02      	add	r7, sp, #8
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	4613      	mov	r3, r2
 80016b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b20      	cmp	r3, #32
 80016c4:	d17c      	bne.n	80017c0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_UART_Receive+0x2c>
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e075      	b.n	80017c2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2222      	movs	r2, #34	; 0x22
 80016e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016ea:	f7ff f82f 	bl	800074c <HAL_GetTick>
 80016ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	88fa      	ldrh	r2, [r7, #6]
 80016f4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001704:	d108      	bne.n	8001718 <HAL_UART_Receive+0x72>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d104      	bne.n	8001718 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	61bb      	str	r3, [r7, #24]
 8001716:	e003      	b.n	8001720 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001720:	e043      	b.n	80017aa <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2200      	movs	r2, #0
 800172a:	2120      	movs	r1, #32
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f84c 	bl	80017ca <UART_WaitOnFlagUntilTimeout>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e042      	b.n	80017c2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	b29b      	uxth	r3, r3
 800174a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800174e:	b29a      	uxth	r2, r3
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	3302      	adds	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	e01f      	b.n	800179c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001764:	d007      	beq.n	8001776 <HAL_UART_Receive+0xd0>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10a      	bne.n	8001784 <HAL_UART_Receive+0xde>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d106      	bne.n	8001784 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	701a      	strb	r2, [r3, #0]
 8001782:	e008      	b.n	8001796 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001790:	b2da      	uxtb	r2, r3
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3301      	adds	r3, #1
 800179a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1b6      	bne.n	8001722 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b090      	sub	sp, #64	; 0x40
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	4613      	mov	r3, r2
 80017d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017da:	e050      	b.n	800187e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e2:	d04c      	beq.n	800187e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <UART_WaitOnFlagUntilTimeout+0x30>
 80017ea:	f7fe ffaf 	bl	800074c <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d241      	bcs.n	800187e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	330c      	adds	r3, #12
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	e853 3f00 	ldrex	r3, [r3]
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	330c      	adds	r3, #12
 8001818:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800181a:	637a      	str	r2, [r7, #52]	; 0x34
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800181e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001820:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001822:	e841 2300 	strex	r3, r2, [r1]
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1e5      	bne.n	80017fa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3314      	adds	r3, #20
 8001834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	e853 3f00 	ldrex	r3, [r3]
 800183c:	613b      	str	r3, [r7, #16]
   return(result);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	3314      	adds	r3, #20
 800184c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800184e:	623a      	str	r2, [r7, #32]
 8001850:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001852:	69f9      	ldr	r1, [r7, #28]
 8001854:	6a3a      	ldr	r2, [r7, #32]
 8001856:	e841 2300 	strex	r3, r2, [r1]
 800185a:	61bb      	str	r3, [r7, #24]
   return(result);
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1e5      	bne.n	800182e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2220      	movs	r2, #32
 800186e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e00f      	b.n	800189e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4013      	ands	r3, r2
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	429a      	cmp	r2, r3
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	461a      	mov	r2, r3
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	429a      	cmp	r2, r3
 800189a:	d09f      	beq.n	80017dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3740      	adds	r7, #64	; 0x40
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80018e2:	f023 030c 	bic.w	r3, r3, #12
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	430b      	orrs	r3, r1
 80018ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699a      	ldr	r2, [r3, #24]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2c      	ldr	r2, [pc, #176]	; (80019bc <UART_SetConfig+0x114>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d103      	bne.n	8001918 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001910:	f7ff fdaa 	bl	8001468 <HAL_RCC_GetPCLK2Freq>
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	e002      	b.n	800191e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001918:	f7ff fd92 	bl	8001440 <HAL_RCC_GetPCLK1Freq>
 800191c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	009a      	lsls	r2, r3, #2
 8001928:	441a      	add	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <UART_SetConfig+0x118>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	0119      	lsls	r1, r3, #4
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	009a      	lsls	r2, r3, #2
 8001948:	441a      	add	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fbb2 f2f3 	udiv	r2, r2, r3
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <UART_SetConfig+0x118>)
 8001956:	fba3 0302 	umull	r0, r3, r3, r2
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2064      	movs	r0, #100	; 0x64
 800195e:	fb00 f303 	mul.w	r3, r0, r3
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	3332      	adds	r3, #50	; 0x32
 8001968:	4a15      	ldr	r2, [pc, #84]	; (80019c0 <UART_SetConfig+0x118>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001974:	4419      	add	r1, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	009a      	lsls	r2, r3, #2
 8001980:	441a      	add	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	fbb2 f2f3 	udiv	r2, r2, r3
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <UART_SetConfig+0x118>)
 800198e:	fba3 0302 	umull	r0, r3, r3, r2
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2064      	movs	r0, #100	; 0x64
 8001996:	fb00 f303 	mul.w	r3, r0, r3
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	3332      	adds	r3, #50	; 0x32
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <UART_SetConfig+0x118>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	f003 020f 	and.w	r2, r3, #15
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	440a      	add	r2, r1
 80019b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40013800 	.word	0x40013800
 80019c0:	51eb851f 	.word	0x51eb851f

080019c4 <atoi>:
 80019c4:	220a      	movs	r2, #10
 80019c6:	2100      	movs	r1, #0
 80019c8:	f000 b87e 	b.w	8001ac8 <strtol>

080019cc <_strtol_l.constprop.0>:
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019d2:	4686      	mov	lr, r0
 80019d4:	4690      	mov	r8, r2
 80019d6:	d001      	beq.n	80019dc <_strtol_l.constprop.0+0x10>
 80019d8:	2b24      	cmp	r3, #36	; 0x24
 80019da:	d906      	bls.n	80019ea <_strtol_l.constprop.0+0x1e>
 80019dc:	f000 f8a6 	bl	8001b2c <__errno>
 80019e0:	2316      	movs	r3, #22
 80019e2:	6003      	str	r3, [r0, #0]
 80019e4:	2000      	movs	r0, #0
 80019e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019ea:	460d      	mov	r5, r1
 80019ec:	4835      	ldr	r0, [pc, #212]	; (8001ac4 <_strtol_l.constprop.0+0xf8>)
 80019ee:	462a      	mov	r2, r5
 80019f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80019f4:	5d06      	ldrb	r6, [r0, r4]
 80019f6:	f016 0608 	ands.w	r6, r6, #8
 80019fa:	d1f8      	bne.n	80019ee <_strtol_l.constprop.0+0x22>
 80019fc:	2c2d      	cmp	r4, #45	; 0x2d
 80019fe:	d12e      	bne.n	8001a5e <_strtol_l.constprop.0+0x92>
 8001a00:	2601      	movs	r6, #1
 8001a02:	782c      	ldrb	r4, [r5, #0]
 8001a04:	1c95      	adds	r5, r2, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d057      	beq.n	8001aba <_strtol_l.constprop.0+0xee>
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d109      	bne.n	8001a22 <_strtol_l.constprop.0+0x56>
 8001a0e:	2c30      	cmp	r4, #48	; 0x30
 8001a10:	d107      	bne.n	8001a22 <_strtol_l.constprop.0+0x56>
 8001a12:	782a      	ldrb	r2, [r5, #0]
 8001a14:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001a18:	2a58      	cmp	r2, #88	; 0x58
 8001a1a:	d149      	bne.n	8001ab0 <_strtol_l.constprop.0+0xe4>
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	786c      	ldrb	r4, [r5, #1]
 8001a20:	3502      	adds	r5, #2
 8001a22:	2200      	movs	r2, #0
 8001a24:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8001a28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8001a2c:	fbbc f9f3 	udiv	r9, ip, r3
 8001a30:	4610      	mov	r0, r2
 8001a32:	fb03 ca19 	mls	sl, r3, r9, ip
 8001a36:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8001a3a:	2f09      	cmp	r7, #9
 8001a3c:	d814      	bhi.n	8001a68 <_strtol_l.constprop.0+0x9c>
 8001a3e:	463c      	mov	r4, r7
 8001a40:	42a3      	cmp	r3, r4
 8001a42:	dd20      	ble.n	8001a86 <_strtol_l.constprop.0+0xba>
 8001a44:	1c57      	adds	r7, r2, #1
 8001a46:	d007      	beq.n	8001a58 <_strtol_l.constprop.0+0x8c>
 8001a48:	4581      	cmp	r9, r0
 8001a4a:	d319      	bcc.n	8001a80 <_strtol_l.constprop.0+0xb4>
 8001a4c:	d101      	bne.n	8001a52 <_strtol_l.constprop.0+0x86>
 8001a4e:	45a2      	cmp	sl, r4
 8001a50:	db16      	blt.n	8001a80 <_strtol_l.constprop.0+0xb4>
 8001a52:	2201      	movs	r2, #1
 8001a54:	fb00 4003 	mla	r0, r0, r3, r4
 8001a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001a5c:	e7eb      	b.n	8001a36 <_strtol_l.constprop.0+0x6a>
 8001a5e:	2c2b      	cmp	r4, #43	; 0x2b
 8001a60:	bf04      	itt	eq
 8001a62:	782c      	ldrbeq	r4, [r5, #0]
 8001a64:	1c95      	addeq	r5, r2, #2
 8001a66:	e7ce      	b.n	8001a06 <_strtol_l.constprop.0+0x3a>
 8001a68:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8001a6c:	2f19      	cmp	r7, #25
 8001a6e:	d801      	bhi.n	8001a74 <_strtol_l.constprop.0+0xa8>
 8001a70:	3c37      	subs	r4, #55	; 0x37
 8001a72:	e7e5      	b.n	8001a40 <_strtol_l.constprop.0+0x74>
 8001a74:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8001a78:	2f19      	cmp	r7, #25
 8001a7a:	d804      	bhi.n	8001a86 <_strtol_l.constprop.0+0xba>
 8001a7c:	3c57      	subs	r4, #87	; 0x57
 8001a7e:	e7df      	b.n	8001a40 <_strtol_l.constprop.0+0x74>
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	e7e8      	b.n	8001a58 <_strtol_l.constprop.0+0x8c>
 8001a86:	1c53      	adds	r3, r2, #1
 8001a88:	d108      	bne.n	8001a9c <_strtol_l.constprop.0+0xd0>
 8001a8a:	2322      	movs	r3, #34	; 0x22
 8001a8c:	4660      	mov	r0, ip
 8001a8e:	f8ce 3000 	str.w	r3, [lr]
 8001a92:	f1b8 0f00 	cmp.w	r8, #0
 8001a96:	d0a6      	beq.n	80019e6 <_strtol_l.constprop.0+0x1a>
 8001a98:	1e69      	subs	r1, r5, #1
 8001a9a:	e006      	b.n	8001aaa <_strtol_l.constprop.0+0xde>
 8001a9c:	b106      	cbz	r6, 8001aa0 <_strtol_l.constprop.0+0xd4>
 8001a9e:	4240      	negs	r0, r0
 8001aa0:	f1b8 0f00 	cmp.w	r8, #0
 8001aa4:	d09f      	beq.n	80019e6 <_strtol_l.constprop.0+0x1a>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d1f6      	bne.n	8001a98 <_strtol_l.constprop.0+0xcc>
 8001aaa:	f8c8 1000 	str.w	r1, [r8]
 8001aae:	e79a      	b.n	80019e6 <_strtol_l.constprop.0+0x1a>
 8001ab0:	2430      	movs	r4, #48	; 0x30
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1b5      	bne.n	8001a22 <_strtol_l.constprop.0+0x56>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e7b3      	b.n	8001a22 <_strtol_l.constprop.0+0x56>
 8001aba:	2c30      	cmp	r4, #48	; 0x30
 8001abc:	d0a9      	beq.n	8001a12 <_strtol_l.constprop.0+0x46>
 8001abe:	230a      	movs	r3, #10
 8001ac0:	e7af      	b.n	8001a22 <_strtol_l.constprop.0+0x56>
 8001ac2:	bf00      	nop
 8001ac4:	0800253f 	.word	0x0800253f

08001ac8 <strtol>:
 8001ac8:	4613      	mov	r3, r2
 8001aca:	460a      	mov	r2, r1
 8001acc:	4601      	mov	r1, r0
 8001ace:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <strtol+0x10>)
 8001ad0:	6800      	ldr	r0, [r0, #0]
 8001ad2:	f7ff bf7b 	b.w	80019cc <_strtol_l.constprop.0>
 8001ad6:	bf00      	nop
 8001ad8:	20000058 	.word	0x20000058

08001adc <siprintf>:
 8001adc:	b40e      	push	{r1, r2, r3}
 8001ade:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ae2:	b500      	push	{lr}
 8001ae4:	b09c      	sub	sp, #112	; 0x70
 8001ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8001ae8:	9002      	str	r0, [sp, #8]
 8001aea:	9006      	str	r0, [sp, #24]
 8001aec:	9107      	str	r1, [sp, #28]
 8001aee:	9104      	str	r1, [sp, #16]
 8001af0:	4808      	ldr	r0, [pc, #32]	; (8001b14 <siprintf+0x38>)
 8001af2:	4909      	ldr	r1, [pc, #36]	; (8001b18 <siprintf+0x3c>)
 8001af4:	f853 2b04 	ldr.w	r2, [r3], #4
 8001af8:	9105      	str	r1, [sp, #20]
 8001afa:	6800      	ldr	r0, [r0, #0]
 8001afc:	a902      	add	r1, sp, #8
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	f000 f98e 	bl	8001e20 <_svfiprintf_r>
 8001b04:	2200      	movs	r2, #0
 8001b06:	9b02      	ldr	r3, [sp, #8]
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	b01c      	add	sp, #112	; 0x70
 8001b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001b10:	b003      	add	sp, #12
 8001b12:	4770      	bx	lr
 8001b14:	20000058 	.word	0x20000058
 8001b18:	ffff0208 	.word	0xffff0208

08001b1c <memset>:
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4402      	add	r2, r0
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d100      	bne.n	8001b26 <memset+0xa>
 8001b24:	4770      	bx	lr
 8001b26:	f803 1b01 	strb.w	r1, [r3], #1
 8001b2a:	e7f9      	b.n	8001b20 <memset+0x4>

08001b2c <__errno>:
 8001b2c:	4b01      	ldr	r3, [pc, #4]	; (8001b34 <__errno+0x8>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	20000058 	.word	0x20000058

08001b38 <__libc_init_array>:
 8001b38:	b570      	push	{r4, r5, r6, lr}
 8001b3a:	2600      	movs	r6, #0
 8001b3c:	4d0c      	ldr	r5, [pc, #48]	; (8001b70 <__libc_init_array+0x38>)
 8001b3e:	4c0d      	ldr	r4, [pc, #52]	; (8001b74 <__libc_init_array+0x3c>)
 8001b40:	1b64      	subs	r4, r4, r5
 8001b42:	10a4      	asrs	r4, r4, #2
 8001b44:	42a6      	cmp	r6, r4
 8001b46:	d109      	bne.n	8001b5c <__libc_init_array+0x24>
 8001b48:	f000 fc7a 	bl	8002440 <_init>
 8001b4c:	2600      	movs	r6, #0
 8001b4e:	4d0a      	ldr	r5, [pc, #40]	; (8001b78 <__libc_init_array+0x40>)
 8001b50:	4c0a      	ldr	r4, [pc, #40]	; (8001b7c <__libc_init_array+0x44>)
 8001b52:	1b64      	subs	r4, r4, r5
 8001b54:	10a4      	asrs	r4, r4, #2
 8001b56:	42a6      	cmp	r6, r4
 8001b58:	d105      	bne.n	8001b66 <__libc_init_array+0x2e>
 8001b5a:	bd70      	pop	{r4, r5, r6, pc}
 8001b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b60:	4798      	blx	r3
 8001b62:	3601      	adds	r6, #1
 8001b64:	e7ee      	b.n	8001b44 <__libc_init_array+0xc>
 8001b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b6a:	4798      	blx	r3
 8001b6c:	3601      	adds	r6, #1
 8001b6e:	e7f2      	b.n	8001b56 <__libc_init_array+0x1e>
 8001b70:	08002674 	.word	0x08002674
 8001b74:	08002674 	.word	0x08002674
 8001b78:	08002674 	.word	0x08002674
 8001b7c:	08002678 	.word	0x08002678

08001b80 <__retarget_lock_acquire_recursive>:
 8001b80:	4770      	bx	lr

08001b82 <__retarget_lock_release_recursive>:
 8001b82:	4770      	bx	lr

08001b84 <_free_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4605      	mov	r5, r0
 8001b88:	2900      	cmp	r1, #0
 8001b8a:	d040      	beq.n	8001c0e <_free_r+0x8a>
 8001b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b90:	1f0c      	subs	r4, r1, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bfb8      	it	lt
 8001b96:	18e4      	addlt	r4, r4, r3
 8001b98:	f000 f8dc 	bl	8001d54 <__malloc_lock>
 8001b9c:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <_free_r+0x8c>)
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	b933      	cbnz	r3, 8001bb0 <_free_r+0x2c>
 8001ba2:	6063      	str	r3, [r4, #4]
 8001ba4:	6014      	str	r4, [r2, #0]
 8001ba6:	4628      	mov	r0, r5
 8001ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bac:	f000 b8d8 	b.w	8001d60 <__malloc_unlock>
 8001bb0:	42a3      	cmp	r3, r4
 8001bb2:	d908      	bls.n	8001bc6 <_free_r+0x42>
 8001bb4:	6820      	ldr	r0, [r4, #0]
 8001bb6:	1821      	adds	r1, r4, r0
 8001bb8:	428b      	cmp	r3, r1
 8001bba:	bf01      	itttt	eq
 8001bbc:	6819      	ldreq	r1, [r3, #0]
 8001bbe:	685b      	ldreq	r3, [r3, #4]
 8001bc0:	1809      	addeq	r1, r1, r0
 8001bc2:	6021      	streq	r1, [r4, #0]
 8001bc4:	e7ed      	b.n	8001ba2 <_free_r+0x1e>
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	b10b      	cbz	r3, 8001bd0 <_free_r+0x4c>
 8001bcc:	42a3      	cmp	r3, r4
 8001bce:	d9fa      	bls.n	8001bc6 <_free_r+0x42>
 8001bd0:	6811      	ldr	r1, [r2, #0]
 8001bd2:	1850      	adds	r0, r2, r1
 8001bd4:	42a0      	cmp	r0, r4
 8001bd6:	d10b      	bne.n	8001bf0 <_free_r+0x6c>
 8001bd8:	6820      	ldr	r0, [r4, #0]
 8001bda:	4401      	add	r1, r0
 8001bdc:	1850      	adds	r0, r2, r1
 8001bde:	4283      	cmp	r3, r0
 8001be0:	6011      	str	r1, [r2, #0]
 8001be2:	d1e0      	bne.n	8001ba6 <_free_r+0x22>
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4408      	add	r0, r1
 8001bea:	6010      	str	r0, [r2, #0]
 8001bec:	6053      	str	r3, [r2, #4]
 8001bee:	e7da      	b.n	8001ba6 <_free_r+0x22>
 8001bf0:	d902      	bls.n	8001bf8 <_free_r+0x74>
 8001bf2:	230c      	movs	r3, #12
 8001bf4:	602b      	str	r3, [r5, #0]
 8001bf6:	e7d6      	b.n	8001ba6 <_free_r+0x22>
 8001bf8:	6820      	ldr	r0, [r4, #0]
 8001bfa:	1821      	adds	r1, r4, r0
 8001bfc:	428b      	cmp	r3, r1
 8001bfe:	bf01      	itttt	eq
 8001c00:	6819      	ldreq	r1, [r3, #0]
 8001c02:	685b      	ldreq	r3, [r3, #4]
 8001c04:	1809      	addeq	r1, r1, r0
 8001c06:	6021      	streq	r1, [r4, #0]
 8001c08:	6063      	str	r3, [r4, #4]
 8001c0a:	6054      	str	r4, [r2, #4]
 8001c0c:	e7cb      	b.n	8001ba6 <_free_r+0x22>
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}
 8001c10:	20000208 	.word	0x20000208

08001c14 <sbrk_aligned>:
 8001c14:	b570      	push	{r4, r5, r6, lr}
 8001c16:	4e0e      	ldr	r6, [pc, #56]	; (8001c50 <sbrk_aligned+0x3c>)
 8001c18:	460c      	mov	r4, r1
 8001c1a:	6831      	ldr	r1, [r6, #0]
 8001c1c:	4605      	mov	r5, r0
 8001c1e:	b911      	cbnz	r1, 8001c26 <sbrk_aligned+0x12>
 8001c20:	f000 fbaa 	bl	8002378 <_sbrk_r>
 8001c24:	6030      	str	r0, [r6, #0]
 8001c26:	4621      	mov	r1, r4
 8001c28:	4628      	mov	r0, r5
 8001c2a:	f000 fba5 	bl	8002378 <_sbrk_r>
 8001c2e:	1c43      	adds	r3, r0, #1
 8001c30:	d00a      	beq.n	8001c48 <sbrk_aligned+0x34>
 8001c32:	1cc4      	adds	r4, r0, #3
 8001c34:	f024 0403 	bic.w	r4, r4, #3
 8001c38:	42a0      	cmp	r0, r4
 8001c3a:	d007      	beq.n	8001c4c <sbrk_aligned+0x38>
 8001c3c:	1a21      	subs	r1, r4, r0
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f000 fb9a 	bl	8002378 <_sbrk_r>
 8001c44:	3001      	adds	r0, #1
 8001c46:	d101      	bne.n	8001c4c <sbrk_aligned+0x38>
 8001c48:	f04f 34ff 	mov.w	r4, #4294967295
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	bd70      	pop	{r4, r5, r6, pc}
 8001c50:	2000020c 	.word	0x2000020c

08001c54 <_malloc_r>:
 8001c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c58:	1ccd      	adds	r5, r1, #3
 8001c5a:	f025 0503 	bic.w	r5, r5, #3
 8001c5e:	3508      	adds	r5, #8
 8001c60:	2d0c      	cmp	r5, #12
 8001c62:	bf38      	it	cc
 8001c64:	250c      	movcc	r5, #12
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	4607      	mov	r7, r0
 8001c6a:	db01      	blt.n	8001c70 <_malloc_r+0x1c>
 8001c6c:	42a9      	cmp	r1, r5
 8001c6e:	d905      	bls.n	8001c7c <_malloc_r+0x28>
 8001c70:	230c      	movs	r3, #12
 8001c72:	2600      	movs	r6, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4630      	mov	r0, r6
 8001c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001d50 <_malloc_r+0xfc>
 8001c80:	f000 f868 	bl	8001d54 <__malloc_lock>
 8001c84:	f8d8 3000 	ldr.w	r3, [r8]
 8001c88:	461c      	mov	r4, r3
 8001c8a:	bb5c      	cbnz	r4, 8001ce4 <_malloc_r+0x90>
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	4638      	mov	r0, r7
 8001c90:	f7ff ffc0 	bl	8001c14 <sbrk_aligned>
 8001c94:	1c43      	adds	r3, r0, #1
 8001c96:	4604      	mov	r4, r0
 8001c98:	d155      	bne.n	8001d46 <_malloc_r+0xf2>
 8001c9a:	f8d8 4000 	ldr.w	r4, [r8]
 8001c9e:	4626      	mov	r6, r4
 8001ca0:	2e00      	cmp	r6, #0
 8001ca2:	d145      	bne.n	8001d30 <_malloc_r+0xdc>
 8001ca4:	2c00      	cmp	r4, #0
 8001ca6:	d048      	beq.n	8001d3a <_malloc_r+0xe6>
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	4631      	mov	r1, r6
 8001cac:	4638      	mov	r0, r7
 8001cae:	eb04 0903 	add.w	r9, r4, r3
 8001cb2:	f000 fb61 	bl	8002378 <_sbrk_r>
 8001cb6:	4581      	cmp	r9, r0
 8001cb8:	d13f      	bne.n	8001d3a <_malloc_r+0xe6>
 8001cba:	6821      	ldr	r1, [r4, #0]
 8001cbc:	4638      	mov	r0, r7
 8001cbe:	1a6d      	subs	r5, r5, r1
 8001cc0:	4629      	mov	r1, r5
 8001cc2:	f7ff ffa7 	bl	8001c14 <sbrk_aligned>
 8001cc6:	3001      	adds	r0, #1
 8001cc8:	d037      	beq.n	8001d3a <_malloc_r+0xe6>
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	442b      	add	r3, r5
 8001cce:	6023      	str	r3, [r4, #0]
 8001cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d038      	beq.n	8001d4a <_malloc_r+0xf6>
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	42a2      	cmp	r2, r4
 8001cdc:	d12b      	bne.n	8001d36 <_malloc_r+0xe2>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	e00f      	b.n	8001d04 <_malloc_r+0xb0>
 8001ce4:	6822      	ldr	r2, [r4, #0]
 8001ce6:	1b52      	subs	r2, r2, r5
 8001ce8:	d41f      	bmi.n	8001d2a <_malloc_r+0xd6>
 8001cea:	2a0b      	cmp	r2, #11
 8001cec:	d917      	bls.n	8001d1e <_malloc_r+0xca>
 8001cee:	1961      	adds	r1, r4, r5
 8001cf0:	42a3      	cmp	r3, r4
 8001cf2:	6025      	str	r5, [r4, #0]
 8001cf4:	bf18      	it	ne
 8001cf6:	6059      	strne	r1, [r3, #4]
 8001cf8:	6863      	ldr	r3, [r4, #4]
 8001cfa:	bf08      	it	eq
 8001cfc:	f8c8 1000 	streq.w	r1, [r8]
 8001d00:	5162      	str	r2, [r4, r5]
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	4638      	mov	r0, r7
 8001d06:	f104 060b 	add.w	r6, r4, #11
 8001d0a:	f000 f829 	bl	8001d60 <__malloc_unlock>
 8001d0e:	f026 0607 	bic.w	r6, r6, #7
 8001d12:	1d23      	adds	r3, r4, #4
 8001d14:	1af2      	subs	r2, r6, r3
 8001d16:	d0ae      	beq.n	8001c76 <_malloc_r+0x22>
 8001d18:	1b9b      	subs	r3, r3, r6
 8001d1a:	50a3      	str	r3, [r4, r2]
 8001d1c:	e7ab      	b.n	8001c76 <_malloc_r+0x22>
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	6862      	ldr	r2, [r4, #4]
 8001d22:	d1dd      	bne.n	8001ce0 <_malloc_r+0x8c>
 8001d24:	f8c8 2000 	str.w	r2, [r8]
 8001d28:	e7ec      	b.n	8001d04 <_malloc_r+0xb0>
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	6864      	ldr	r4, [r4, #4]
 8001d2e:	e7ac      	b.n	8001c8a <_malloc_r+0x36>
 8001d30:	4634      	mov	r4, r6
 8001d32:	6876      	ldr	r6, [r6, #4]
 8001d34:	e7b4      	b.n	8001ca0 <_malloc_r+0x4c>
 8001d36:	4613      	mov	r3, r2
 8001d38:	e7cc      	b.n	8001cd4 <_malloc_r+0x80>
 8001d3a:	230c      	movs	r3, #12
 8001d3c:	4638      	mov	r0, r7
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	f000 f80e 	bl	8001d60 <__malloc_unlock>
 8001d44:	e797      	b.n	8001c76 <_malloc_r+0x22>
 8001d46:	6025      	str	r5, [r4, #0]
 8001d48:	e7dc      	b.n	8001d04 <_malloc_r+0xb0>
 8001d4a:	605b      	str	r3, [r3, #4]
 8001d4c:	deff      	udf	#255	; 0xff
 8001d4e:	bf00      	nop
 8001d50:	20000208 	.word	0x20000208

08001d54 <__malloc_lock>:
 8001d54:	4801      	ldr	r0, [pc, #4]	; (8001d5c <__malloc_lock+0x8>)
 8001d56:	f7ff bf13 	b.w	8001b80 <__retarget_lock_acquire_recursive>
 8001d5a:	bf00      	nop
 8001d5c:	20000204 	.word	0x20000204

08001d60 <__malloc_unlock>:
 8001d60:	4801      	ldr	r0, [pc, #4]	; (8001d68 <__malloc_unlock+0x8>)
 8001d62:	f7ff bf0e 	b.w	8001b82 <__retarget_lock_release_recursive>
 8001d66:	bf00      	nop
 8001d68:	20000204 	.word	0x20000204

08001d6c <__ssputs_r>:
 8001d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d70:	461f      	mov	r7, r3
 8001d72:	688e      	ldr	r6, [r1, #8]
 8001d74:	4682      	mov	sl, r0
 8001d76:	42be      	cmp	r6, r7
 8001d78:	460c      	mov	r4, r1
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	680b      	ldr	r3, [r1, #0]
 8001d7e:	d82c      	bhi.n	8001dda <__ssputs_r+0x6e>
 8001d80:	898a      	ldrh	r2, [r1, #12]
 8001d82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001d86:	d026      	beq.n	8001dd6 <__ssputs_r+0x6a>
 8001d88:	6965      	ldr	r5, [r4, #20]
 8001d8a:	6909      	ldr	r1, [r1, #16]
 8001d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001d90:	eba3 0901 	sub.w	r9, r3, r1
 8001d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001d98:	1c7b      	adds	r3, r7, #1
 8001d9a:	444b      	add	r3, r9
 8001d9c:	106d      	asrs	r5, r5, #1
 8001d9e:	429d      	cmp	r5, r3
 8001da0:	bf38      	it	cc
 8001da2:	461d      	movcc	r5, r3
 8001da4:	0553      	lsls	r3, r2, #21
 8001da6:	d527      	bpl.n	8001df8 <__ssputs_r+0x8c>
 8001da8:	4629      	mov	r1, r5
 8001daa:	f7ff ff53 	bl	8001c54 <_malloc_r>
 8001dae:	4606      	mov	r6, r0
 8001db0:	b360      	cbz	r0, 8001e0c <__ssputs_r+0xa0>
 8001db2:	464a      	mov	r2, r9
 8001db4:	6921      	ldr	r1, [r4, #16]
 8001db6:	f000 fafd 	bl	80023b4 <memcpy>
 8001dba:	89a3      	ldrh	r3, [r4, #12]
 8001dbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc4:	81a3      	strh	r3, [r4, #12]
 8001dc6:	6126      	str	r6, [r4, #16]
 8001dc8:	444e      	add	r6, r9
 8001dca:	6026      	str	r6, [r4, #0]
 8001dcc:	463e      	mov	r6, r7
 8001dce:	6165      	str	r5, [r4, #20]
 8001dd0:	eba5 0509 	sub.w	r5, r5, r9
 8001dd4:	60a5      	str	r5, [r4, #8]
 8001dd6:	42be      	cmp	r6, r7
 8001dd8:	d900      	bls.n	8001ddc <__ssputs_r+0x70>
 8001dda:	463e      	mov	r6, r7
 8001ddc:	4632      	mov	r2, r6
 8001dde:	4641      	mov	r1, r8
 8001de0:	6820      	ldr	r0, [r4, #0]
 8001de2:	f000 faaf 	bl	8002344 <memmove>
 8001de6:	2000      	movs	r0, #0
 8001de8:	68a3      	ldr	r3, [r4, #8]
 8001dea:	1b9b      	subs	r3, r3, r6
 8001dec:	60a3      	str	r3, [r4, #8]
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	4433      	add	r3, r6
 8001df2:	6023      	str	r3, [r4, #0]
 8001df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df8:	462a      	mov	r2, r5
 8001dfa:	f000 fae9 	bl	80023d0 <_realloc_r>
 8001dfe:	4606      	mov	r6, r0
 8001e00:	2800      	cmp	r0, #0
 8001e02:	d1e0      	bne.n	8001dc6 <__ssputs_r+0x5a>
 8001e04:	4650      	mov	r0, sl
 8001e06:	6921      	ldr	r1, [r4, #16]
 8001e08:	f7ff febc 	bl	8001b84 <_free_r>
 8001e0c:	230c      	movs	r3, #12
 8001e0e:	f8ca 3000 	str.w	r3, [sl]
 8001e12:	89a3      	ldrh	r3, [r4, #12]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1c:	81a3      	strh	r3, [r4, #12]
 8001e1e:	e7e9      	b.n	8001df4 <__ssputs_r+0x88>

08001e20 <_svfiprintf_r>:
 8001e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e24:	4698      	mov	r8, r3
 8001e26:	898b      	ldrh	r3, [r1, #12]
 8001e28:	4607      	mov	r7, r0
 8001e2a:	061b      	lsls	r3, r3, #24
 8001e2c:	460d      	mov	r5, r1
 8001e2e:	4614      	mov	r4, r2
 8001e30:	b09d      	sub	sp, #116	; 0x74
 8001e32:	d50e      	bpl.n	8001e52 <_svfiprintf_r+0x32>
 8001e34:	690b      	ldr	r3, [r1, #16]
 8001e36:	b963      	cbnz	r3, 8001e52 <_svfiprintf_r+0x32>
 8001e38:	2140      	movs	r1, #64	; 0x40
 8001e3a:	f7ff ff0b 	bl	8001c54 <_malloc_r>
 8001e3e:	6028      	str	r0, [r5, #0]
 8001e40:	6128      	str	r0, [r5, #16]
 8001e42:	b920      	cbnz	r0, 8001e4e <_svfiprintf_r+0x2e>
 8001e44:	230c      	movs	r3, #12
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	e0d0      	b.n	8001ff0 <_svfiprintf_r+0x1d0>
 8001e4e:	2340      	movs	r3, #64	; 0x40
 8001e50:	616b      	str	r3, [r5, #20]
 8001e52:	2300      	movs	r3, #0
 8001e54:	9309      	str	r3, [sp, #36]	; 0x24
 8001e56:	2320      	movs	r3, #32
 8001e58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e5c:	2330      	movs	r3, #48	; 0x30
 8001e5e:	f04f 0901 	mov.w	r9, #1
 8001e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e66:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002008 <_svfiprintf_r+0x1e8>
 8001e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e6e:	4623      	mov	r3, r4
 8001e70:	469a      	mov	sl, r3
 8001e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e76:	b10a      	cbz	r2, 8001e7c <_svfiprintf_r+0x5c>
 8001e78:	2a25      	cmp	r2, #37	; 0x25
 8001e7a:	d1f9      	bne.n	8001e70 <_svfiprintf_r+0x50>
 8001e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8001e80:	d00b      	beq.n	8001e9a <_svfiprintf_r+0x7a>
 8001e82:	465b      	mov	r3, fp
 8001e84:	4622      	mov	r2, r4
 8001e86:	4629      	mov	r1, r5
 8001e88:	4638      	mov	r0, r7
 8001e8a:	f7ff ff6f 	bl	8001d6c <__ssputs_r>
 8001e8e:	3001      	adds	r0, #1
 8001e90:	f000 80a9 	beq.w	8001fe6 <_svfiprintf_r+0x1c6>
 8001e94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e96:	445a      	add	r2, fp
 8001e98:	9209      	str	r2, [sp, #36]	; 0x24
 8001e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80a1 	beq.w	8001fe6 <_svfiprintf_r+0x1c6>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001eae:	f10a 0a01 	add.w	sl, sl, #1
 8001eb2:	9304      	str	r3, [sp, #16]
 8001eb4:	9307      	str	r3, [sp, #28]
 8001eb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001eba:	931a      	str	r3, [sp, #104]	; 0x68
 8001ebc:	4654      	mov	r4, sl
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ec4:	4850      	ldr	r0, [pc, #320]	; (8002008 <_svfiprintf_r+0x1e8>)
 8001ec6:	f000 fa67 	bl	8002398 <memchr>
 8001eca:	9a04      	ldr	r2, [sp, #16]
 8001ecc:	b9d8      	cbnz	r0, 8001f06 <_svfiprintf_r+0xe6>
 8001ece:	06d0      	lsls	r0, r2, #27
 8001ed0:	bf44      	itt	mi
 8001ed2:	2320      	movmi	r3, #32
 8001ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ed8:	0711      	lsls	r1, r2, #28
 8001eda:	bf44      	itt	mi
 8001edc:	232b      	movmi	r3, #43	; 0x2b
 8001ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8001ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8001ee8:	d015      	beq.n	8001f16 <_svfiprintf_r+0xf6>
 8001eea:	4654      	mov	r4, sl
 8001eec:	2000      	movs	r0, #0
 8001eee:	f04f 0c0a 	mov.w	ip, #10
 8001ef2:	9a07      	ldr	r2, [sp, #28]
 8001ef4:	4621      	mov	r1, r4
 8001ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001efa:	3b30      	subs	r3, #48	; 0x30
 8001efc:	2b09      	cmp	r3, #9
 8001efe:	d94d      	bls.n	8001f9c <_svfiprintf_r+0x17c>
 8001f00:	b1b0      	cbz	r0, 8001f30 <_svfiprintf_r+0x110>
 8001f02:	9207      	str	r2, [sp, #28]
 8001f04:	e014      	b.n	8001f30 <_svfiprintf_r+0x110>
 8001f06:	eba0 0308 	sub.w	r3, r0, r8
 8001f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	46a2      	mov	sl, r4
 8001f12:	9304      	str	r3, [sp, #16]
 8001f14:	e7d2      	b.n	8001ebc <_svfiprintf_r+0x9c>
 8001f16:	9b03      	ldr	r3, [sp, #12]
 8001f18:	1d19      	adds	r1, r3, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	9103      	str	r1, [sp, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bfbb      	ittet	lt
 8001f22:	425b      	neglt	r3, r3
 8001f24:	f042 0202 	orrlt.w	r2, r2, #2
 8001f28:	9307      	strge	r3, [sp, #28]
 8001f2a:	9307      	strlt	r3, [sp, #28]
 8001f2c:	bfb8      	it	lt
 8001f2e:	9204      	strlt	r2, [sp, #16]
 8001f30:	7823      	ldrb	r3, [r4, #0]
 8001f32:	2b2e      	cmp	r3, #46	; 0x2e
 8001f34:	d10c      	bne.n	8001f50 <_svfiprintf_r+0x130>
 8001f36:	7863      	ldrb	r3, [r4, #1]
 8001f38:	2b2a      	cmp	r3, #42	; 0x2a
 8001f3a:	d134      	bne.n	8001fa6 <_svfiprintf_r+0x186>
 8001f3c:	9b03      	ldr	r3, [sp, #12]
 8001f3e:	3402      	adds	r4, #2
 8001f40:	1d1a      	adds	r2, r3, #4
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	9203      	str	r2, [sp, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	bfb8      	it	lt
 8001f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f4e:	9305      	str	r3, [sp, #20]
 8001f50:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800200c <_svfiprintf_r+0x1ec>
 8001f54:	2203      	movs	r2, #3
 8001f56:	4650      	mov	r0, sl
 8001f58:	7821      	ldrb	r1, [r4, #0]
 8001f5a:	f000 fa1d 	bl	8002398 <memchr>
 8001f5e:	b138      	cbz	r0, 8001f70 <_svfiprintf_r+0x150>
 8001f60:	2240      	movs	r2, #64	; 0x40
 8001f62:	9b04      	ldr	r3, [sp, #16]
 8001f64:	eba0 000a 	sub.w	r0, r0, sl
 8001f68:	4082      	lsls	r2, r0
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	3401      	adds	r4, #1
 8001f6e:	9304      	str	r3, [sp, #16]
 8001f70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f74:	2206      	movs	r2, #6
 8001f76:	4826      	ldr	r0, [pc, #152]	; (8002010 <_svfiprintf_r+0x1f0>)
 8001f78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f7c:	f000 fa0c 	bl	8002398 <memchr>
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d038      	beq.n	8001ff6 <_svfiprintf_r+0x1d6>
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <_svfiprintf_r+0x1f4>)
 8001f86:	bb1b      	cbnz	r3, 8001fd0 <_svfiprintf_r+0x1b0>
 8001f88:	9b03      	ldr	r3, [sp, #12]
 8001f8a:	3307      	adds	r3, #7
 8001f8c:	f023 0307 	bic.w	r3, r3, #7
 8001f90:	3308      	adds	r3, #8
 8001f92:	9303      	str	r3, [sp, #12]
 8001f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f96:	4433      	add	r3, r6
 8001f98:	9309      	str	r3, [sp, #36]	; 0x24
 8001f9a:	e768      	b.n	8001e6e <_svfiprintf_r+0x4e>
 8001f9c:	460c      	mov	r4, r1
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fa4:	e7a6      	b.n	8001ef4 <_svfiprintf_r+0xd4>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f04f 0c0a 	mov.w	ip, #10
 8001fac:	4619      	mov	r1, r3
 8001fae:	3401      	adds	r4, #1
 8001fb0:	9305      	str	r3, [sp, #20]
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fb8:	3a30      	subs	r2, #48	; 0x30
 8001fba:	2a09      	cmp	r2, #9
 8001fbc:	d903      	bls.n	8001fc6 <_svfiprintf_r+0x1a6>
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0c6      	beq.n	8001f50 <_svfiprintf_r+0x130>
 8001fc2:	9105      	str	r1, [sp, #20]
 8001fc4:	e7c4      	b.n	8001f50 <_svfiprintf_r+0x130>
 8001fc6:	4604      	mov	r4, r0
 8001fc8:	2301      	movs	r3, #1
 8001fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fce:	e7f0      	b.n	8001fb2 <_svfiprintf_r+0x192>
 8001fd0:	ab03      	add	r3, sp, #12
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	462a      	mov	r2, r5
 8001fd6:	4638      	mov	r0, r7
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <_svfiprintf_r+0x1f8>)
 8001fda:	a904      	add	r1, sp, #16
 8001fdc:	f3af 8000 	nop.w
 8001fe0:	1c42      	adds	r2, r0, #1
 8001fe2:	4606      	mov	r6, r0
 8001fe4:	d1d6      	bne.n	8001f94 <_svfiprintf_r+0x174>
 8001fe6:	89ab      	ldrh	r3, [r5, #12]
 8001fe8:	065b      	lsls	r3, r3, #25
 8001fea:	f53f af2d 	bmi.w	8001e48 <_svfiprintf_r+0x28>
 8001fee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001ff0:	b01d      	add	sp, #116	; 0x74
 8001ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff6:	ab03      	add	r3, sp, #12
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	462a      	mov	r2, r5
 8001ffc:	4638      	mov	r0, r7
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <_svfiprintf_r+0x1f8>)
 8002000:	a904      	add	r1, sp, #16
 8002002:	f000 f87d 	bl	8002100 <_printf_i>
 8002006:	e7eb      	b.n	8001fe0 <_svfiprintf_r+0x1c0>
 8002008:	0800263f 	.word	0x0800263f
 800200c:	08002645 	.word	0x08002645
 8002010:	08002649 	.word	0x08002649
 8002014:	00000000 	.word	0x00000000
 8002018:	08001d6d 	.word	0x08001d6d

0800201c <_printf_common>:
 800201c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002020:	4616      	mov	r6, r2
 8002022:	4699      	mov	r9, r3
 8002024:	688a      	ldr	r2, [r1, #8]
 8002026:	690b      	ldr	r3, [r1, #16]
 8002028:	4607      	mov	r7, r0
 800202a:	4293      	cmp	r3, r2
 800202c:	bfb8      	it	lt
 800202e:	4613      	movlt	r3, r2
 8002030:	6033      	str	r3, [r6, #0]
 8002032:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002036:	460c      	mov	r4, r1
 8002038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800203c:	b10a      	cbz	r2, 8002042 <_printf_common+0x26>
 800203e:	3301      	adds	r3, #1
 8002040:	6033      	str	r3, [r6, #0]
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	0699      	lsls	r1, r3, #26
 8002046:	bf42      	ittt	mi
 8002048:	6833      	ldrmi	r3, [r6, #0]
 800204a:	3302      	addmi	r3, #2
 800204c:	6033      	strmi	r3, [r6, #0]
 800204e:	6825      	ldr	r5, [r4, #0]
 8002050:	f015 0506 	ands.w	r5, r5, #6
 8002054:	d106      	bne.n	8002064 <_printf_common+0x48>
 8002056:	f104 0a19 	add.w	sl, r4, #25
 800205a:	68e3      	ldr	r3, [r4, #12]
 800205c:	6832      	ldr	r2, [r6, #0]
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	42ab      	cmp	r3, r5
 8002062:	dc2b      	bgt.n	80020bc <_printf_common+0xa0>
 8002064:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002068:	1e13      	subs	r3, r2, #0
 800206a:	6822      	ldr	r2, [r4, #0]
 800206c:	bf18      	it	ne
 800206e:	2301      	movne	r3, #1
 8002070:	0692      	lsls	r2, r2, #26
 8002072:	d430      	bmi.n	80020d6 <_printf_common+0xba>
 8002074:	4649      	mov	r1, r9
 8002076:	4638      	mov	r0, r7
 8002078:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800207c:	47c0      	blx	r8
 800207e:	3001      	adds	r0, #1
 8002080:	d023      	beq.n	80020ca <_printf_common+0xae>
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	6922      	ldr	r2, [r4, #16]
 8002086:	f003 0306 	and.w	r3, r3, #6
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf14      	ite	ne
 800208e:	2500      	movne	r5, #0
 8002090:	6833      	ldreq	r3, [r6, #0]
 8002092:	f04f 0600 	mov.w	r6, #0
 8002096:	bf08      	it	eq
 8002098:	68e5      	ldreq	r5, [r4, #12]
 800209a:	f104 041a 	add.w	r4, r4, #26
 800209e:	bf08      	it	eq
 80020a0:	1aed      	subeq	r5, r5, r3
 80020a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80020a6:	bf08      	it	eq
 80020a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020ac:	4293      	cmp	r3, r2
 80020ae:	bfc4      	itt	gt
 80020b0:	1a9b      	subgt	r3, r3, r2
 80020b2:	18ed      	addgt	r5, r5, r3
 80020b4:	42b5      	cmp	r5, r6
 80020b6:	d11a      	bne.n	80020ee <_printf_common+0xd2>
 80020b8:	2000      	movs	r0, #0
 80020ba:	e008      	b.n	80020ce <_printf_common+0xb2>
 80020bc:	2301      	movs	r3, #1
 80020be:	4652      	mov	r2, sl
 80020c0:	4649      	mov	r1, r9
 80020c2:	4638      	mov	r0, r7
 80020c4:	47c0      	blx	r8
 80020c6:	3001      	adds	r0, #1
 80020c8:	d103      	bne.n	80020d2 <_printf_common+0xb6>
 80020ca:	f04f 30ff 	mov.w	r0, #4294967295
 80020ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d2:	3501      	adds	r5, #1
 80020d4:	e7c1      	b.n	800205a <_printf_common+0x3e>
 80020d6:	2030      	movs	r0, #48	; 0x30
 80020d8:	18e1      	adds	r1, r4, r3
 80020da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020e4:	4422      	add	r2, r4
 80020e6:	3302      	adds	r3, #2
 80020e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020ec:	e7c2      	b.n	8002074 <_printf_common+0x58>
 80020ee:	2301      	movs	r3, #1
 80020f0:	4622      	mov	r2, r4
 80020f2:	4649      	mov	r1, r9
 80020f4:	4638      	mov	r0, r7
 80020f6:	47c0      	blx	r8
 80020f8:	3001      	adds	r0, #1
 80020fa:	d0e6      	beq.n	80020ca <_printf_common+0xae>
 80020fc:	3601      	adds	r6, #1
 80020fe:	e7d9      	b.n	80020b4 <_printf_common+0x98>

08002100 <_printf_i>:
 8002100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002104:	7e0f      	ldrb	r7, [r1, #24]
 8002106:	4691      	mov	r9, r2
 8002108:	2f78      	cmp	r7, #120	; 0x78
 800210a:	4680      	mov	r8, r0
 800210c:	460c      	mov	r4, r1
 800210e:	469a      	mov	sl, r3
 8002110:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002116:	d807      	bhi.n	8002128 <_printf_i+0x28>
 8002118:	2f62      	cmp	r7, #98	; 0x62
 800211a:	d80a      	bhi.n	8002132 <_printf_i+0x32>
 800211c:	2f00      	cmp	r7, #0
 800211e:	f000 80d5 	beq.w	80022cc <_printf_i+0x1cc>
 8002122:	2f58      	cmp	r7, #88	; 0x58
 8002124:	f000 80c1 	beq.w	80022aa <_printf_i+0x1aa>
 8002128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800212c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002130:	e03a      	b.n	80021a8 <_printf_i+0xa8>
 8002132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002136:	2b15      	cmp	r3, #21
 8002138:	d8f6      	bhi.n	8002128 <_printf_i+0x28>
 800213a:	a101      	add	r1, pc, #4	; (adr r1, 8002140 <_printf_i+0x40>)
 800213c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002140:	08002199 	.word	0x08002199
 8002144:	080021ad 	.word	0x080021ad
 8002148:	08002129 	.word	0x08002129
 800214c:	08002129 	.word	0x08002129
 8002150:	08002129 	.word	0x08002129
 8002154:	08002129 	.word	0x08002129
 8002158:	080021ad 	.word	0x080021ad
 800215c:	08002129 	.word	0x08002129
 8002160:	08002129 	.word	0x08002129
 8002164:	08002129 	.word	0x08002129
 8002168:	08002129 	.word	0x08002129
 800216c:	080022b3 	.word	0x080022b3
 8002170:	080021d9 	.word	0x080021d9
 8002174:	0800226d 	.word	0x0800226d
 8002178:	08002129 	.word	0x08002129
 800217c:	08002129 	.word	0x08002129
 8002180:	080022d5 	.word	0x080022d5
 8002184:	08002129 	.word	0x08002129
 8002188:	080021d9 	.word	0x080021d9
 800218c:	08002129 	.word	0x08002129
 8002190:	08002129 	.word	0x08002129
 8002194:	08002275 	.word	0x08002275
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	1d1a      	adds	r2, r3, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	602a      	str	r2, [r5, #0]
 80021a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0a0      	b.n	80022ee <_printf_i+0x1ee>
 80021ac:	6820      	ldr	r0, [r4, #0]
 80021ae:	682b      	ldr	r3, [r5, #0]
 80021b0:	0607      	lsls	r7, r0, #24
 80021b2:	f103 0104 	add.w	r1, r3, #4
 80021b6:	6029      	str	r1, [r5, #0]
 80021b8:	d501      	bpl.n	80021be <_printf_i+0xbe>
 80021ba:	681e      	ldr	r6, [r3, #0]
 80021bc:	e003      	b.n	80021c6 <_printf_i+0xc6>
 80021be:	0646      	lsls	r6, r0, #25
 80021c0:	d5fb      	bpl.n	80021ba <_printf_i+0xba>
 80021c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80021c6:	2e00      	cmp	r6, #0
 80021c8:	da03      	bge.n	80021d2 <_printf_i+0xd2>
 80021ca:	232d      	movs	r3, #45	; 0x2d
 80021cc:	4276      	negs	r6, r6
 80021ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021d2:	230a      	movs	r3, #10
 80021d4:	4859      	ldr	r0, [pc, #356]	; (800233c <_printf_i+0x23c>)
 80021d6:	e012      	b.n	80021fe <_printf_i+0xfe>
 80021d8:	682b      	ldr	r3, [r5, #0]
 80021da:	6820      	ldr	r0, [r4, #0]
 80021dc:	1d19      	adds	r1, r3, #4
 80021de:	6029      	str	r1, [r5, #0]
 80021e0:	0605      	lsls	r5, r0, #24
 80021e2:	d501      	bpl.n	80021e8 <_printf_i+0xe8>
 80021e4:	681e      	ldr	r6, [r3, #0]
 80021e6:	e002      	b.n	80021ee <_printf_i+0xee>
 80021e8:	0641      	lsls	r1, r0, #25
 80021ea:	d5fb      	bpl.n	80021e4 <_printf_i+0xe4>
 80021ec:	881e      	ldrh	r6, [r3, #0]
 80021ee:	2f6f      	cmp	r7, #111	; 0x6f
 80021f0:	bf0c      	ite	eq
 80021f2:	2308      	moveq	r3, #8
 80021f4:	230a      	movne	r3, #10
 80021f6:	4851      	ldr	r0, [pc, #324]	; (800233c <_printf_i+0x23c>)
 80021f8:	2100      	movs	r1, #0
 80021fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80021fe:	6865      	ldr	r5, [r4, #4]
 8002200:	2d00      	cmp	r5, #0
 8002202:	bfa8      	it	ge
 8002204:	6821      	ldrge	r1, [r4, #0]
 8002206:	60a5      	str	r5, [r4, #8]
 8002208:	bfa4      	itt	ge
 800220a:	f021 0104 	bicge.w	r1, r1, #4
 800220e:	6021      	strge	r1, [r4, #0]
 8002210:	b90e      	cbnz	r6, 8002216 <_printf_i+0x116>
 8002212:	2d00      	cmp	r5, #0
 8002214:	d04b      	beq.n	80022ae <_printf_i+0x1ae>
 8002216:	4615      	mov	r5, r2
 8002218:	fbb6 f1f3 	udiv	r1, r6, r3
 800221c:	fb03 6711 	mls	r7, r3, r1, r6
 8002220:	5dc7      	ldrb	r7, [r0, r7]
 8002222:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002226:	4637      	mov	r7, r6
 8002228:	42bb      	cmp	r3, r7
 800222a:	460e      	mov	r6, r1
 800222c:	d9f4      	bls.n	8002218 <_printf_i+0x118>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d10b      	bne.n	800224a <_printf_i+0x14a>
 8002232:	6823      	ldr	r3, [r4, #0]
 8002234:	07de      	lsls	r6, r3, #31
 8002236:	d508      	bpl.n	800224a <_printf_i+0x14a>
 8002238:	6923      	ldr	r3, [r4, #16]
 800223a:	6861      	ldr	r1, [r4, #4]
 800223c:	4299      	cmp	r1, r3
 800223e:	bfde      	ittt	le
 8002240:	2330      	movle	r3, #48	; 0x30
 8002242:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002246:	f105 35ff 	addle.w	r5, r5, #4294967295
 800224a:	1b52      	subs	r2, r2, r5
 800224c:	6122      	str	r2, [r4, #16]
 800224e:	464b      	mov	r3, r9
 8002250:	4621      	mov	r1, r4
 8002252:	4640      	mov	r0, r8
 8002254:	f8cd a000 	str.w	sl, [sp]
 8002258:	aa03      	add	r2, sp, #12
 800225a:	f7ff fedf 	bl	800201c <_printf_common>
 800225e:	3001      	adds	r0, #1
 8002260:	d14a      	bne.n	80022f8 <_printf_i+0x1f8>
 8002262:	f04f 30ff 	mov.w	r0, #4294967295
 8002266:	b004      	add	sp, #16
 8002268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800226c:	6823      	ldr	r3, [r4, #0]
 800226e:	f043 0320 	orr.w	r3, r3, #32
 8002272:	6023      	str	r3, [r4, #0]
 8002274:	2778      	movs	r7, #120	; 0x78
 8002276:	4832      	ldr	r0, [pc, #200]	; (8002340 <_printf_i+0x240>)
 8002278:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	6829      	ldr	r1, [r5, #0]
 8002280:	061f      	lsls	r7, r3, #24
 8002282:	f851 6b04 	ldr.w	r6, [r1], #4
 8002286:	d402      	bmi.n	800228e <_printf_i+0x18e>
 8002288:	065f      	lsls	r7, r3, #25
 800228a:	bf48      	it	mi
 800228c:	b2b6      	uxthmi	r6, r6
 800228e:	07df      	lsls	r7, r3, #31
 8002290:	bf48      	it	mi
 8002292:	f043 0320 	orrmi.w	r3, r3, #32
 8002296:	6029      	str	r1, [r5, #0]
 8002298:	bf48      	it	mi
 800229a:	6023      	strmi	r3, [r4, #0]
 800229c:	b91e      	cbnz	r6, 80022a6 <_printf_i+0x1a6>
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	f023 0320 	bic.w	r3, r3, #32
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	2310      	movs	r3, #16
 80022a8:	e7a6      	b.n	80021f8 <_printf_i+0xf8>
 80022aa:	4824      	ldr	r0, [pc, #144]	; (800233c <_printf_i+0x23c>)
 80022ac:	e7e4      	b.n	8002278 <_printf_i+0x178>
 80022ae:	4615      	mov	r5, r2
 80022b0:	e7bd      	b.n	800222e <_printf_i+0x12e>
 80022b2:	682b      	ldr	r3, [r5, #0]
 80022b4:	6826      	ldr	r6, [r4, #0]
 80022b6:	1d18      	adds	r0, r3, #4
 80022b8:	6961      	ldr	r1, [r4, #20]
 80022ba:	6028      	str	r0, [r5, #0]
 80022bc:	0635      	lsls	r5, r6, #24
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	d501      	bpl.n	80022c6 <_printf_i+0x1c6>
 80022c2:	6019      	str	r1, [r3, #0]
 80022c4:	e002      	b.n	80022cc <_printf_i+0x1cc>
 80022c6:	0670      	lsls	r0, r6, #25
 80022c8:	d5fb      	bpl.n	80022c2 <_printf_i+0x1c2>
 80022ca:	8019      	strh	r1, [r3, #0]
 80022cc:	2300      	movs	r3, #0
 80022ce:	4615      	mov	r5, r2
 80022d0:	6123      	str	r3, [r4, #16]
 80022d2:	e7bc      	b.n	800224e <_printf_i+0x14e>
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	2100      	movs	r1, #0
 80022d8:	1d1a      	adds	r2, r3, #4
 80022da:	602a      	str	r2, [r5, #0]
 80022dc:	681d      	ldr	r5, [r3, #0]
 80022de:	6862      	ldr	r2, [r4, #4]
 80022e0:	4628      	mov	r0, r5
 80022e2:	f000 f859 	bl	8002398 <memchr>
 80022e6:	b108      	cbz	r0, 80022ec <_printf_i+0x1ec>
 80022e8:	1b40      	subs	r0, r0, r5
 80022ea:	6060      	str	r0, [r4, #4]
 80022ec:	6863      	ldr	r3, [r4, #4]
 80022ee:	6123      	str	r3, [r4, #16]
 80022f0:	2300      	movs	r3, #0
 80022f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022f6:	e7aa      	b.n	800224e <_printf_i+0x14e>
 80022f8:	462a      	mov	r2, r5
 80022fa:	4649      	mov	r1, r9
 80022fc:	4640      	mov	r0, r8
 80022fe:	6923      	ldr	r3, [r4, #16]
 8002300:	47d0      	blx	sl
 8002302:	3001      	adds	r0, #1
 8002304:	d0ad      	beq.n	8002262 <_printf_i+0x162>
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	079b      	lsls	r3, r3, #30
 800230a:	d413      	bmi.n	8002334 <_printf_i+0x234>
 800230c:	68e0      	ldr	r0, [r4, #12]
 800230e:	9b03      	ldr	r3, [sp, #12]
 8002310:	4298      	cmp	r0, r3
 8002312:	bfb8      	it	lt
 8002314:	4618      	movlt	r0, r3
 8002316:	e7a6      	b.n	8002266 <_printf_i+0x166>
 8002318:	2301      	movs	r3, #1
 800231a:	4632      	mov	r2, r6
 800231c:	4649      	mov	r1, r9
 800231e:	4640      	mov	r0, r8
 8002320:	47d0      	blx	sl
 8002322:	3001      	adds	r0, #1
 8002324:	d09d      	beq.n	8002262 <_printf_i+0x162>
 8002326:	3501      	adds	r5, #1
 8002328:	68e3      	ldr	r3, [r4, #12]
 800232a:	9903      	ldr	r1, [sp, #12]
 800232c:	1a5b      	subs	r3, r3, r1
 800232e:	42ab      	cmp	r3, r5
 8002330:	dcf2      	bgt.n	8002318 <_printf_i+0x218>
 8002332:	e7eb      	b.n	800230c <_printf_i+0x20c>
 8002334:	2500      	movs	r5, #0
 8002336:	f104 0619 	add.w	r6, r4, #25
 800233a:	e7f5      	b.n	8002328 <_printf_i+0x228>
 800233c:	08002650 	.word	0x08002650
 8002340:	08002661 	.word	0x08002661

08002344 <memmove>:
 8002344:	4288      	cmp	r0, r1
 8002346:	b510      	push	{r4, lr}
 8002348:	eb01 0402 	add.w	r4, r1, r2
 800234c:	d902      	bls.n	8002354 <memmove+0x10>
 800234e:	4284      	cmp	r4, r0
 8002350:	4623      	mov	r3, r4
 8002352:	d807      	bhi.n	8002364 <memmove+0x20>
 8002354:	1e43      	subs	r3, r0, #1
 8002356:	42a1      	cmp	r1, r4
 8002358:	d008      	beq.n	800236c <memmove+0x28>
 800235a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800235e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002362:	e7f8      	b.n	8002356 <memmove+0x12>
 8002364:	4601      	mov	r1, r0
 8002366:	4402      	add	r2, r0
 8002368:	428a      	cmp	r2, r1
 800236a:	d100      	bne.n	800236e <memmove+0x2a>
 800236c:	bd10      	pop	{r4, pc}
 800236e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002376:	e7f7      	b.n	8002368 <memmove+0x24>

08002378 <_sbrk_r>:
 8002378:	b538      	push	{r3, r4, r5, lr}
 800237a:	2300      	movs	r3, #0
 800237c:	4d05      	ldr	r5, [pc, #20]	; (8002394 <_sbrk_r+0x1c>)
 800237e:	4604      	mov	r4, r0
 8002380:	4608      	mov	r0, r1
 8002382:	602b      	str	r3, [r5, #0]
 8002384:	f7fe f8b2 	bl	80004ec <_sbrk>
 8002388:	1c43      	adds	r3, r0, #1
 800238a:	d102      	bne.n	8002392 <_sbrk_r+0x1a>
 800238c:	682b      	ldr	r3, [r5, #0]
 800238e:	b103      	cbz	r3, 8002392 <_sbrk_r+0x1a>
 8002390:	6023      	str	r3, [r4, #0]
 8002392:	bd38      	pop	{r3, r4, r5, pc}
 8002394:	20000200 	.word	0x20000200

08002398 <memchr>:
 8002398:	4603      	mov	r3, r0
 800239a:	b510      	push	{r4, lr}
 800239c:	b2c9      	uxtb	r1, r1
 800239e:	4402      	add	r2, r0
 80023a0:	4293      	cmp	r3, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	d101      	bne.n	80023aa <memchr+0x12>
 80023a6:	2000      	movs	r0, #0
 80023a8:	e003      	b.n	80023b2 <memchr+0x1a>
 80023aa:	7804      	ldrb	r4, [r0, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	428c      	cmp	r4, r1
 80023b0:	d1f6      	bne.n	80023a0 <memchr+0x8>
 80023b2:	bd10      	pop	{r4, pc}

080023b4 <memcpy>:
 80023b4:	440a      	add	r2, r1
 80023b6:	4291      	cmp	r1, r2
 80023b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80023bc:	d100      	bne.n	80023c0 <memcpy+0xc>
 80023be:	4770      	bx	lr
 80023c0:	b510      	push	{r4, lr}
 80023c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023c6:	4291      	cmp	r1, r2
 80023c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023cc:	d1f9      	bne.n	80023c2 <memcpy+0xe>
 80023ce:	bd10      	pop	{r4, pc}

080023d0 <_realloc_r>:
 80023d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023d4:	4680      	mov	r8, r0
 80023d6:	4614      	mov	r4, r2
 80023d8:	460e      	mov	r6, r1
 80023da:	b921      	cbnz	r1, 80023e6 <_realloc_r+0x16>
 80023dc:	4611      	mov	r1, r2
 80023de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023e2:	f7ff bc37 	b.w	8001c54 <_malloc_r>
 80023e6:	b92a      	cbnz	r2, 80023f4 <_realloc_r+0x24>
 80023e8:	f7ff fbcc 	bl	8001b84 <_free_r>
 80023ec:	4625      	mov	r5, r4
 80023ee:	4628      	mov	r0, r5
 80023f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f4:	f000 f81b 	bl	800242e <_malloc_usable_size_r>
 80023f8:	4284      	cmp	r4, r0
 80023fa:	4607      	mov	r7, r0
 80023fc:	d802      	bhi.n	8002404 <_realloc_r+0x34>
 80023fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002402:	d812      	bhi.n	800242a <_realloc_r+0x5a>
 8002404:	4621      	mov	r1, r4
 8002406:	4640      	mov	r0, r8
 8002408:	f7ff fc24 	bl	8001c54 <_malloc_r>
 800240c:	4605      	mov	r5, r0
 800240e:	2800      	cmp	r0, #0
 8002410:	d0ed      	beq.n	80023ee <_realloc_r+0x1e>
 8002412:	42bc      	cmp	r4, r7
 8002414:	4622      	mov	r2, r4
 8002416:	4631      	mov	r1, r6
 8002418:	bf28      	it	cs
 800241a:	463a      	movcs	r2, r7
 800241c:	f7ff ffca 	bl	80023b4 <memcpy>
 8002420:	4631      	mov	r1, r6
 8002422:	4640      	mov	r0, r8
 8002424:	f7ff fbae 	bl	8001b84 <_free_r>
 8002428:	e7e1      	b.n	80023ee <_realloc_r+0x1e>
 800242a:	4635      	mov	r5, r6
 800242c:	e7df      	b.n	80023ee <_realloc_r+0x1e>

0800242e <_malloc_usable_size_r>:
 800242e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002432:	1f18      	subs	r0, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	bfbc      	itt	lt
 8002438:	580b      	ldrlt	r3, [r1, r0]
 800243a:	18c0      	addlt	r0, r0, r3
 800243c:	4770      	bx	lr
	...

08002440 <_init>:
 8002440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002442:	bf00      	nop
 8002444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002446:	bc08      	pop	{r3}
 8002448:	469e      	mov	lr, r3
 800244a:	4770      	bx	lr

0800244c <_fini>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	bf00      	nop
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr
