
autolauncher_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080021d4  080021d4  000121d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800224c  0800224c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800224c  0800224c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800224c  0800224c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002250  08002250  00012250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  080022b0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080022b0  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065d7  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000131a  00000000  00000000  0002669f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  000279c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000049b  00000000  00000000  00027fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b15  00000000  00000000  0002846b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a29  00000000  00000000  0003ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081e95  00000000  00000000  000469a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c64  00000000  00000000  000c8840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ca4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080021bc 	.word	0x080021bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080021bc 	.word	0x080021bc

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa81 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f893 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8f7 	bl	800034c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f8cb 	bl	80002f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* UART MAX232*/
  // Send hello world to terminal
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET); // SET = UART-tx / RESET = Din from GPS
 8000162:	2201      	movs	r2, #1
 8000164:	2104      	movs	r1, #4
 8000166:	4840      	ldr	r0, [pc, #256]	; (8000268 <main+0x11c>)
 8000168:	f000 fd64 	bl	8000c34 <HAL_GPIO_WritePin>
  char text[] = "Hello World!\r\n";
 800016c:	4b3f      	ldr	r3, [pc, #252]	; (800026c <main+0x120>)
 800016e:	f107 040c 	add.w	r4, r7, #12
 8000172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000174:	c407      	stmia	r4!, {r0, r1, r2}
 8000176:	8023      	strh	r3, [r4, #0]
 8000178:	3402      	adds	r4, #2
 800017a:	0c1b      	lsrs	r3, r3, #16
 800017c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, text, sizeof(text)/sizeof(text[0]), 1000);
 800017e:	f107 010c 	add.w	r1, r7, #12
 8000182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000186:	220f      	movs	r2, #15
 8000188:	4839      	ldr	r0, [pc, #228]	; (8000270 <main+0x124>)
 800018a:	f001 f9e5 	bl	8001558 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Start counting up to send over UART
  uint8_t count = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	77fb      	strb	r3, [r7, #31]
  char buffer[10];

  // relay flag
  uint8_t relayFlag = 0;
 8000192:	2300      	movs	r3, #0
 8000194:	77bb      	strb	r3, [r7, #30]
  // Initialize relay in reset state
  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, SET); // reset relay
 8000196:	2201      	movs	r2, #1
 8000198:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019c:	4835      	ldr	r0, [pc, #212]	; (8000274 <main+0x128>)
 800019e:	f000 fd49 	bl	8000c34 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80001a2:	200a      	movs	r0, #10
 80001a4:	f000 faba 	bl	800071c <HAL_Delay>
  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, RESET); // release reset coil
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ae:	4831      	ldr	r0, [pc, #196]	; (8000274 <main+0x128>)
 80001b0:	f000 fd40 	bl	8000c34 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80001b4:	2005      	movs	r0, #5
 80001b6:	f000 fab1 	bl	800071c <HAL_Delay>


  while (1)
  {
	  // Toggle green led
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001ba:	2102      	movs	r1, #2
 80001bc:	482d      	ldr	r0, [pc, #180]	; (8000274 <main+0x128>)
 80001be:	f000 fd51 	bl	8000c64 <HAL_GPIO_TogglePin>

	  // Send count number to terminal
	  sprintf(buffer, "> %d\r\n", count);
 80001c2:	7ffa      	ldrb	r2, [r7, #31]
 80001c4:	463b      	mov	r3, r7
 80001c6:	492c      	ldr	r1, [pc, #176]	; (8000278 <main+0x12c>)
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fb45 	bl	8001858 <siprintf>
	  HAL_UART_Transmit(&huart1, buffer, 10, 1000);
 80001ce:	4639      	mov	r1, r7
 80001d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d4:	220a      	movs	r2, #10
 80001d6:	4826      	ldr	r0, [pc, #152]	; (8000270 <main+0x124>)
 80001d8:	f001 f9be 	bl	8001558 <HAL_UART_Transmit>
	  count++;
 80001dc:	7ffb      	ldrb	r3, [r7, #31]
 80001de:	3301      	adds	r3, #1
 80001e0:	77fb      	strb	r3, [r7, #31]

	  // Toggle relay K1 XBT1
	  // for future security read reset pin state to ensure set and reset coils are not energized simultaneously
	  if(0 == relayFlag){
 80001e2:	7fbb      	ldrb	r3, [r7, #30]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d126      	bne.n	8000236 <main+0xea>
		  // SET relay k1
		  HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, SET); // set relay
 80001e8:	2201      	movs	r2, #1
 80001ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ee:	4823      	ldr	r0, [pc, #140]	; (800027c <main+0x130>)
 80001f0:	f000 fd20 	bl	8000c34 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 80001f4:	200a      	movs	r0, #10
 80001f6:	f000 fa91 	bl	800071c <HAL_Delay>
		  HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RESET); // release coil
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000200:	481e      	ldr	r0, [pc, #120]	; (800027c <main+0x130>)
 8000202:	f000 fd17 	bl	8000c34 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000206:	2005      	movs	r0, #5
 8000208:	f000 fa88 	bl	800071c <HAL_Delay>
		  // SET SSR1 XBT1
		  HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, SET); // set SSR latch
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000212:	481a      	ldr	r0, [pc, #104]	; (800027c <main+0x130>)
 8000214:	f000 fd0e 	bl	8000c34 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000218:	200a      	movs	r0, #10
 800021a:	f000 fa7f 	bl	800071c <HAL_Delay>
		  HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, RESET); // release SSR latch
 800021e:	2200      	movs	r2, #0
 8000220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000224:	4815      	ldr	r0, [pc, #84]	; (800027c <main+0x130>)
 8000226:	f000 fd05 	bl	8000c34 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 800022a:	2005      	movs	r0, #5
 800022c:	f000 fa76 	bl	800071c <HAL_Delay>

		  relayFlag = 1;
 8000230:	2301      	movs	r3, #1
 8000232:	77bb      	strb	r3, [r7, #30]
 8000234:	e013      	b.n	800025e <main+0x112>
	  } else {
		  // RESET relay k1
		  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, SET); // reset relay and SSR
 8000236:	2201      	movs	r2, #1
 8000238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023c:	480d      	ldr	r0, [pc, #52]	; (8000274 <main+0x128>)
 800023e:	f000 fcf9 	bl	8000c34 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000242:	200a      	movs	r0, #10
 8000244:	f000 fa6a 	bl	800071c <HAL_Delay>
		  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, RESET); // release reset coil
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024e:	4809      	ldr	r0, [pc, #36]	; (8000274 <main+0x128>)
 8000250:	f000 fcf0 	bl	8000c34 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000254:	2005      	movs	r0, #5
 8000256:	f000 fa61 	bl	800071c <HAL_Delay>
		  relayFlag = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	77bb      	strb	r3, [r7, #30]
	  }


	  HAL_Delay(2000); // wait 2 seconds and toggle all
 800025e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000262:	f000 fa5b 	bl	800071c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000266:	e7a8      	b.n	80001ba <main+0x6e>
 8000268:	40010800 	.word	0x40010800
 800026c:	080021dc 	.word	0x080021dc
 8000270:	20000078 	.word	0x20000078
 8000274:	40010c00 	.word	0x40010c00
 8000278:	080021d4 	.word	0x080021d4
 800027c:	40011000 	.word	0x40011000

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	; 0x40
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0318 	add.w	r3, r7, #24
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fb02 	bl	8001898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	1d3b      	adds	r3, r7, #4
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a2:	2302      	movs	r3, #2
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a6:	2301      	movs	r3, #1
 80002a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	2310      	movs	r3, #16
 80002ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ae:	2300      	movs	r3, #0
 80002b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0318 	add.w	r3, r7, #24
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fcee 	bl	8000c98 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002c2:	f000 f8bb 	bl	800043c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 ff5c 	bl	800119c <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ea:	f000 f8a7 	bl	800043c <Error_Handler>
  }
}
 80002ee:	bf00      	nop
 80002f0:	3740      	adds	r7, #64	; 0x40
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
	...

080002f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <MX_USART1_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000302:	4b10      	ldr	r3, [pc, #64]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <MX_USART1_UART_Init+0x4c>)
 8000330:	f001 f8c2 	bl	80014b8 <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800033a:	f000 f87f 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000078 	.word	0x20000078
 8000348:	40013800 	.word	0x40013800

0800034c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b32      	ldr	r3, [pc, #200]	; (800042c <MX_GPIO_Init+0xe0>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a31      	ldr	r2, [pc, #196]	; (800042c <MX_GPIO_Init+0xe0>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b2f      	ldr	r3, [pc, #188]	; (800042c <MX_GPIO_Init+0xe0>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000378:	4b2c      	ldr	r3, [pc, #176]	; (800042c <MX_GPIO_Init+0xe0>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a2b      	ldr	r2, [pc, #172]	; (800042c <MX_GPIO_Init+0xe0>)
 800037e:	f043 0304 	orr.w	r3, r3, #4
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b29      	ldr	r3, [pc, #164]	; (800042c <MX_GPIO_Init+0xe0>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0304 	and.w	r3, r3, #4
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <MX_GPIO_Init+0xe0>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a25      	ldr	r2, [pc, #148]	; (800042c <MX_GPIO_Init+0xe0>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b23      	ldr	r3, [pc, #140]	; (800042c <MX_GPIO_Init+0xe0>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_XBT1_Pin|RELAY_K1_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80003ae:	4820      	ldr	r0, [pc, #128]	; (8000430 <MX_GPIO_Init+0xe4>)
 80003b0:	f000 fc40 	bl	8000c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2104      	movs	r1, #4
 80003b8:	481e      	ldr	r0, [pc, #120]	; (8000434 <MX_GPIO_Init+0xe8>)
 80003ba:	f000 fc3b 	bl	8000c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|RESET_RELAY_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 7181 	mov.w	r1, #258	; 0x102
 80003c4:	481c      	ldr	r0, [pc, #112]	; (8000438 <MX_GPIO_Init+0xec>)
 80003c6:	f000 fc35 	bl	8000c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SSR_XBT1_Pin RELAY_K1_Pin */
  GPIO_InitStruct.Pin = SSR_XBT1_Pin|RELAY_K1_Pin;
 80003ca:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80003ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2302      	movs	r3, #2
 80003da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4619      	mov	r1, r3
 80003e2:	4813      	ldr	r0, [pc, #76]	; (8000430 <MX_GPIO_Init+0xe4>)
 80003e4:	f000 faa2 	bl	800092c <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_SELECT_Pin */
  GPIO_InitStruct.Pin = MUX_SELECT_Pin;
 80003e8:	2304      	movs	r3, #4
 80003ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ec:	2301      	movs	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f4:	2302      	movs	r3, #2
 80003f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MUX_SELECT_GPIO_Port, &GPIO_InitStruct);
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	4619      	mov	r1, r3
 80003fe:	480d      	ldr	r0, [pc, #52]	; (8000434 <MX_GPIO_Init+0xe8>)
 8000400:	f000 fa94 	bl	800092c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin RESET_RELAY_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_RELAY_Pin;
 8000404:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	4806      	ldr	r0, [pc, #24]	; (8000438 <MX_GPIO_Init+0xec>)
 800041e:	f000 fa85 	bl	800092c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000422:	bf00      	nop
 8000424:	3720      	adds	r7, #32
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000
 8000430:	40011000 	.word	0x40011000
 8000434:	40010800 	.word	0x40010800
 8000438:	40010c00 	.word	0x40010c00

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a14      	ldr	r2, [pc, #80]	; (80004a4 <HAL_MspInit+0x5c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <HAL_MspInit+0x5c>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	4a0e      	ldr	r2, [pc, #56]	; (80004a4 <HAL_MspInit+0x5c>)
 800046c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000470:	61d3      	str	r3, [r2, #28]
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_MspInit+0x5c>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <HAL_MspInit+0x60>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000492:	60fb      	str	r3, [r7, #12]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <HAL_MspInit+0x60>)
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800049a:	bf00      	nop
 800049c:	3714      	adds	r7, #20
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010000 	.word	0x40010000

080004ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b088      	sub	sp, #32
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b4:	f107 0310 	add.w	r3, r7, #16
 80004b8:	2200      	movs	r2, #0
 80004ba:	601a      	str	r2, [r3, #0]
 80004bc:	605a      	str	r2, [r3, #4]
 80004be:	609a      	str	r2, [r3, #8]
 80004c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a1c      	ldr	r2, [pc, #112]	; (8000538 <HAL_UART_MspInit+0x8c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d131      	bne.n	8000530 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <HAL_UART_MspInit+0x90>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a1a      	ldr	r2, [pc, #104]	; (800053c <HAL_UART_MspInit+0x90>)
 80004d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <HAL_UART_MspInit+0x90>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <HAL_UART_MspInit+0x90>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <HAL_UART_MspInit+0x90>)
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_UART_MspInit+0x90>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0304 	and.w	r3, r3, #4
 80004f8:	60bb      	str	r3, [r7, #8]
 80004fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000502:	2302      	movs	r3, #2
 8000504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000506:	2303      	movs	r3, #3
 8000508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <HAL_UART_MspInit+0x94>)
 8000512:	f000 fa0b 	bl	800092c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800051a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <HAL_UART_MspInit+0x94>)
 800052c:	f000 f9fe 	bl	800092c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40013800 	.word	0x40013800
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <NMI_Handler+0x4>

0800054a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <HardFault_Handler+0x4>

08000550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <MemManage_Handler+0x4>

08000556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <BusFault_Handler+0x4>

0800055c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <UsageFault_Handler+0x4>

08000562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr

08000586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058a:	f000 f8ab 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800059c:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <_sbrk+0x5c>)
 800059e:	4b15      	ldr	r3, [pc, #84]	; (80005f4 <_sbrk+0x60>)
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a8:	4b13      	ldr	r3, [pc, #76]	; (80005f8 <_sbrk+0x64>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d102      	bne.n	80005b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005b0:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <_sbrk+0x64>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	; (80005fc <_sbrk+0x68>)
 80005b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005b6:	4b10      	ldr	r3, [pc, #64]	; (80005f8 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	693a      	ldr	r2, [r7, #16]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d207      	bcs.n	80005d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005c4:	f001 f970 	bl	80018a8 <__errno>
 80005c8:	4603      	mov	r3, r0
 80005ca:	220c      	movs	r2, #12
 80005cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ce:	f04f 33ff 	mov.w	r3, #4294967295
 80005d2:	e009      	b.n	80005e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005da:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <_sbrk+0x64>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4413      	add	r3, r2
 80005e2:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <_sbrk+0x64>)
 80005e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005e6:	68fb      	ldr	r3, [r7, #12]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20005000 	.word	0x20005000
 80005f4:	00000400 	.word	0x00000400
 80005f8:	200000c0 	.word	0x200000c0
 80005fc:	20000210 	.word	0x20000210

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800060c:	f7ff fff8 	bl	8000600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000612:	490c      	ldr	r1, [pc, #48]	; (8000644 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000614:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a09      	ldr	r2, [pc, #36]	; (800064c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000628:	4c09      	ldr	r4, [pc, #36]	; (8000650 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000636:	f001 f93d 	bl	80018b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fd87 	bl	800014c <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r0, =_sdata
 8000640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000644:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000648:	08002254 	.word	0x08002254
  ldr r2, =_sbss
 800064c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000650:	20000210 	.word	0x20000210

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f92b 	bl	80008c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	200f      	movs	r0, #15
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff fee8 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 f935 	bl	8000912 <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f000 f90b 	bl	80008da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x1c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <HAL_IncTick+0x20>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	20000008 	.word	0x20000008
 8000704:	200000c4 	.word	0x200000c4

08000708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	200000c4 	.word	0x200000c4

0800071c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000724:	f7ff fff0 	bl	8000708 <HAL_GetTick>
 8000728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000734:	d005      	beq.n	8000742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <HAL_Delay+0x44>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	461a      	mov	r2, r3
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4413      	add	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000742:	bf00      	nop
 8000744:	f7ff ffe0 	bl	8000708 <HAL_GetTick>
 8000748:	4602      	mov	r2, r0
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	429a      	cmp	r2, r3
 8000752:	d8f7      	bhi.n	8000744 <HAL_Delay+0x28>
  {
  }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000008 	.word	0x20000008

08000764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800078c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	60d3      	str	r3, [r2, #12]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <__NVIC_GetPriorityGrouping+0x18>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	0a1b      	lsrs	r3, r3, #8
 80007b6:	f003 0307 	and.w	r3, r3, #7
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	6039      	str	r1, [r7, #0]
 80007d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	db0a      	blt.n	80007f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	490c      	ldr	r1, [pc, #48]	; (8000814 <__NVIC_SetPriority+0x4c>)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	0112      	lsls	r2, r2, #4
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	440b      	add	r3, r1
 80007ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f0:	e00a      	b.n	8000808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4908      	ldr	r1, [pc, #32]	; (8000818 <__NVIC_SetPriority+0x50>)
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	f003 030f 	and.w	r3, r3, #15
 80007fe:	3b04      	subs	r3, #4
 8000800:	0112      	lsls	r2, r2, #4
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	440b      	add	r3, r1
 8000806:	761a      	strb	r2, [r3, #24]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000e100 	.word	0xe000e100
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	60b9      	str	r1, [r7, #8]
 8000826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	f1c3 0307 	rsb	r3, r3, #7
 8000836:	2b04      	cmp	r3, #4
 8000838:	bf28      	it	cs
 800083a:	2304      	movcs	r3, #4
 800083c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3304      	adds	r3, #4
 8000842:	2b06      	cmp	r3, #6
 8000844:	d902      	bls.n	800084c <NVIC_EncodePriority+0x30>
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3b03      	subs	r3, #3
 800084a:	e000      	b.n	800084e <NVIC_EncodePriority+0x32>
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000850:	f04f 32ff 	mov.w	r2, #4294967295
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43da      	mvns	r2, r3
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000864:	f04f 31ff 	mov.w	r1, #4294967295
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43d9      	mvns	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000874:	4313      	orrs	r3, r2
         );
}
 8000876:	4618      	mov	r0, r3
 8000878:	3724      	adds	r7, #36	; 0x24
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000890:	d301      	bcc.n	8000896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000892:	2301      	movs	r3, #1
 8000894:	e00f      	b.n	80008b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <SysTick_Config+0x40>)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800089e:	210f      	movs	r1, #15
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295
 80008a4:	f7ff ff90 	bl	80007c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a8:	4b05      	ldr	r3, [pc, #20]	; (80008c0 <SysTick_Config+0x40>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ae:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <SysTick_Config+0x40>)
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff49 	bl	8000764 <__NVIC_SetPriorityGrouping>
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008da:	b580      	push	{r7, lr}
 80008dc:	b086      	sub	sp, #24
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	60b9      	str	r1, [r7, #8]
 80008e4:	607a      	str	r2, [r7, #4]
 80008e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ec:	f7ff ff5e 	bl	80007ac <__NVIC_GetPriorityGrouping>
 80008f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	68b9      	ldr	r1, [r7, #8]
 80008f6:	6978      	ldr	r0, [r7, #20]
 80008f8:	f7ff ff90 	bl	800081c <NVIC_EncodePriority>
 80008fc:	4602      	mov	r2, r0
 80008fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000902:	4611      	mov	r1, r2
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff ff5f 	bl	80007c8 <__NVIC_SetPriority>
}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
 8000918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f7ff ffb0 	bl	8000880 <SysTick_Config>
 8000920:	4603      	mov	r3, r0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800092c:	b480      	push	{r7}
 800092e:	b08b      	sub	sp, #44	; 0x2c
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800093a:	2300      	movs	r3, #0
 800093c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800093e:	e169      	b.n	8000c14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000940:	2201      	movs	r2, #1
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	4013      	ands	r3, r2
 8000952:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	429a      	cmp	r2, r3
 800095a:	f040 8158 	bne.w	8000c0e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	4a9a      	ldr	r2, [pc, #616]	; (8000bcc <HAL_GPIO_Init+0x2a0>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d05e      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 8000968:	4a98      	ldr	r2, [pc, #608]	; (8000bcc <HAL_GPIO_Init+0x2a0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d875      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 800096e:	4a98      	ldr	r2, [pc, #608]	; (8000bd0 <HAL_GPIO_Init+0x2a4>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d058      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 8000974:	4a96      	ldr	r2, [pc, #600]	; (8000bd0 <HAL_GPIO_Init+0x2a4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d86f      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 800097a:	4a96      	ldr	r2, [pc, #600]	; (8000bd4 <HAL_GPIO_Init+0x2a8>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d052      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 8000980:	4a94      	ldr	r2, [pc, #592]	; (8000bd4 <HAL_GPIO_Init+0x2a8>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d869      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 8000986:	4a94      	ldr	r2, [pc, #592]	; (8000bd8 <HAL_GPIO_Init+0x2ac>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d04c      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 800098c:	4a92      	ldr	r2, [pc, #584]	; (8000bd8 <HAL_GPIO_Init+0x2ac>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d863      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 8000992:	4a92      	ldr	r2, [pc, #584]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d046      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
 8000998:	4a90      	ldr	r2, [pc, #576]	; (8000bdc <HAL_GPIO_Init+0x2b0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d85d      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 800099e:	2b12      	cmp	r3, #18
 80009a0:	d82a      	bhi.n	80009f8 <HAL_GPIO_Init+0xcc>
 80009a2:	2b12      	cmp	r3, #18
 80009a4:	d859      	bhi.n	8000a5a <HAL_GPIO_Init+0x12e>
 80009a6:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <HAL_GPIO_Init+0x80>)
 80009a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ac:	08000a27 	.word	0x08000a27
 80009b0:	08000a01 	.word	0x08000a01
 80009b4:	08000a13 	.word	0x08000a13
 80009b8:	08000a55 	.word	0x08000a55
 80009bc:	08000a5b 	.word	0x08000a5b
 80009c0:	08000a5b 	.word	0x08000a5b
 80009c4:	08000a5b 	.word	0x08000a5b
 80009c8:	08000a5b 	.word	0x08000a5b
 80009cc:	08000a5b 	.word	0x08000a5b
 80009d0:	08000a5b 	.word	0x08000a5b
 80009d4:	08000a5b 	.word	0x08000a5b
 80009d8:	08000a5b 	.word	0x08000a5b
 80009dc:	08000a5b 	.word	0x08000a5b
 80009e0:	08000a5b 	.word	0x08000a5b
 80009e4:	08000a5b 	.word	0x08000a5b
 80009e8:	08000a5b 	.word	0x08000a5b
 80009ec:	08000a5b 	.word	0x08000a5b
 80009f0:	08000a09 	.word	0x08000a09
 80009f4:	08000a1d 	.word	0x08000a1d
 80009f8:	4a79      	ldr	r2, [pc, #484]	; (8000be0 <HAL_GPIO_Init+0x2b4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d013      	beq.n	8000a26 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009fe:	e02c      	b.n	8000a5a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	623b      	str	r3, [r7, #32]
          break;
 8000a06:	e029      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	623b      	str	r3, [r7, #32]
          break;
 8000a10:	e024      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	3308      	adds	r3, #8
 8000a18:	623b      	str	r3, [r7, #32]
          break;
 8000a1a:	e01f      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	330c      	adds	r3, #12
 8000a22:	623b      	str	r3, [r7, #32]
          break;
 8000a24:	e01a      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d102      	bne.n	8000a34 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	623b      	str	r3, [r7, #32]
          break;
 8000a32:	e013      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d105      	bne.n	8000a48 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69fa      	ldr	r2, [r7, #28]
 8000a44:	611a      	str	r2, [r3, #16]
          break;
 8000a46:	e009      	b.n	8000a5c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	615a      	str	r2, [r3, #20]
          break;
 8000a52:	e003      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_Init+0x130>
          break;
 8000a5a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	2bff      	cmp	r3, #255	; 0xff
 8000a60:	d801      	bhi.n	8000a66 <HAL_GPIO_Init+0x13a>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	e001      	b.n	8000a6a <HAL_GPIO_Init+0x13e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	2bff      	cmp	r3, #255	; 0xff
 8000a70:	d802      	bhi.n	8000a78 <HAL_GPIO_Init+0x14c>
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	e002      	b.n	8000a7e <HAL_GPIO_Init+0x152>
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	3b08      	subs	r3, #8
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	210f      	movs	r1, #15
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	401a      	ands	r2, r3
 8000a90:	6a39      	ldr	r1, [r7, #32]
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	f000 80b1 	beq.w	8000c0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aac:	4b4d      	ldr	r3, [pc, #308]	; (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a4c      	ldr	r2, [pc, #304]	; (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b4a      	ldr	r3, [pc, #296]	; (8000be4 <HAL_GPIO_Init+0x2b8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ac4:	4a48      	ldr	r2, [pc, #288]	; (8000be8 <HAL_GPIO_Init+0x2bc>)
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	3302      	adds	r3, #2
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	220f      	movs	r2, #15
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a40      	ldr	r2, [pc, #256]	; (8000bec <HAL_GPIO_Init+0x2c0>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d013      	beq.n	8000b18 <HAL_GPIO_Init+0x1ec>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a3f      	ldr	r2, [pc, #252]	; (8000bf0 <HAL_GPIO_Init+0x2c4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d00d      	beq.n	8000b14 <HAL_GPIO_Init+0x1e8>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a3e      	ldr	r2, [pc, #248]	; (8000bf4 <HAL_GPIO_Init+0x2c8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d007      	beq.n	8000b10 <HAL_GPIO_Init+0x1e4>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a3d      	ldr	r2, [pc, #244]	; (8000bf8 <HAL_GPIO_Init+0x2cc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d101      	bne.n	8000b0c <HAL_GPIO_Init+0x1e0>
 8000b08:	2303      	movs	r3, #3
 8000b0a:	e006      	b.n	8000b1a <HAL_GPIO_Init+0x1ee>
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	e004      	b.n	8000b1a <HAL_GPIO_Init+0x1ee>
 8000b10:	2302      	movs	r3, #2
 8000b12:	e002      	b.n	8000b1a <HAL_GPIO_Init+0x1ee>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <HAL_GPIO_Init+0x1ee>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1c:	f002 0203 	and.w	r2, r2, #3
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	4093      	lsls	r3, r2
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b2a:	492f      	ldr	r1, [pc, #188]	; (8000be8 <HAL_GPIO_Init+0x2bc>)
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	3302      	adds	r3, #2
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b44:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	492c      	ldr	r1, [pc, #176]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	608b      	str	r3, [r1, #8]
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b52:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	4928      	ldr	r1, [pc, #160]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d006      	beq.n	8000b7a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b6e:	68da      	ldr	r2, [r3, #12]
 8000b70:	4922      	ldr	r1, [pc, #136]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60cb      	str	r3, [r1, #12]
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b7c:	68da      	ldr	r2, [r3, #12]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	491e      	ldr	r1, [pc, #120]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b84:	4013      	ands	r3, r2
 8000b86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	4918      	ldr	r1, [pc, #96]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
 8000ba0:	e006      	b.n	8000bb0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	4914      	ldr	r1, [pc, #80]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d021      	beq.n	8000c00 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	490e      	ldr	r1, [pc, #56]	; (8000bfc <HAL_GPIO_Init+0x2d0>)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	600b      	str	r3, [r1, #0]
 8000bc8:	e021      	b.n	8000c0e <HAL_GPIO_Init+0x2e2>
 8000bca:	bf00      	nop
 8000bcc:	10320000 	.word	0x10320000
 8000bd0:	10310000 	.word	0x10310000
 8000bd4:	10220000 	.word	0x10220000
 8000bd8:	10210000 	.word	0x10210000
 8000bdc:	10120000 	.word	0x10120000
 8000be0:	10110000 	.word	0x10110000
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40011400 	.word	0x40011400
 8000bfc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_GPIO_Init+0x304>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	4909      	ldr	r1, [pc, #36]	; (8000c30 <HAL_GPIO_Init+0x304>)
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	3301      	adds	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f47f ae8e 	bne.w	8000940 <HAL_GPIO_Init+0x14>
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	372c      	adds	r7, #44	; 0x2c
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40010400 	.word	0x40010400

08000c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	807b      	strh	r3, [r7, #2]
 8000c40:	4613      	mov	r3, r2
 8000c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c44:	787b      	ldrb	r3, [r7, #1]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c4a:	887a      	ldrh	r2, [r7, #2]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c50:	e003      	b.n	8000c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c52:	887b      	ldrh	r3, [r7, #2]
 8000c54:	041a      	lsls	r2, r3, #16
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	611a      	str	r2, [r3, #16]
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr

08000c64 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c76:	887a      	ldrh	r2, [r7, #2]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	041a      	lsls	r2, r3, #16
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43d9      	mvns	r1, r3
 8000c82:	887b      	ldrh	r3, [r7, #2]
 8000c84:	400b      	ands	r3, r1
 8000c86:	431a      	orrs	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	611a      	str	r2, [r3, #16]
}
 8000c8c:	bf00      	nop
 8000c8e:	3714      	adds	r7, #20
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d101      	bne.n	8000caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e272      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 8087 	beq.w	8000dc6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cb8:	4b92      	ldr	r3, [pc, #584]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 030c 	and.w	r3, r3, #12
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d00c      	beq.n	8000cde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cc4:	4b8f      	ldr	r3, [pc, #572]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 030c 	and.w	r3, r3, #12
 8000ccc:	2b08      	cmp	r3, #8
 8000cce:	d112      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x5e>
 8000cd0:	4b8c      	ldr	r3, [pc, #560]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cdc:	d10b      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cde:	4b89      	ldr	r3, [pc, #548]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d06c      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x12c>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d168      	bne.n	8000dc4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e24c      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfe:	d106      	bne.n	8000d0e <HAL_RCC_OscConfig+0x76>
 8000d00:	4b80      	ldr	r3, [pc, #512]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a7f      	ldr	r2, [pc, #508]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e02e      	b.n	8000d6c <HAL_RCC_OscConfig+0xd4>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10c      	bne.n	8000d30 <HAL_RCC_OscConfig+0x98>
 8000d16:	4b7b      	ldr	r3, [pc, #492]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a7a      	ldr	r2, [pc, #488]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d20:	6013      	str	r3, [r2, #0]
 8000d22:	4b78      	ldr	r3, [pc, #480]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a77      	ldr	r2, [pc, #476]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2c:	6013      	str	r3, [r2, #0]
 8000d2e:	e01d      	b.n	8000d6c <HAL_RCC_OscConfig+0xd4>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d38:	d10c      	bne.n	8000d54 <HAL_RCC_OscConfig+0xbc>
 8000d3a:	4b72      	ldr	r3, [pc, #456]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a71      	ldr	r2, [pc, #452]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b6f      	ldr	r3, [pc, #444]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a6e      	ldr	r2, [pc, #440]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e00b      	b.n	8000d6c <HAL_RCC_OscConfig+0xd4>
 8000d54:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a6a      	ldr	r2, [pc, #424]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	4b68      	ldr	r3, [pc, #416]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a67      	ldr	r2, [pc, #412]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d013      	beq.n	8000d9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d74:	f7ff fcc8 	bl	8000708 <HAL_GetTick>
 8000d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d7c:	f7ff fcc4 	bl	8000708 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b64      	cmp	r3, #100	; 0x64
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e200      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d8e:	4b5d      	ldr	r3, [pc, #372]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0f0      	beq.n	8000d7c <HAL_RCC_OscConfig+0xe4>
 8000d9a:	e014      	b.n	8000dc6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fcb4 	bl	8000708 <HAL_GetTick>
 8000da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff fcb0 	bl	8000708 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b64      	cmp	r3, #100	; 0x64
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e1ec      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000db6:	4b53      	ldr	r3, [pc, #332]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f0      	bne.n	8000da4 <HAL_RCC_OscConfig+0x10c>
 8000dc2:	e000      	b.n	8000dc6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d063      	beq.n	8000e9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dd2:	4b4c      	ldr	r3, [pc, #304]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d00b      	beq.n	8000df6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dde:	4b49      	ldr	r3, [pc, #292]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 030c 	and.w	r3, r3, #12
 8000de6:	2b08      	cmp	r3, #8
 8000de8:	d11c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x18c>
 8000dea:	4b46      	ldr	r3, [pc, #280]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d116      	bne.n	8000e24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df6:	4b43      	ldr	r3, [pc, #268]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <HAL_RCC_OscConfig+0x176>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	691b      	ldr	r3, [r3, #16]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d001      	beq.n	8000e0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e1c0      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0e:	4b3d      	ldr	r3, [pc, #244]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	4939      	ldr	r1, [pc, #228]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e22:	e03a      	b.n	8000e9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d020      	beq.n	8000e6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e2c:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e32:	f7ff fc69 	bl	8000708 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e3a:	f7ff fc65 	bl	8000708 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e1a1      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4927      	ldr	r1, [pc, #156]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	600b      	str	r3, [r1, #0]
 8000e6c:	e015      	b.n	8000e9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e6e:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_RCC_OscConfig+0x270>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fc48 	bl	8000708 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fc44 	bl	8000708 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e180      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d03a      	beq.n	8000f1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d019      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_RCC_OscConfig+0x274>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eb4:	f7ff fc28 	bl	8000708 <HAL_GetTick>
 8000eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eba:	e008      	b.n	8000ece <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ebc:	f7ff fc24 	bl	8000708 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d901      	bls.n	8000ece <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e160      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d0f0      	beq.n	8000ebc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 face 	bl	800147c <RCC_Delay>
 8000ee0:	e01c      	b.n	8000f1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_RCC_OscConfig+0x274>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee8:	f7ff fc0e 	bl	8000708 <HAL_GetTick>
 8000eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eee:	e00f      	b.n	8000f10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef0:	f7ff fc0a 	bl	8000708 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d908      	bls.n	8000f10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e146      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	42420000 	.word	0x42420000
 8000f0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f10:	4b92      	ldr	r3, [pc, #584]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1e9      	bne.n	8000ef0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80a6 	beq.w	8001076 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f2e:	4b8b      	ldr	r3, [pc, #556]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10d      	bne.n	8000f56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b88      	ldr	r3, [pc, #544]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a87      	ldr	r2, [pc, #540]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b85      	ldr	r3, [pc, #532]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f52:	2301      	movs	r3, #1
 8000f54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f56:	4b82      	ldr	r3, [pc, #520]	; (8001160 <HAL_RCC_OscConfig+0x4c8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d118      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f62:	4b7f      	ldr	r3, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x4c8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a7e      	ldr	r2, [pc, #504]	; (8001160 <HAL_RCC_OscConfig+0x4c8>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fbcb 	bl	8000708 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f74:	e008      	b.n	8000f88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f76:	f7ff fbc7 	bl	8000708 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	2b64      	cmp	r3, #100	; 0x64
 8000f82:	d901      	bls.n	8000f88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f84:	2303      	movs	r3, #3
 8000f86:	e103      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f88:	4b75      	ldr	r3, [pc, #468]	; (8001160 <HAL_RCC_OscConfig+0x4c8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0f0      	beq.n	8000f76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d106      	bne.n	8000faa <HAL_RCC_OscConfig+0x312>
 8000f9c:	4b6f      	ldr	r3, [pc, #444]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4a6e      	ldr	r2, [pc, #440]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	6213      	str	r3, [r2, #32]
 8000fa8:	e02d      	b.n	8001006 <HAL_RCC_OscConfig+0x36e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x334>
 8000fb2:	4b6a      	ldr	r3, [pc, #424]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	4a69      	ldr	r2, [pc, #420]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	f023 0301 	bic.w	r3, r3, #1
 8000fbc:	6213      	str	r3, [r2, #32]
 8000fbe:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	4a66      	ldr	r2, [pc, #408]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	f023 0304 	bic.w	r3, r3, #4
 8000fc8:	6213      	str	r3, [r2, #32]
 8000fca:	e01c      	b.n	8001006 <HAL_RCC_OscConfig+0x36e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b05      	cmp	r3, #5
 8000fd2:	d10c      	bne.n	8000fee <HAL_RCC_OscConfig+0x356>
 8000fd4:	4b61      	ldr	r3, [pc, #388]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4a60      	ldr	r2, [pc, #384]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6213      	str	r3, [r2, #32]
 8000fe0:	4b5e      	ldr	r3, [pc, #376]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4a5d      	ldr	r2, [pc, #372]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6213      	str	r3, [r2, #32]
 8000fec:	e00b      	b.n	8001006 <HAL_RCC_OscConfig+0x36e>
 8000fee:	4b5b      	ldr	r3, [pc, #364]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	4a5a      	ldr	r2, [pc, #360]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6213      	str	r3, [r2, #32]
 8000ffa:	4b58      	ldr	r3, [pc, #352]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	4a57      	ldr	r2, [pc, #348]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8001000:	f023 0304 	bic.w	r3, r3, #4
 8001004:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d015      	beq.n	800103a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100e:	f7ff fb7b 	bl	8000708 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001014:	e00a      	b.n	800102c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001016:	f7ff fb77 	bl	8000708 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	f241 3288 	movw	r2, #5000	; 0x1388
 8001024:	4293      	cmp	r3, r2
 8001026:	d901      	bls.n	800102c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001028:	2303      	movs	r3, #3
 800102a:	e0b1      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102c:	4b4b      	ldr	r3, [pc, #300]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	f003 0302 	and.w	r3, r3, #2
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0ee      	beq.n	8001016 <HAL_RCC_OscConfig+0x37e>
 8001038:	e014      	b.n	8001064 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103a:	f7ff fb65 	bl	8000708 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001040:	e00a      	b.n	8001058 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001042:	f7ff fb61 	bl	8000708 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001050:	4293      	cmp	r3, r2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e09b      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001058:	4b40      	ldr	r3, [pc, #256]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1ee      	bne.n	8001042 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d105      	bne.n	8001076 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a3b      	ldr	r2, [pc, #236]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001074:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8087 	beq.w	800118e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b08      	cmp	r3, #8
 800108a:	d061      	beq.n	8001150 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	69db      	ldr	r3, [r3, #28]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d146      	bne.n	8001122 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <HAL_RCC_OscConfig+0x4cc>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109a:	f7ff fb35 	bl	8000708 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a2:	f7ff fb31 	bl	8000708 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e06d      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010b4:	4b29      	ldr	r3, [pc, #164]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1f0      	bne.n	80010a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d108      	bne.n	80010dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	4921      	ldr	r1, [pc, #132]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	4313      	orrs	r3, r2
 80010da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010dc:	4b1f      	ldr	r3, [pc, #124]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a19      	ldr	r1, [r3, #32]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	430b      	orrs	r3, r1
 80010ee:	491b      	ldr	r1, [pc, #108]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_RCC_OscConfig+0x4cc>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fb05 	bl	8000708 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001102:	f7ff fb01 	bl	8000708 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e03d      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f0      	beq.n	8001102 <HAL_RCC_OscConfig+0x46a>
 8001120:	e035      	b.n	800118e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_RCC_OscConfig+0x4cc>)
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff faee 	bl	8000708 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001130:	f7ff faea 	bl	8000708 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e026      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_RCC_OscConfig+0x4c4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f0      	bne.n	8001130 <HAL_RCC_OscConfig+0x498>
 800114e:	e01e      	b.n	800118e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69db      	ldr	r3, [r3, #28]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d107      	bne.n	8001168 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e019      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
 800115c:	40021000 	.word	0x40021000
 8001160:	40007000 	.word	0x40007000
 8001164:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_RCC_OscConfig+0x500>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a1b      	ldr	r3, [r3, #32]
 8001178:	429a      	cmp	r2, r3
 800117a:	d106      	bne.n	800118a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001186:	429a      	cmp	r2, r3
 8001188:	d001      	beq.n	800118e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000

0800119c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d101      	bne.n	80011b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e0d0      	b.n	8001352 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011b0:	4b6a      	ldr	r3, [pc, #424]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d910      	bls.n	80011e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b67      	ldr	r3, [pc, #412]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 0207 	bic.w	r2, r3, #7
 80011c6:	4965      	ldr	r1, [pc, #404]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ce:	4b63      	ldr	r3, [pc, #396]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d001      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e0b8      	b.n	8001352 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d020      	beq.n	800122e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d005      	beq.n	8001204 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011f8:	4b59      	ldr	r3, [pc, #356]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4a58      	ldr	r2, [pc, #352]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001202:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4a52      	ldr	r2, [pc, #328]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800121a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800121c:	4b50      	ldr	r3, [pc, #320]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	494d      	ldr	r1, [pc, #308]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d040      	beq.n	80012bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d107      	bne.n	8001252 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4b47      	ldr	r3, [pc, #284]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d115      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e07f      	b.n	8001352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d107      	bne.n	800126a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d109      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e073      	b.n	8001352 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e06b      	b.n	8001352 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f023 0203 	bic.w	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4936      	ldr	r1, [pc, #216]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800128c:	f7ff fa3c 	bl	8000708 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001292:	e00a      	b.n	80012aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001294:	f7ff fa38 	bl	8000708 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e053      	b.n	8001352 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 020c 	and.w	r2, r3, #12
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d1eb      	bne.n	8001294 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012bc:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d210      	bcs.n	80012ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 0207 	bic.w	r2, r3, #7
 80012d2:	4922      	ldr	r1, [pc, #136]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <HAL_RCC_ClockConfig+0x1c0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e032      	b.n	8001352 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	4916      	ldr	r1, [pc, #88]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d009      	beq.n	800132a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	490e      	ldr	r1, [pc, #56]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800132a:	f000 f821 	bl	8001370 <HAL_RCC_GetSysClockFreq>
 800132e:	4602      	mov	r2, r0
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	490a      	ldr	r1, [pc, #40]	; (8001364 <HAL_RCC_ClockConfig+0x1c8>)
 800133c:	5ccb      	ldrb	r3, [r1, r3]
 800133e:	fa22 f303 	lsr.w	r3, r2, r3
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_RCC_ClockConfig+0x1cc>)
 8001344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_RCC_ClockConfig+0x1d0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f99a 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40022000 	.word	0x40022000
 8001360:	40021000 	.word	0x40021000
 8001364:	080021ec 	.word	0x080021ec
 8001368:	20000000 	.word	0x20000000
 800136c:	20000004 	.word	0x20000004

08001370 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
 8001382:	2300      	movs	r3, #0
 8001384:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_RCC_GetSysClockFreq+0x94>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b04      	cmp	r3, #4
 8001398:	d002      	beq.n	80013a0 <HAL_RCC_GetSysClockFreq+0x30>
 800139a:	2b08      	cmp	r3, #8
 800139c:	d003      	beq.n	80013a6 <HAL_RCC_GetSysClockFreq+0x36>
 800139e:	e027      	b.n	80013f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013a0:	4b19      	ldr	r3, [pc, #100]	; (8001408 <HAL_RCC_GetSysClockFreq+0x98>)
 80013a2:	613b      	str	r3, [r7, #16]
      break;
 80013a4:	e027      	b.n	80013f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	0c9b      	lsrs	r3, r3, #18
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d010      	beq.n	80013e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_RCC_GetSysClockFreq+0x94>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	0c5b      	lsrs	r3, r3, #17
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	4a11      	ldr	r2, [pc, #68]	; (8001410 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013ca:	5cd3      	ldrb	r3, [r2, r3]
 80013cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <HAL_RCC_GetSysClockFreq+0x98>)
 80013d2:	fb03 f202 	mul.w	r2, r3, r2
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	e004      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a0c      	ldr	r2, [pc, #48]	; (8001414 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	613b      	str	r3, [r7, #16]
      break;
 80013ee:	e002      	b.n	80013f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_RCC_GetSysClockFreq+0x98>)
 80013f2:	613b      	str	r3, [r7, #16]
      break;
 80013f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013f6:	693b      	ldr	r3, [r7, #16]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000
 8001408:	007a1200 	.word	0x007a1200
 800140c:	08002204 	.word	0x08002204
 8001410:	08002214 	.word	0x08002214
 8001414:	003d0900 	.word	0x003d0900

08001418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <HAL_RCC_GetHCLKFreq+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000000 	.word	0x20000000

0800142c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001430:	f7ff fff2 	bl	8001418 <HAL_RCC_GetHCLKFreq>
 8001434:	4602      	mov	r2, r0
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	4903      	ldr	r1, [pc, #12]	; (8001450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001442:	5ccb      	ldrb	r3, [r1, r3]
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	080021fc 	.word	0x080021fc

08001454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001458:	f7ff ffde 	bl	8001418 <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	0adb      	lsrs	r3, r3, #11
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK2Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	080021fc 	.word	0x080021fc

0800147c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001484:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <RCC_Delay+0x34>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <RCC_Delay+0x38>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0a5b      	lsrs	r3, r3, #9
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	fb02 f303 	mul.w	r3, r2, r3
 8001496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001498:	bf00      	nop
  }
  while (Delay --);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1e5a      	subs	r2, r3, #1
 800149e:	60fa      	str	r2, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f9      	bne.n	8001498 <RCC_Delay+0x1c>
}
 80014a4:	bf00      	nop
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	20000000 	.word	0x20000000
 80014b4:	10624dd3 	.word	0x10624dd3

080014b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e042      	b.n	8001550 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d106      	bne.n	80014e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7fe ffe4 	bl	80004ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2224      	movs	r2, #36	; 0x24
 80014e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68da      	ldr	r2, [r3, #12]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f91d 	bl	800173c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	695a      	ldr	r2, [r3, #20]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68da      	ldr	r2, [r3, #12]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2220      	movs	r2, #32
 800153c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2220      	movs	r2, #32
 8001544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af02      	add	r7, sp, #8
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	603b      	str	r3, [r7, #0]
 8001564:	4613      	mov	r3, r2
 8001566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001572:	b2db      	uxtb	r3, r3
 8001574:	2b20      	cmp	r3, #32
 8001576:	d16d      	bne.n	8001654 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <HAL_UART_Transmit+0x2c>
 800157e:	88fb      	ldrh	r3, [r7, #6]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e066      	b.n	8001656 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2221      	movs	r2, #33	; 0x21
 8001592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001596:	f7ff f8b7 	bl	8000708 <HAL_GetTick>
 800159a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	88fa      	ldrh	r2, [r7, #6]
 80015a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	88fa      	ldrh	r2, [r7, #6]
 80015a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b0:	d108      	bne.n	80015c4 <HAL_UART_Transmit+0x6c>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d104      	bne.n	80015c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	61bb      	str	r3, [r7, #24]
 80015c2:	e003      	b.n	80015cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80015cc:	e02a      	b.n	8001624 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2200      	movs	r2, #0
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f840 	bl	800165e <UART_WaitOnFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e036      	b.n	8001656 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10b      	bne.n	8001606 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	881b      	ldrh	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	3302      	adds	r3, #2
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	e007      	b.n	8001616 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	781a      	ldrb	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	3301      	adds	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800161a:	b29b      	uxth	r3, r3
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001628:	b29b      	uxth	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1cf      	bne.n	80015ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2200      	movs	r2, #0
 8001636:	2140      	movs	r1, #64	; 0x40
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 f810 	bl	800165e <UART_WaitOnFlagUntilTimeout>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e006      	b.n	8001656 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2220      	movs	r2, #32
 800164c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e000      	b.n	8001656 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001654:	2302      	movs	r3, #2
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	3720      	adds	r7, #32
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b090      	sub	sp, #64	; 0x40
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	4613      	mov	r3, r2
 800166c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800166e:	e050      	b.n	8001712 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001676:	d04c      	beq.n	8001712 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <UART_WaitOnFlagUntilTimeout+0x30>
 800167e:	f7ff f843 	bl	8000708 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800168a:	429a      	cmp	r2, r3
 800168c:	d241      	bcs.n	8001712 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	330c      	adds	r3, #12
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	e853 3f00 	ldrex	r3, [r3]
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	330c      	adds	r3, #12
 80016ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80016ae:	637a      	str	r2, [r7, #52]	; 0x34
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016b6:	e841 2300 	strex	r3, r2, [r1]
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1e5      	bne.n	800168e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3314      	adds	r3, #20
 80016c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	e853 3f00 	ldrex	r3, [r3]
 80016d0:	613b      	str	r3, [r7, #16]
   return(result);
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	f023 0301 	bic.w	r3, r3, #1
 80016d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3314      	adds	r3, #20
 80016e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016e2:	623a      	str	r2, [r7, #32]
 80016e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016e6:	69f9      	ldr	r1, [r7, #28]
 80016e8:	6a3a      	ldr	r2, [r7, #32]
 80016ea:	e841 2300 	strex	r3, r2, [r1]
 80016ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1e5      	bne.n	80016c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2220      	movs	r2, #32
 80016fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2220      	movs	r2, #32
 8001702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e00f      	b.n	8001732 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4013      	ands	r3, r2
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	bf0c      	ite	eq
 8001722:	2301      	moveq	r3, #1
 8001724:	2300      	movne	r3, #0
 8001726:	b2db      	uxtb	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	429a      	cmp	r2, r3
 800172e:	d09f      	beq.n	8001670 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3740      	adds	r7, #64	; 0x40
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68da      	ldr	r2, [r3, #12]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	4313      	orrs	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001776:	f023 030c 	bic.w	r3, r3, #12
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	68b9      	ldr	r1, [r7, #8]
 8001780:	430b      	orrs	r3, r1
 8001782:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	699a      	ldr	r2, [r3, #24]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <UART_SetConfig+0x114>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d103      	bne.n	80017ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80017a4:	f7ff fe56 	bl	8001454 <HAL_RCC_GetPCLK2Freq>
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	e002      	b.n	80017b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80017ac:	f7ff fe3e 	bl	800142c <HAL_RCC_GetPCLK1Freq>
 80017b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	009a      	lsls	r2, r3, #2
 80017bc:	441a      	add	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c8:	4a22      	ldr	r2, [pc, #136]	; (8001854 <UART_SetConfig+0x118>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	0119      	lsls	r1, r3, #4
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	009a      	lsls	r2, r3, #2
 80017dc:	441a      	add	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <UART_SetConfig+0x118>)
 80017ea:	fba3 0302 	umull	r0, r3, r3, r2
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	fb00 f303 	mul.w	r3, r0, r3
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	3332      	adds	r3, #50	; 0x32
 80017fc:	4a15      	ldr	r2, [pc, #84]	; (8001854 <UART_SetConfig+0x118>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001808:	4419      	add	r1, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4613      	mov	r3, r2
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	009a      	lsls	r2, r3, #2
 8001814:	441a      	add	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <UART_SetConfig+0x118>)
 8001822:	fba3 0302 	umull	r0, r3, r3, r2
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2064      	movs	r0, #100	; 0x64
 800182a:	fb00 f303 	mul.w	r3, r0, r3
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	011b      	lsls	r3, r3, #4
 8001832:	3332      	adds	r3, #50	; 0x32
 8001834:	4a07      	ldr	r2, [pc, #28]	; (8001854 <UART_SetConfig+0x118>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	f003 020f 	and.w	r2, r3, #15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	440a      	add	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40013800 	.word	0x40013800
 8001854:	51eb851f 	.word	0x51eb851f

08001858 <siprintf>:
 8001858:	b40e      	push	{r1, r2, r3}
 800185a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800185e:	b500      	push	{lr}
 8001860:	b09c      	sub	sp, #112	; 0x70
 8001862:	ab1d      	add	r3, sp, #116	; 0x74
 8001864:	9002      	str	r0, [sp, #8]
 8001866:	9006      	str	r0, [sp, #24]
 8001868:	9107      	str	r1, [sp, #28]
 800186a:	9104      	str	r1, [sp, #16]
 800186c:	4808      	ldr	r0, [pc, #32]	; (8001890 <siprintf+0x38>)
 800186e:	4909      	ldr	r1, [pc, #36]	; (8001894 <siprintf+0x3c>)
 8001870:	f853 2b04 	ldr.w	r2, [r3], #4
 8001874:	9105      	str	r1, [sp, #20]
 8001876:	6800      	ldr	r0, [r0, #0]
 8001878:	a902      	add	r1, sp, #8
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	f000 f98e 	bl	8001b9c <_svfiprintf_r>
 8001880:	2200      	movs	r2, #0
 8001882:	9b02      	ldr	r3, [sp, #8]
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	b01c      	add	sp, #112	; 0x70
 8001888:	f85d eb04 	ldr.w	lr, [sp], #4
 800188c:	b003      	add	sp, #12
 800188e:	4770      	bx	lr
 8001890:	20000058 	.word	0x20000058
 8001894:	ffff0208 	.word	0xffff0208

08001898 <memset>:
 8001898:	4603      	mov	r3, r0
 800189a:	4402      	add	r2, r0
 800189c:	4293      	cmp	r3, r2
 800189e:	d100      	bne.n	80018a2 <memset+0xa>
 80018a0:	4770      	bx	lr
 80018a2:	f803 1b01 	strb.w	r1, [r3], #1
 80018a6:	e7f9      	b.n	800189c <memset+0x4>

080018a8 <__errno>:
 80018a8:	4b01      	ldr	r3, [pc, #4]	; (80018b0 <__errno+0x8>)
 80018aa:	6818      	ldr	r0, [r3, #0]
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000058 	.word	0x20000058

080018b4 <__libc_init_array>:
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	2600      	movs	r6, #0
 80018b8:	4d0c      	ldr	r5, [pc, #48]	; (80018ec <__libc_init_array+0x38>)
 80018ba:	4c0d      	ldr	r4, [pc, #52]	; (80018f0 <__libc_init_array+0x3c>)
 80018bc:	1b64      	subs	r4, r4, r5
 80018be:	10a4      	asrs	r4, r4, #2
 80018c0:	42a6      	cmp	r6, r4
 80018c2:	d109      	bne.n	80018d8 <__libc_init_array+0x24>
 80018c4:	f000 fc7a 	bl	80021bc <_init>
 80018c8:	2600      	movs	r6, #0
 80018ca:	4d0a      	ldr	r5, [pc, #40]	; (80018f4 <__libc_init_array+0x40>)
 80018cc:	4c0a      	ldr	r4, [pc, #40]	; (80018f8 <__libc_init_array+0x44>)
 80018ce:	1b64      	subs	r4, r4, r5
 80018d0:	10a4      	asrs	r4, r4, #2
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d105      	bne.n	80018e2 <__libc_init_array+0x2e>
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018dc:	4798      	blx	r3
 80018de:	3601      	adds	r6, #1
 80018e0:	e7ee      	b.n	80018c0 <__libc_init_array+0xc>
 80018e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e6:	4798      	blx	r3
 80018e8:	3601      	adds	r6, #1
 80018ea:	e7f2      	b.n	80018d2 <__libc_init_array+0x1e>
 80018ec:	0800224c 	.word	0x0800224c
 80018f0:	0800224c 	.word	0x0800224c
 80018f4:	0800224c 	.word	0x0800224c
 80018f8:	08002250 	.word	0x08002250

080018fc <__retarget_lock_acquire_recursive>:
 80018fc:	4770      	bx	lr

080018fe <__retarget_lock_release_recursive>:
 80018fe:	4770      	bx	lr

08001900 <_free_r>:
 8001900:	b538      	push	{r3, r4, r5, lr}
 8001902:	4605      	mov	r5, r0
 8001904:	2900      	cmp	r1, #0
 8001906:	d040      	beq.n	800198a <_free_r+0x8a>
 8001908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800190c:	1f0c      	subs	r4, r1, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	bfb8      	it	lt
 8001912:	18e4      	addlt	r4, r4, r3
 8001914:	f000 f8dc 	bl	8001ad0 <__malloc_lock>
 8001918:	4a1c      	ldr	r2, [pc, #112]	; (800198c <_free_r+0x8c>)
 800191a:	6813      	ldr	r3, [r2, #0]
 800191c:	b933      	cbnz	r3, 800192c <_free_r+0x2c>
 800191e:	6063      	str	r3, [r4, #4]
 8001920:	6014      	str	r4, [r2, #0]
 8001922:	4628      	mov	r0, r5
 8001924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001928:	f000 b8d8 	b.w	8001adc <__malloc_unlock>
 800192c:	42a3      	cmp	r3, r4
 800192e:	d908      	bls.n	8001942 <_free_r+0x42>
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	1821      	adds	r1, r4, r0
 8001934:	428b      	cmp	r3, r1
 8001936:	bf01      	itttt	eq
 8001938:	6819      	ldreq	r1, [r3, #0]
 800193a:	685b      	ldreq	r3, [r3, #4]
 800193c:	1809      	addeq	r1, r1, r0
 800193e:	6021      	streq	r1, [r4, #0]
 8001940:	e7ed      	b.n	800191e <_free_r+0x1e>
 8001942:	461a      	mov	r2, r3
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	b10b      	cbz	r3, 800194c <_free_r+0x4c>
 8001948:	42a3      	cmp	r3, r4
 800194a:	d9fa      	bls.n	8001942 <_free_r+0x42>
 800194c:	6811      	ldr	r1, [r2, #0]
 800194e:	1850      	adds	r0, r2, r1
 8001950:	42a0      	cmp	r0, r4
 8001952:	d10b      	bne.n	800196c <_free_r+0x6c>
 8001954:	6820      	ldr	r0, [r4, #0]
 8001956:	4401      	add	r1, r0
 8001958:	1850      	adds	r0, r2, r1
 800195a:	4283      	cmp	r3, r0
 800195c:	6011      	str	r1, [r2, #0]
 800195e:	d1e0      	bne.n	8001922 <_free_r+0x22>
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	4408      	add	r0, r1
 8001966:	6010      	str	r0, [r2, #0]
 8001968:	6053      	str	r3, [r2, #4]
 800196a:	e7da      	b.n	8001922 <_free_r+0x22>
 800196c:	d902      	bls.n	8001974 <_free_r+0x74>
 800196e:	230c      	movs	r3, #12
 8001970:	602b      	str	r3, [r5, #0]
 8001972:	e7d6      	b.n	8001922 <_free_r+0x22>
 8001974:	6820      	ldr	r0, [r4, #0]
 8001976:	1821      	adds	r1, r4, r0
 8001978:	428b      	cmp	r3, r1
 800197a:	bf01      	itttt	eq
 800197c:	6819      	ldreq	r1, [r3, #0]
 800197e:	685b      	ldreq	r3, [r3, #4]
 8001980:	1809      	addeq	r1, r1, r0
 8001982:	6021      	streq	r1, [r4, #0]
 8001984:	6063      	str	r3, [r4, #4]
 8001986:	6054      	str	r4, [r2, #4]
 8001988:	e7cb      	b.n	8001922 <_free_r+0x22>
 800198a:	bd38      	pop	{r3, r4, r5, pc}
 800198c:	20000208 	.word	0x20000208

08001990 <sbrk_aligned>:
 8001990:	b570      	push	{r4, r5, r6, lr}
 8001992:	4e0e      	ldr	r6, [pc, #56]	; (80019cc <sbrk_aligned+0x3c>)
 8001994:	460c      	mov	r4, r1
 8001996:	6831      	ldr	r1, [r6, #0]
 8001998:	4605      	mov	r5, r0
 800199a:	b911      	cbnz	r1, 80019a2 <sbrk_aligned+0x12>
 800199c:	f000 fbaa 	bl	80020f4 <_sbrk_r>
 80019a0:	6030      	str	r0, [r6, #0]
 80019a2:	4621      	mov	r1, r4
 80019a4:	4628      	mov	r0, r5
 80019a6:	f000 fba5 	bl	80020f4 <_sbrk_r>
 80019aa:	1c43      	adds	r3, r0, #1
 80019ac:	d00a      	beq.n	80019c4 <sbrk_aligned+0x34>
 80019ae:	1cc4      	adds	r4, r0, #3
 80019b0:	f024 0403 	bic.w	r4, r4, #3
 80019b4:	42a0      	cmp	r0, r4
 80019b6:	d007      	beq.n	80019c8 <sbrk_aligned+0x38>
 80019b8:	1a21      	subs	r1, r4, r0
 80019ba:	4628      	mov	r0, r5
 80019bc:	f000 fb9a 	bl	80020f4 <_sbrk_r>
 80019c0:	3001      	adds	r0, #1
 80019c2:	d101      	bne.n	80019c8 <sbrk_aligned+0x38>
 80019c4:	f04f 34ff 	mov.w	r4, #4294967295
 80019c8:	4620      	mov	r0, r4
 80019ca:	bd70      	pop	{r4, r5, r6, pc}
 80019cc:	2000020c 	.word	0x2000020c

080019d0 <_malloc_r>:
 80019d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019d4:	1ccd      	adds	r5, r1, #3
 80019d6:	f025 0503 	bic.w	r5, r5, #3
 80019da:	3508      	adds	r5, #8
 80019dc:	2d0c      	cmp	r5, #12
 80019de:	bf38      	it	cc
 80019e0:	250c      	movcc	r5, #12
 80019e2:	2d00      	cmp	r5, #0
 80019e4:	4607      	mov	r7, r0
 80019e6:	db01      	blt.n	80019ec <_malloc_r+0x1c>
 80019e8:	42a9      	cmp	r1, r5
 80019ea:	d905      	bls.n	80019f8 <_malloc_r+0x28>
 80019ec:	230c      	movs	r3, #12
 80019ee:	2600      	movs	r6, #0
 80019f0:	603b      	str	r3, [r7, #0]
 80019f2:	4630      	mov	r0, r6
 80019f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001acc <_malloc_r+0xfc>
 80019fc:	f000 f868 	bl	8001ad0 <__malloc_lock>
 8001a00:	f8d8 3000 	ldr.w	r3, [r8]
 8001a04:	461c      	mov	r4, r3
 8001a06:	bb5c      	cbnz	r4, 8001a60 <_malloc_r+0x90>
 8001a08:	4629      	mov	r1, r5
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	f7ff ffc0 	bl	8001990 <sbrk_aligned>
 8001a10:	1c43      	adds	r3, r0, #1
 8001a12:	4604      	mov	r4, r0
 8001a14:	d155      	bne.n	8001ac2 <_malloc_r+0xf2>
 8001a16:	f8d8 4000 	ldr.w	r4, [r8]
 8001a1a:	4626      	mov	r6, r4
 8001a1c:	2e00      	cmp	r6, #0
 8001a1e:	d145      	bne.n	8001aac <_malloc_r+0xdc>
 8001a20:	2c00      	cmp	r4, #0
 8001a22:	d048      	beq.n	8001ab6 <_malloc_r+0xe6>
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	4631      	mov	r1, r6
 8001a28:	4638      	mov	r0, r7
 8001a2a:	eb04 0903 	add.w	r9, r4, r3
 8001a2e:	f000 fb61 	bl	80020f4 <_sbrk_r>
 8001a32:	4581      	cmp	r9, r0
 8001a34:	d13f      	bne.n	8001ab6 <_malloc_r+0xe6>
 8001a36:	6821      	ldr	r1, [r4, #0]
 8001a38:	4638      	mov	r0, r7
 8001a3a:	1a6d      	subs	r5, r5, r1
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	f7ff ffa7 	bl	8001990 <sbrk_aligned>
 8001a42:	3001      	adds	r0, #1
 8001a44:	d037      	beq.n	8001ab6 <_malloc_r+0xe6>
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	442b      	add	r3, r5
 8001a4a:	6023      	str	r3, [r4, #0]
 8001a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d038      	beq.n	8001ac6 <_malloc_r+0xf6>
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	42a2      	cmp	r2, r4
 8001a58:	d12b      	bne.n	8001ab2 <_malloc_r+0xe2>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	e00f      	b.n	8001a80 <_malloc_r+0xb0>
 8001a60:	6822      	ldr	r2, [r4, #0]
 8001a62:	1b52      	subs	r2, r2, r5
 8001a64:	d41f      	bmi.n	8001aa6 <_malloc_r+0xd6>
 8001a66:	2a0b      	cmp	r2, #11
 8001a68:	d917      	bls.n	8001a9a <_malloc_r+0xca>
 8001a6a:	1961      	adds	r1, r4, r5
 8001a6c:	42a3      	cmp	r3, r4
 8001a6e:	6025      	str	r5, [r4, #0]
 8001a70:	bf18      	it	ne
 8001a72:	6059      	strne	r1, [r3, #4]
 8001a74:	6863      	ldr	r3, [r4, #4]
 8001a76:	bf08      	it	eq
 8001a78:	f8c8 1000 	streq.w	r1, [r8]
 8001a7c:	5162      	str	r2, [r4, r5]
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	4638      	mov	r0, r7
 8001a82:	f104 060b 	add.w	r6, r4, #11
 8001a86:	f000 f829 	bl	8001adc <__malloc_unlock>
 8001a8a:	f026 0607 	bic.w	r6, r6, #7
 8001a8e:	1d23      	adds	r3, r4, #4
 8001a90:	1af2      	subs	r2, r6, r3
 8001a92:	d0ae      	beq.n	80019f2 <_malloc_r+0x22>
 8001a94:	1b9b      	subs	r3, r3, r6
 8001a96:	50a3      	str	r3, [r4, r2]
 8001a98:	e7ab      	b.n	80019f2 <_malloc_r+0x22>
 8001a9a:	42a3      	cmp	r3, r4
 8001a9c:	6862      	ldr	r2, [r4, #4]
 8001a9e:	d1dd      	bne.n	8001a5c <_malloc_r+0x8c>
 8001aa0:	f8c8 2000 	str.w	r2, [r8]
 8001aa4:	e7ec      	b.n	8001a80 <_malloc_r+0xb0>
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	6864      	ldr	r4, [r4, #4]
 8001aaa:	e7ac      	b.n	8001a06 <_malloc_r+0x36>
 8001aac:	4634      	mov	r4, r6
 8001aae:	6876      	ldr	r6, [r6, #4]
 8001ab0:	e7b4      	b.n	8001a1c <_malloc_r+0x4c>
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	e7cc      	b.n	8001a50 <_malloc_r+0x80>
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	4638      	mov	r0, r7
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	f000 f80e 	bl	8001adc <__malloc_unlock>
 8001ac0:	e797      	b.n	80019f2 <_malloc_r+0x22>
 8001ac2:	6025      	str	r5, [r4, #0]
 8001ac4:	e7dc      	b.n	8001a80 <_malloc_r+0xb0>
 8001ac6:	605b      	str	r3, [r3, #4]
 8001ac8:	deff      	udf	#255	; 0xff
 8001aca:	bf00      	nop
 8001acc:	20000208 	.word	0x20000208

08001ad0 <__malloc_lock>:
 8001ad0:	4801      	ldr	r0, [pc, #4]	; (8001ad8 <__malloc_lock+0x8>)
 8001ad2:	f7ff bf13 	b.w	80018fc <__retarget_lock_acquire_recursive>
 8001ad6:	bf00      	nop
 8001ad8:	20000204 	.word	0x20000204

08001adc <__malloc_unlock>:
 8001adc:	4801      	ldr	r0, [pc, #4]	; (8001ae4 <__malloc_unlock+0x8>)
 8001ade:	f7ff bf0e 	b.w	80018fe <__retarget_lock_release_recursive>
 8001ae2:	bf00      	nop
 8001ae4:	20000204 	.word	0x20000204

08001ae8 <__ssputs_r>:
 8001ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aec:	461f      	mov	r7, r3
 8001aee:	688e      	ldr	r6, [r1, #8]
 8001af0:	4682      	mov	sl, r0
 8001af2:	42be      	cmp	r6, r7
 8001af4:	460c      	mov	r4, r1
 8001af6:	4690      	mov	r8, r2
 8001af8:	680b      	ldr	r3, [r1, #0]
 8001afa:	d82c      	bhi.n	8001b56 <__ssputs_r+0x6e>
 8001afc:	898a      	ldrh	r2, [r1, #12]
 8001afe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b02:	d026      	beq.n	8001b52 <__ssputs_r+0x6a>
 8001b04:	6965      	ldr	r5, [r4, #20]
 8001b06:	6909      	ldr	r1, [r1, #16]
 8001b08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b0c:	eba3 0901 	sub.w	r9, r3, r1
 8001b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b14:	1c7b      	adds	r3, r7, #1
 8001b16:	444b      	add	r3, r9
 8001b18:	106d      	asrs	r5, r5, #1
 8001b1a:	429d      	cmp	r5, r3
 8001b1c:	bf38      	it	cc
 8001b1e:	461d      	movcc	r5, r3
 8001b20:	0553      	lsls	r3, r2, #21
 8001b22:	d527      	bpl.n	8001b74 <__ssputs_r+0x8c>
 8001b24:	4629      	mov	r1, r5
 8001b26:	f7ff ff53 	bl	80019d0 <_malloc_r>
 8001b2a:	4606      	mov	r6, r0
 8001b2c:	b360      	cbz	r0, 8001b88 <__ssputs_r+0xa0>
 8001b2e:	464a      	mov	r2, r9
 8001b30:	6921      	ldr	r1, [r4, #16]
 8001b32:	f000 fafd 	bl	8002130 <memcpy>
 8001b36:	89a3      	ldrh	r3, [r4, #12]
 8001b38:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b40:	81a3      	strh	r3, [r4, #12]
 8001b42:	6126      	str	r6, [r4, #16]
 8001b44:	444e      	add	r6, r9
 8001b46:	6026      	str	r6, [r4, #0]
 8001b48:	463e      	mov	r6, r7
 8001b4a:	6165      	str	r5, [r4, #20]
 8001b4c:	eba5 0509 	sub.w	r5, r5, r9
 8001b50:	60a5      	str	r5, [r4, #8]
 8001b52:	42be      	cmp	r6, r7
 8001b54:	d900      	bls.n	8001b58 <__ssputs_r+0x70>
 8001b56:	463e      	mov	r6, r7
 8001b58:	4632      	mov	r2, r6
 8001b5a:	4641      	mov	r1, r8
 8001b5c:	6820      	ldr	r0, [r4, #0]
 8001b5e:	f000 faaf 	bl	80020c0 <memmove>
 8001b62:	2000      	movs	r0, #0
 8001b64:	68a3      	ldr	r3, [r4, #8]
 8001b66:	1b9b      	subs	r3, r3, r6
 8001b68:	60a3      	str	r3, [r4, #8]
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	4433      	add	r3, r6
 8001b6e:	6023      	str	r3, [r4, #0]
 8001b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b74:	462a      	mov	r2, r5
 8001b76:	f000 fae9 	bl	800214c <_realloc_r>
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	2800      	cmp	r0, #0
 8001b7e:	d1e0      	bne.n	8001b42 <__ssputs_r+0x5a>
 8001b80:	4650      	mov	r0, sl
 8001b82:	6921      	ldr	r1, [r4, #16]
 8001b84:	f7ff febc 	bl	8001900 <_free_r>
 8001b88:	230c      	movs	r3, #12
 8001b8a:	f8ca 3000 	str.w	r3, [sl]
 8001b8e:	89a3      	ldrh	r3, [r4, #12]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b98:	81a3      	strh	r3, [r4, #12]
 8001b9a:	e7e9      	b.n	8001b70 <__ssputs_r+0x88>

08001b9c <_svfiprintf_r>:
 8001b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba0:	4698      	mov	r8, r3
 8001ba2:	898b      	ldrh	r3, [r1, #12]
 8001ba4:	4607      	mov	r7, r0
 8001ba6:	061b      	lsls	r3, r3, #24
 8001ba8:	460d      	mov	r5, r1
 8001baa:	4614      	mov	r4, r2
 8001bac:	b09d      	sub	sp, #116	; 0x74
 8001bae:	d50e      	bpl.n	8001bce <_svfiprintf_r+0x32>
 8001bb0:	690b      	ldr	r3, [r1, #16]
 8001bb2:	b963      	cbnz	r3, 8001bce <_svfiprintf_r+0x32>
 8001bb4:	2140      	movs	r1, #64	; 0x40
 8001bb6:	f7ff ff0b 	bl	80019d0 <_malloc_r>
 8001bba:	6028      	str	r0, [r5, #0]
 8001bbc:	6128      	str	r0, [r5, #16]
 8001bbe:	b920      	cbnz	r0, 8001bca <_svfiprintf_r+0x2e>
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	e0d0      	b.n	8001d6c <_svfiprintf_r+0x1d0>
 8001bca:	2340      	movs	r3, #64	; 0x40
 8001bcc:	616b      	str	r3, [r5, #20]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	9309      	str	r3, [sp, #36]	; 0x24
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001bd8:	2330      	movs	r3, #48	; 0x30
 8001bda:	f04f 0901 	mov.w	r9, #1
 8001bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8001be2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001d84 <_svfiprintf_r+0x1e8>
 8001be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bea:	4623      	mov	r3, r4
 8001bec:	469a      	mov	sl, r3
 8001bee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bf2:	b10a      	cbz	r2, 8001bf8 <_svfiprintf_r+0x5c>
 8001bf4:	2a25      	cmp	r2, #37	; 0x25
 8001bf6:	d1f9      	bne.n	8001bec <_svfiprintf_r+0x50>
 8001bf8:	ebba 0b04 	subs.w	fp, sl, r4
 8001bfc:	d00b      	beq.n	8001c16 <_svfiprintf_r+0x7a>
 8001bfe:	465b      	mov	r3, fp
 8001c00:	4622      	mov	r2, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	4638      	mov	r0, r7
 8001c06:	f7ff ff6f 	bl	8001ae8 <__ssputs_r>
 8001c0a:	3001      	adds	r0, #1
 8001c0c:	f000 80a9 	beq.w	8001d62 <_svfiprintf_r+0x1c6>
 8001c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c12:	445a      	add	r2, fp
 8001c14:	9209      	str	r2, [sp, #36]	; 0x24
 8001c16:	f89a 3000 	ldrb.w	r3, [sl]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80a1 	beq.w	8001d62 <_svfiprintf_r+0x1c6>
 8001c20:	2300      	movs	r3, #0
 8001c22:	f04f 32ff 	mov.w	r2, #4294967295
 8001c26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c2a:	f10a 0a01 	add.w	sl, sl, #1
 8001c2e:	9304      	str	r3, [sp, #16]
 8001c30:	9307      	str	r3, [sp, #28]
 8001c32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c36:	931a      	str	r3, [sp, #104]	; 0x68
 8001c38:	4654      	mov	r4, sl
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c40:	4850      	ldr	r0, [pc, #320]	; (8001d84 <_svfiprintf_r+0x1e8>)
 8001c42:	f000 fa67 	bl	8002114 <memchr>
 8001c46:	9a04      	ldr	r2, [sp, #16]
 8001c48:	b9d8      	cbnz	r0, 8001c82 <_svfiprintf_r+0xe6>
 8001c4a:	06d0      	lsls	r0, r2, #27
 8001c4c:	bf44      	itt	mi
 8001c4e:	2320      	movmi	r3, #32
 8001c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c54:	0711      	lsls	r1, r2, #28
 8001c56:	bf44      	itt	mi
 8001c58:	232b      	movmi	r3, #43	; 0x2b
 8001c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c5e:	f89a 3000 	ldrb.w	r3, [sl]
 8001c62:	2b2a      	cmp	r3, #42	; 0x2a
 8001c64:	d015      	beq.n	8001c92 <_svfiprintf_r+0xf6>
 8001c66:	4654      	mov	r4, sl
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f04f 0c0a 	mov.w	ip, #10
 8001c6e:	9a07      	ldr	r2, [sp, #28]
 8001c70:	4621      	mov	r1, r4
 8001c72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c76:	3b30      	subs	r3, #48	; 0x30
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	d94d      	bls.n	8001d18 <_svfiprintf_r+0x17c>
 8001c7c:	b1b0      	cbz	r0, 8001cac <_svfiprintf_r+0x110>
 8001c7e:	9207      	str	r2, [sp, #28]
 8001c80:	e014      	b.n	8001cac <_svfiprintf_r+0x110>
 8001c82:	eba0 0308 	sub.w	r3, r0, r8
 8001c86:	fa09 f303 	lsl.w	r3, r9, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	46a2      	mov	sl, r4
 8001c8e:	9304      	str	r3, [sp, #16]
 8001c90:	e7d2      	b.n	8001c38 <_svfiprintf_r+0x9c>
 8001c92:	9b03      	ldr	r3, [sp, #12]
 8001c94:	1d19      	adds	r1, r3, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	9103      	str	r1, [sp, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bfbb      	ittet	lt
 8001c9e:	425b      	neglt	r3, r3
 8001ca0:	f042 0202 	orrlt.w	r2, r2, #2
 8001ca4:	9307      	strge	r3, [sp, #28]
 8001ca6:	9307      	strlt	r3, [sp, #28]
 8001ca8:	bfb8      	it	lt
 8001caa:	9204      	strlt	r2, [sp, #16]
 8001cac:	7823      	ldrb	r3, [r4, #0]
 8001cae:	2b2e      	cmp	r3, #46	; 0x2e
 8001cb0:	d10c      	bne.n	8001ccc <_svfiprintf_r+0x130>
 8001cb2:	7863      	ldrb	r3, [r4, #1]
 8001cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8001cb6:	d134      	bne.n	8001d22 <_svfiprintf_r+0x186>
 8001cb8:	9b03      	ldr	r3, [sp, #12]
 8001cba:	3402      	adds	r4, #2
 8001cbc:	1d1a      	adds	r2, r3, #4
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	9203      	str	r2, [sp, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bfb8      	it	lt
 8001cc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8001cca:	9305      	str	r3, [sp, #20]
 8001ccc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001d88 <_svfiprintf_r+0x1ec>
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	4650      	mov	r0, sl
 8001cd4:	7821      	ldrb	r1, [r4, #0]
 8001cd6:	f000 fa1d 	bl	8002114 <memchr>
 8001cda:	b138      	cbz	r0, 8001cec <_svfiprintf_r+0x150>
 8001cdc:	2240      	movs	r2, #64	; 0x40
 8001cde:	9b04      	ldr	r3, [sp, #16]
 8001ce0:	eba0 000a 	sub.w	r0, r0, sl
 8001ce4:	4082      	lsls	r2, r0
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	3401      	adds	r4, #1
 8001cea:	9304      	str	r3, [sp, #16]
 8001cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cf0:	2206      	movs	r2, #6
 8001cf2:	4826      	ldr	r0, [pc, #152]	; (8001d8c <_svfiprintf_r+0x1f0>)
 8001cf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cf8:	f000 fa0c 	bl	8002114 <memchr>
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	d038      	beq.n	8001d72 <_svfiprintf_r+0x1d6>
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <_svfiprintf_r+0x1f4>)
 8001d02:	bb1b      	cbnz	r3, 8001d4c <_svfiprintf_r+0x1b0>
 8001d04:	9b03      	ldr	r3, [sp, #12]
 8001d06:	3307      	adds	r3, #7
 8001d08:	f023 0307 	bic.w	r3, r3, #7
 8001d0c:	3308      	adds	r3, #8
 8001d0e:	9303      	str	r3, [sp, #12]
 8001d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d12:	4433      	add	r3, r6
 8001d14:	9309      	str	r3, [sp, #36]	; 0x24
 8001d16:	e768      	b.n	8001bea <_svfiprintf_r+0x4e>
 8001d18:	460c      	mov	r4, r1
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d20:	e7a6      	b.n	8001c70 <_svfiprintf_r+0xd4>
 8001d22:	2300      	movs	r3, #0
 8001d24:	f04f 0c0a 	mov.w	ip, #10
 8001d28:	4619      	mov	r1, r3
 8001d2a:	3401      	adds	r4, #1
 8001d2c:	9305      	str	r3, [sp, #20]
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d34:	3a30      	subs	r2, #48	; 0x30
 8001d36:	2a09      	cmp	r2, #9
 8001d38:	d903      	bls.n	8001d42 <_svfiprintf_r+0x1a6>
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0c6      	beq.n	8001ccc <_svfiprintf_r+0x130>
 8001d3e:	9105      	str	r1, [sp, #20]
 8001d40:	e7c4      	b.n	8001ccc <_svfiprintf_r+0x130>
 8001d42:	4604      	mov	r4, r0
 8001d44:	2301      	movs	r3, #1
 8001d46:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d4a:	e7f0      	b.n	8001d2e <_svfiprintf_r+0x192>
 8001d4c:	ab03      	add	r3, sp, #12
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	462a      	mov	r2, r5
 8001d52:	4638      	mov	r0, r7
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <_svfiprintf_r+0x1f8>)
 8001d56:	a904      	add	r1, sp, #16
 8001d58:	f3af 8000 	nop.w
 8001d5c:	1c42      	adds	r2, r0, #1
 8001d5e:	4606      	mov	r6, r0
 8001d60:	d1d6      	bne.n	8001d10 <_svfiprintf_r+0x174>
 8001d62:	89ab      	ldrh	r3, [r5, #12]
 8001d64:	065b      	lsls	r3, r3, #25
 8001d66:	f53f af2d 	bmi.w	8001bc4 <_svfiprintf_r+0x28>
 8001d6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d6c:	b01d      	add	sp, #116	; 0x74
 8001d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d72:	ab03      	add	r3, sp, #12
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	462a      	mov	r2, r5
 8001d78:	4638      	mov	r0, r7
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <_svfiprintf_r+0x1f8>)
 8001d7c:	a904      	add	r1, sp, #16
 8001d7e:	f000 f87d 	bl	8001e7c <_printf_i>
 8001d82:	e7eb      	b.n	8001d5c <_svfiprintf_r+0x1c0>
 8001d84:	08002216 	.word	0x08002216
 8001d88:	0800221c 	.word	0x0800221c
 8001d8c:	08002220 	.word	0x08002220
 8001d90:	00000000 	.word	0x00000000
 8001d94:	08001ae9 	.word	0x08001ae9

08001d98 <_printf_common>:
 8001d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d9c:	4616      	mov	r6, r2
 8001d9e:	4699      	mov	r9, r3
 8001da0:	688a      	ldr	r2, [r1, #8]
 8001da2:	690b      	ldr	r3, [r1, #16]
 8001da4:	4607      	mov	r7, r0
 8001da6:	4293      	cmp	r3, r2
 8001da8:	bfb8      	it	lt
 8001daa:	4613      	movlt	r3, r2
 8001dac:	6033      	str	r3, [r6, #0]
 8001dae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001db2:	460c      	mov	r4, r1
 8001db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001db8:	b10a      	cbz	r2, 8001dbe <_printf_common+0x26>
 8001dba:	3301      	adds	r3, #1
 8001dbc:	6033      	str	r3, [r6, #0]
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	0699      	lsls	r1, r3, #26
 8001dc2:	bf42      	ittt	mi
 8001dc4:	6833      	ldrmi	r3, [r6, #0]
 8001dc6:	3302      	addmi	r3, #2
 8001dc8:	6033      	strmi	r3, [r6, #0]
 8001dca:	6825      	ldr	r5, [r4, #0]
 8001dcc:	f015 0506 	ands.w	r5, r5, #6
 8001dd0:	d106      	bne.n	8001de0 <_printf_common+0x48>
 8001dd2:	f104 0a19 	add.w	sl, r4, #25
 8001dd6:	68e3      	ldr	r3, [r4, #12]
 8001dd8:	6832      	ldr	r2, [r6, #0]
 8001dda:	1a9b      	subs	r3, r3, r2
 8001ddc:	42ab      	cmp	r3, r5
 8001dde:	dc2b      	bgt.n	8001e38 <_printf_common+0xa0>
 8001de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001de4:	1e13      	subs	r3, r2, #0
 8001de6:	6822      	ldr	r2, [r4, #0]
 8001de8:	bf18      	it	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	0692      	lsls	r2, r2, #26
 8001dee:	d430      	bmi.n	8001e52 <_printf_common+0xba>
 8001df0:	4649      	mov	r1, r9
 8001df2:	4638      	mov	r0, r7
 8001df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001df8:	47c0      	blx	r8
 8001dfa:	3001      	adds	r0, #1
 8001dfc:	d023      	beq.n	8001e46 <_printf_common+0xae>
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	6922      	ldr	r2, [r4, #16]
 8001e02:	f003 0306 	and.w	r3, r3, #6
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf14      	ite	ne
 8001e0a:	2500      	movne	r5, #0
 8001e0c:	6833      	ldreq	r3, [r6, #0]
 8001e0e:	f04f 0600 	mov.w	r6, #0
 8001e12:	bf08      	it	eq
 8001e14:	68e5      	ldreq	r5, [r4, #12]
 8001e16:	f104 041a 	add.w	r4, r4, #26
 8001e1a:	bf08      	it	eq
 8001e1c:	1aed      	subeq	r5, r5, r3
 8001e1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001e22:	bf08      	it	eq
 8001e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	bfc4      	itt	gt
 8001e2c:	1a9b      	subgt	r3, r3, r2
 8001e2e:	18ed      	addgt	r5, r5, r3
 8001e30:	42b5      	cmp	r5, r6
 8001e32:	d11a      	bne.n	8001e6a <_printf_common+0xd2>
 8001e34:	2000      	movs	r0, #0
 8001e36:	e008      	b.n	8001e4a <_printf_common+0xb2>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	4652      	mov	r2, sl
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	4638      	mov	r0, r7
 8001e40:	47c0      	blx	r8
 8001e42:	3001      	adds	r0, #1
 8001e44:	d103      	bne.n	8001e4e <_printf_common+0xb6>
 8001e46:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e4e:	3501      	adds	r5, #1
 8001e50:	e7c1      	b.n	8001dd6 <_printf_common+0x3e>
 8001e52:	2030      	movs	r0, #48	; 0x30
 8001e54:	18e1      	adds	r1, r4, r3
 8001e56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e60:	4422      	add	r2, r4
 8001e62:	3302      	adds	r3, #2
 8001e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e68:	e7c2      	b.n	8001df0 <_printf_common+0x58>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	4649      	mov	r1, r9
 8001e70:	4638      	mov	r0, r7
 8001e72:	47c0      	blx	r8
 8001e74:	3001      	adds	r0, #1
 8001e76:	d0e6      	beq.n	8001e46 <_printf_common+0xae>
 8001e78:	3601      	adds	r6, #1
 8001e7a:	e7d9      	b.n	8001e30 <_printf_common+0x98>

08001e7c <_printf_i>:
 8001e7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e80:	7e0f      	ldrb	r7, [r1, #24]
 8001e82:	4691      	mov	r9, r2
 8001e84:	2f78      	cmp	r7, #120	; 0x78
 8001e86:	4680      	mov	r8, r0
 8001e88:	460c      	mov	r4, r1
 8001e8a:	469a      	mov	sl, r3
 8001e8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e92:	d807      	bhi.n	8001ea4 <_printf_i+0x28>
 8001e94:	2f62      	cmp	r7, #98	; 0x62
 8001e96:	d80a      	bhi.n	8001eae <_printf_i+0x32>
 8001e98:	2f00      	cmp	r7, #0
 8001e9a:	f000 80d5 	beq.w	8002048 <_printf_i+0x1cc>
 8001e9e:	2f58      	cmp	r7, #88	; 0x58
 8001ea0:	f000 80c1 	beq.w	8002026 <_printf_i+0x1aa>
 8001ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ea8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001eac:	e03a      	b.n	8001f24 <_printf_i+0xa8>
 8001eae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001eb2:	2b15      	cmp	r3, #21
 8001eb4:	d8f6      	bhi.n	8001ea4 <_printf_i+0x28>
 8001eb6:	a101      	add	r1, pc, #4	; (adr r1, 8001ebc <_printf_i+0x40>)
 8001eb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ebc:	08001f15 	.word	0x08001f15
 8001ec0:	08001f29 	.word	0x08001f29
 8001ec4:	08001ea5 	.word	0x08001ea5
 8001ec8:	08001ea5 	.word	0x08001ea5
 8001ecc:	08001ea5 	.word	0x08001ea5
 8001ed0:	08001ea5 	.word	0x08001ea5
 8001ed4:	08001f29 	.word	0x08001f29
 8001ed8:	08001ea5 	.word	0x08001ea5
 8001edc:	08001ea5 	.word	0x08001ea5
 8001ee0:	08001ea5 	.word	0x08001ea5
 8001ee4:	08001ea5 	.word	0x08001ea5
 8001ee8:	0800202f 	.word	0x0800202f
 8001eec:	08001f55 	.word	0x08001f55
 8001ef0:	08001fe9 	.word	0x08001fe9
 8001ef4:	08001ea5 	.word	0x08001ea5
 8001ef8:	08001ea5 	.word	0x08001ea5
 8001efc:	08002051 	.word	0x08002051
 8001f00:	08001ea5 	.word	0x08001ea5
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08001ea5 	.word	0x08001ea5
 8001f0c:	08001ea5 	.word	0x08001ea5
 8001f10:	08001ff1 	.word	0x08001ff1
 8001f14:	682b      	ldr	r3, [r5, #0]
 8001f16:	1d1a      	adds	r2, r3, #4
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	602a      	str	r2, [r5, #0]
 8001f1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0a0      	b.n	800206a <_printf_i+0x1ee>
 8001f28:	6820      	ldr	r0, [r4, #0]
 8001f2a:	682b      	ldr	r3, [r5, #0]
 8001f2c:	0607      	lsls	r7, r0, #24
 8001f2e:	f103 0104 	add.w	r1, r3, #4
 8001f32:	6029      	str	r1, [r5, #0]
 8001f34:	d501      	bpl.n	8001f3a <_printf_i+0xbe>
 8001f36:	681e      	ldr	r6, [r3, #0]
 8001f38:	e003      	b.n	8001f42 <_printf_i+0xc6>
 8001f3a:	0646      	lsls	r6, r0, #25
 8001f3c:	d5fb      	bpl.n	8001f36 <_printf_i+0xba>
 8001f3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001f42:	2e00      	cmp	r6, #0
 8001f44:	da03      	bge.n	8001f4e <_printf_i+0xd2>
 8001f46:	232d      	movs	r3, #45	; 0x2d
 8001f48:	4276      	negs	r6, r6
 8001f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f4e:	230a      	movs	r3, #10
 8001f50:	4859      	ldr	r0, [pc, #356]	; (80020b8 <_printf_i+0x23c>)
 8001f52:	e012      	b.n	8001f7a <_printf_i+0xfe>
 8001f54:	682b      	ldr	r3, [r5, #0]
 8001f56:	6820      	ldr	r0, [r4, #0]
 8001f58:	1d19      	adds	r1, r3, #4
 8001f5a:	6029      	str	r1, [r5, #0]
 8001f5c:	0605      	lsls	r5, r0, #24
 8001f5e:	d501      	bpl.n	8001f64 <_printf_i+0xe8>
 8001f60:	681e      	ldr	r6, [r3, #0]
 8001f62:	e002      	b.n	8001f6a <_printf_i+0xee>
 8001f64:	0641      	lsls	r1, r0, #25
 8001f66:	d5fb      	bpl.n	8001f60 <_printf_i+0xe4>
 8001f68:	881e      	ldrh	r6, [r3, #0]
 8001f6a:	2f6f      	cmp	r7, #111	; 0x6f
 8001f6c:	bf0c      	ite	eq
 8001f6e:	2308      	moveq	r3, #8
 8001f70:	230a      	movne	r3, #10
 8001f72:	4851      	ldr	r0, [pc, #324]	; (80020b8 <_printf_i+0x23c>)
 8001f74:	2100      	movs	r1, #0
 8001f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f7a:	6865      	ldr	r5, [r4, #4]
 8001f7c:	2d00      	cmp	r5, #0
 8001f7e:	bfa8      	it	ge
 8001f80:	6821      	ldrge	r1, [r4, #0]
 8001f82:	60a5      	str	r5, [r4, #8]
 8001f84:	bfa4      	itt	ge
 8001f86:	f021 0104 	bicge.w	r1, r1, #4
 8001f8a:	6021      	strge	r1, [r4, #0]
 8001f8c:	b90e      	cbnz	r6, 8001f92 <_printf_i+0x116>
 8001f8e:	2d00      	cmp	r5, #0
 8001f90:	d04b      	beq.n	800202a <_printf_i+0x1ae>
 8001f92:	4615      	mov	r5, r2
 8001f94:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f98:	fb03 6711 	mls	r7, r3, r1, r6
 8001f9c:	5dc7      	ldrb	r7, [r0, r7]
 8001f9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001fa2:	4637      	mov	r7, r6
 8001fa4:	42bb      	cmp	r3, r7
 8001fa6:	460e      	mov	r6, r1
 8001fa8:	d9f4      	bls.n	8001f94 <_printf_i+0x118>
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d10b      	bne.n	8001fc6 <_printf_i+0x14a>
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	07de      	lsls	r6, r3, #31
 8001fb2:	d508      	bpl.n	8001fc6 <_printf_i+0x14a>
 8001fb4:	6923      	ldr	r3, [r4, #16]
 8001fb6:	6861      	ldr	r1, [r4, #4]
 8001fb8:	4299      	cmp	r1, r3
 8001fba:	bfde      	ittt	le
 8001fbc:	2330      	movle	r3, #48	; 0x30
 8001fbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001fc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001fc6:	1b52      	subs	r2, r2, r5
 8001fc8:	6122      	str	r2, [r4, #16]
 8001fca:	464b      	mov	r3, r9
 8001fcc:	4621      	mov	r1, r4
 8001fce:	4640      	mov	r0, r8
 8001fd0:	f8cd a000 	str.w	sl, [sp]
 8001fd4:	aa03      	add	r2, sp, #12
 8001fd6:	f7ff fedf 	bl	8001d98 <_printf_common>
 8001fda:	3001      	adds	r0, #1
 8001fdc:	d14a      	bne.n	8002074 <_printf_i+0x1f8>
 8001fde:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe2:	b004      	add	sp, #16
 8001fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fe8:	6823      	ldr	r3, [r4, #0]
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	6023      	str	r3, [r4, #0]
 8001ff0:	2778      	movs	r7, #120	; 0x78
 8001ff2:	4832      	ldr	r0, [pc, #200]	; (80020bc <_printf_i+0x240>)
 8001ff4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	6829      	ldr	r1, [r5, #0]
 8001ffc:	061f      	lsls	r7, r3, #24
 8001ffe:	f851 6b04 	ldr.w	r6, [r1], #4
 8002002:	d402      	bmi.n	800200a <_printf_i+0x18e>
 8002004:	065f      	lsls	r7, r3, #25
 8002006:	bf48      	it	mi
 8002008:	b2b6      	uxthmi	r6, r6
 800200a:	07df      	lsls	r7, r3, #31
 800200c:	bf48      	it	mi
 800200e:	f043 0320 	orrmi.w	r3, r3, #32
 8002012:	6029      	str	r1, [r5, #0]
 8002014:	bf48      	it	mi
 8002016:	6023      	strmi	r3, [r4, #0]
 8002018:	b91e      	cbnz	r6, 8002022 <_printf_i+0x1a6>
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	f023 0320 	bic.w	r3, r3, #32
 8002020:	6023      	str	r3, [r4, #0]
 8002022:	2310      	movs	r3, #16
 8002024:	e7a6      	b.n	8001f74 <_printf_i+0xf8>
 8002026:	4824      	ldr	r0, [pc, #144]	; (80020b8 <_printf_i+0x23c>)
 8002028:	e7e4      	b.n	8001ff4 <_printf_i+0x178>
 800202a:	4615      	mov	r5, r2
 800202c:	e7bd      	b.n	8001faa <_printf_i+0x12e>
 800202e:	682b      	ldr	r3, [r5, #0]
 8002030:	6826      	ldr	r6, [r4, #0]
 8002032:	1d18      	adds	r0, r3, #4
 8002034:	6961      	ldr	r1, [r4, #20]
 8002036:	6028      	str	r0, [r5, #0]
 8002038:	0635      	lsls	r5, r6, #24
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	d501      	bpl.n	8002042 <_printf_i+0x1c6>
 800203e:	6019      	str	r1, [r3, #0]
 8002040:	e002      	b.n	8002048 <_printf_i+0x1cc>
 8002042:	0670      	lsls	r0, r6, #25
 8002044:	d5fb      	bpl.n	800203e <_printf_i+0x1c2>
 8002046:	8019      	strh	r1, [r3, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	4615      	mov	r5, r2
 800204c:	6123      	str	r3, [r4, #16]
 800204e:	e7bc      	b.n	8001fca <_printf_i+0x14e>
 8002050:	682b      	ldr	r3, [r5, #0]
 8002052:	2100      	movs	r1, #0
 8002054:	1d1a      	adds	r2, r3, #4
 8002056:	602a      	str	r2, [r5, #0]
 8002058:	681d      	ldr	r5, [r3, #0]
 800205a:	6862      	ldr	r2, [r4, #4]
 800205c:	4628      	mov	r0, r5
 800205e:	f000 f859 	bl	8002114 <memchr>
 8002062:	b108      	cbz	r0, 8002068 <_printf_i+0x1ec>
 8002064:	1b40      	subs	r0, r0, r5
 8002066:	6060      	str	r0, [r4, #4]
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	6123      	str	r3, [r4, #16]
 800206c:	2300      	movs	r3, #0
 800206e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002072:	e7aa      	b.n	8001fca <_printf_i+0x14e>
 8002074:	462a      	mov	r2, r5
 8002076:	4649      	mov	r1, r9
 8002078:	4640      	mov	r0, r8
 800207a:	6923      	ldr	r3, [r4, #16]
 800207c:	47d0      	blx	sl
 800207e:	3001      	adds	r0, #1
 8002080:	d0ad      	beq.n	8001fde <_printf_i+0x162>
 8002082:	6823      	ldr	r3, [r4, #0]
 8002084:	079b      	lsls	r3, r3, #30
 8002086:	d413      	bmi.n	80020b0 <_printf_i+0x234>
 8002088:	68e0      	ldr	r0, [r4, #12]
 800208a:	9b03      	ldr	r3, [sp, #12]
 800208c:	4298      	cmp	r0, r3
 800208e:	bfb8      	it	lt
 8002090:	4618      	movlt	r0, r3
 8002092:	e7a6      	b.n	8001fe2 <_printf_i+0x166>
 8002094:	2301      	movs	r3, #1
 8002096:	4632      	mov	r2, r6
 8002098:	4649      	mov	r1, r9
 800209a:	4640      	mov	r0, r8
 800209c:	47d0      	blx	sl
 800209e:	3001      	adds	r0, #1
 80020a0:	d09d      	beq.n	8001fde <_printf_i+0x162>
 80020a2:	3501      	adds	r5, #1
 80020a4:	68e3      	ldr	r3, [r4, #12]
 80020a6:	9903      	ldr	r1, [sp, #12]
 80020a8:	1a5b      	subs	r3, r3, r1
 80020aa:	42ab      	cmp	r3, r5
 80020ac:	dcf2      	bgt.n	8002094 <_printf_i+0x218>
 80020ae:	e7eb      	b.n	8002088 <_printf_i+0x20c>
 80020b0:	2500      	movs	r5, #0
 80020b2:	f104 0619 	add.w	r6, r4, #25
 80020b6:	e7f5      	b.n	80020a4 <_printf_i+0x228>
 80020b8:	08002227 	.word	0x08002227
 80020bc:	08002238 	.word	0x08002238

080020c0 <memmove>:
 80020c0:	4288      	cmp	r0, r1
 80020c2:	b510      	push	{r4, lr}
 80020c4:	eb01 0402 	add.w	r4, r1, r2
 80020c8:	d902      	bls.n	80020d0 <memmove+0x10>
 80020ca:	4284      	cmp	r4, r0
 80020cc:	4623      	mov	r3, r4
 80020ce:	d807      	bhi.n	80020e0 <memmove+0x20>
 80020d0:	1e43      	subs	r3, r0, #1
 80020d2:	42a1      	cmp	r1, r4
 80020d4:	d008      	beq.n	80020e8 <memmove+0x28>
 80020d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020de:	e7f8      	b.n	80020d2 <memmove+0x12>
 80020e0:	4601      	mov	r1, r0
 80020e2:	4402      	add	r2, r0
 80020e4:	428a      	cmp	r2, r1
 80020e6:	d100      	bne.n	80020ea <memmove+0x2a>
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80020f2:	e7f7      	b.n	80020e4 <memmove+0x24>

080020f4 <_sbrk_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	2300      	movs	r3, #0
 80020f8:	4d05      	ldr	r5, [pc, #20]	; (8002110 <_sbrk_r+0x1c>)
 80020fa:	4604      	mov	r4, r0
 80020fc:	4608      	mov	r0, r1
 80020fe:	602b      	str	r3, [r5, #0]
 8002100:	f7fe fa48 	bl	8000594 <_sbrk>
 8002104:	1c43      	adds	r3, r0, #1
 8002106:	d102      	bne.n	800210e <_sbrk_r+0x1a>
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	b103      	cbz	r3, 800210e <_sbrk_r+0x1a>
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	bd38      	pop	{r3, r4, r5, pc}
 8002110:	20000200 	.word	0x20000200

08002114 <memchr>:
 8002114:	4603      	mov	r3, r0
 8002116:	b510      	push	{r4, lr}
 8002118:	b2c9      	uxtb	r1, r1
 800211a:	4402      	add	r2, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	4618      	mov	r0, r3
 8002120:	d101      	bne.n	8002126 <memchr+0x12>
 8002122:	2000      	movs	r0, #0
 8002124:	e003      	b.n	800212e <memchr+0x1a>
 8002126:	7804      	ldrb	r4, [r0, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	428c      	cmp	r4, r1
 800212c:	d1f6      	bne.n	800211c <memchr+0x8>
 800212e:	bd10      	pop	{r4, pc}

08002130 <memcpy>:
 8002130:	440a      	add	r2, r1
 8002132:	4291      	cmp	r1, r2
 8002134:	f100 33ff 	add.w	r3, r0, #4294967295
 8002138:	d100      	bne.n	800213c <memcpy+0xc>
 800213a:	4770      	bx	lr
 800213c:	b510      	push	{r4, lr}
 800213e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002142:	4291      	cmp	r1, r2
 8002144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002148:	d1f9      	bne.n	800213e <memcpy+0xe>
 800214a:	bd10      	pop	{r4, pc}

0800214c <_realloc_r>:
 800214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002150:	4680      	mov	r8, r0
 8002152:	4614      	mov	r4, r2
 8002154:	460e      	mov	r6, r1
 8002156:	b921      	cbnz	r1, 8002162 <_realloc_r+0x16>
 8002158:	4611      	mov	r1, r2
 800215a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800215e:	f7ff bc37 	b.w	80019d0 <_malloc_r>
 8002162:	b92a      	cbnz	r2, 8002170 <_realloc_r+0x24>
 8002164:	f7ff fbcc 	bl	8001900 <_free_r>
 8002168:	4625      	mov	r5, r4
 800216a:	4628      	mov	r0, r5
 800216c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002170:	f000 f81b 	bl	80021aa <_malloc_usable_size_r>
 8002174:	4284      	cmp	r4, r0
 8002176:	4607      	mov	r7, r0
 8002178:	d802      	bhi.n	8002180 <_realloc_r+0x34>
 800217a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800217e:	d812      	bhi.n	80021a6 <_realloc_r+0x5a>
 8002180:	4621      	mov	r1, r4
 8002182:	4640      	mov	r0, r8
 8002184:	f7ff fc24 	bl	80019d0 <_malloc_r>
 8002188:	4605      	mov	r5, r0
 800218a:	2800      	cmp	r0, #0
 800218c:	d0ed      	beq.n	800216a <_realloc_r+0x1e>
 800218e:	42bc      	cmp	r4, r7
 8002190:	4622      	mov	r2, r4
 8002192:	4631      	mov	r1, r6
 8002194:	bf28      	it	cs
 8002196:	463a      	movcs	r2, r7
 8002198:	f7ff ffca 	bl	8002130 <memcpy>
 800219c:	4631      	mov	r1, r6
 800219e:	4640      	mov	r0, r8
 80021a0:	f7ff fbae 	bl	8001900 <_free_r>
 80021a4:	e7e1      	b.n	800216a <_realloc_r+0x1e>
 80021a6:	4635      	mov	r5, r6
 80021a8:	e7df      	b.n	800216a <_realloc_r+0x1e>

080021aa <_malloc_usable_size_r>:
 80021aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021ae:	1f18      	subs	r0, r3, #4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bfbc      	itt	lt
 80021b4:	580b      	ldrlt	r3, [r1, r0]
 80021b6:	18c0      	addlt	r0, r0, r3
 80021b8:	4770      	bx	lr
	...

080021bc <_init>:
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021be:	bf00      	nop
 80021c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c2:	bc08      	pop	{r3}
 80021c4:	469e      	mov	lr, r3
 80021c6:	4770      	bx	lr

080021c8 <_fini>:
 80021c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ca:	bf00      	nop
 80021cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ce:	bc08      	pop	{r3}
 80021d0:	469e      	mov	lr, r3
 80021d2:	4770      	bx	lr
