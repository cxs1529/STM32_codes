
autolauncher_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a94  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002ba0  08002ba0  00003ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c18  08002c18  0000405c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c18  08002c18  0000405c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c18  08002c18  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c18  08002c18  00003c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c1c  08002c1c  00003c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002c20  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08002c7c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08002c7c  00004258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abcf  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001893  00000000  00000000  0000ec54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  000104e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f3  00000000  00000000  00011050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017865  00000000  00000000  00011943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca86  00000000  00000000  000291a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a38e  00000000  00000000  00035c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bffbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034f4  00000000  00000000  000c0000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c34f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b88 	.word	0x08002b88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002b88 	.word	0x08002b88

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b089      	sub	sp, #36	@ 0x24
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb4f 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8b3 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f971 	bl	8000440 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800015e:	f000 f945 	bl	80003ec <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000162:	f000 f8e9 	bl	8000338 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* UART MAX232*/
  // Send hello world to terminal
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, SET); // SET = UART-tx / RESET = Din from GPS
 8000166:	2201      	movs	r2, #1
 8000168:	2104      	movs	r1, #4
 800016a:	484e      	ldr	r0, [pc, #312]	@ (80002a4 <main+0x158>)
 800016c:	f000 fe30 	bl	8000dd0 <HAL_GPIO_WritePin>
  char text[] = "Hello World!\r\n";
 8000170:	4b4d      	ldr	r3, [pc, #308]	@ (80002a8 <main+0x15c>)
 8000172:	f107 040c 	add.w	r4, r7, #12
 8000176:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000178:	c407      	stmia	r4!, {r0, r1, r2}
 800017a:	8023      	strh	r3, [r4, #0]
 800017c:	3402      	adds	r4, #2
 800017e:	0c1b      	lsrs	r3, r3, #16
 8000180:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, text, sizeof(text)/sizeof(text[0]), 1000);
 8000182:	f107 010c 	add.w	r1, r7, #12
 8000186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800018a:	220f      	movs	r2, #15
 800018c:	4847      	ldr	r0, [pc, #284]	@ (80002ac <main+0x160>)
 800018e:	f001 fe77 	bl	8001e80 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Start counting up to send over UART
  uint8_t count = 0;
 8000192:	2300      	movs	r3, #0
 8000194:	77fb      	strb	r3, [r7, #31]
  char buffer[10];

  // relay flag
  uint8_t relayFlag = 0;
 8000196:	2300      	movs	r3, #0
 8000198:	77bb      	strb	r3, [r7, #30]
  // Initialize relay in reset state
  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, SET); // reset relay
 800019a:	2201      	movs	r2, #1
 800019c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001a0:	4843      	ldr	r0, [pc, #268]	@ (80002b0 <main+0x164>)
 80001a2:	f000 fe15 	bl	8000dd0 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80001a6:	200a      	movs	r0, #10
 80001a8:	f000 fb86 	bl	80008b8 <HAL_Delay>
  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, RESET); // release reset coil
 80001ac:	2200      	movs	r2, #0
 80001ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001b2:	483f      	ldr	r0, [pc, #252]	@ (80002b0 <main+0x164>)
 80001b4:	f000 fe0c 	bl	8000dd0 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80001b8:	2005      	movs	r0, #5
 80001ba:	f000 fb7d 	bl	80008b8 <HAL_Delay>

  // Start timer for STEP signal
  HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_3 ); // Start STEP signal >> counter toggle to toggle every 20/1000 sec = 50hz
 80001be:	2108      	movs	r1, #8
 80001c0:	483c      	ldr	r0, [pc, #240]	@ (80002b4 <main+0x168>)
 80001c2:	f001 fa97 	bl	80016f4 <HAL_TIM_OC_Start>
  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // Active low >> start disabled
 80001c6:	2201      	movs	r2, #1
 80001c8:	2104      	movs	r1, #4
 80001ca:	483b      	ldr	r0, [pc, #236]	@ (80002b8 <main+0x16c>)
 80001cc:	f000 fe00 	bl	8000dd0 <HAL_GPIO_WritePin>


  while (1)
  {
	  // Toggle green led
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001d0:	2102      	movs	r1, #2
 80001d2:	4837      	ldr	r0, [pc, #220]	@ (80002b0 <main+0x164>)
 80001d4:	f000 fe14 	bl	8000e00 <HAL_GPIO_TogglePin>

	  // Send count number to terminal
	  sprintf(buffer, "> %d\r\n", count);
 80001d8:	7ffa      	ldrb	r2, [r7, #31]
 80001da:	463b      	mov	r3, r7
 80001dc:	4937      	ldr	r1, [pc, #220]	@ (80002bc <main+0x170>)
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 f822 	bl	8002228 <siprintf>
	  HAL_UART_Transmit(&huart1, buffer, 10, 1000);
 80001e4:	4639      	mov	r1, r7
 80001e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001ea:	220a      	movs	r2, #10
 80001ec:	482f      	ldr	r0, [pc, #188]	@ (80002ac <main+0x160>)
 80001ee:	f001 fe47 	bl	8001e80 <HAL_UART_Transmit>
	  count++;
 80001f2:	7ffb      	ldrb	r3, [r7, #31]
 80001f4:	3301      	adds	r3, #1
 80001f6:	77fb      	strb	r3, [r7, #31]

	  // Toggle relay K1 XBT1
	  // for future security read reset pin state to ensure set and reset coils are not energized simultaneously
	  if(0 == relayFlag){
 80001f8:	7fbb      	ldrb	r3, [r7, #30]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d126      	bne.n	800024c <main+0x100>
		  // SET relay k1
		  HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, SET); // set relay
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000204:	482c      	ldr	r0, [pc, #176]	@ (80002b8 <main+0x16c>)
 8000206:	f000 fde3 	bl	8000dd0 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 800020a:	200a      	movs	r0, #10
 800020c:	f000 fb54 	bl	80008b8 <HAL_Delay>
		  HAL_GPIO_WritePin(RELAY_K1_GPIO_Port, RELAY_K1_Pin, RESET); // release coil
 8000210:	2200      	movs	r2, #0
 8000212:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000216:	4828      	ldr	r0, [pc, #160]	@ (80002b8 <main+0x16c>)
 8000218:	f000 fdda 	bl	8000dd0 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 800021c:	2005      	movs	r0, #5
 800021e:	f000 fb4b 	bl	80008b8 <HAL_Delay>
		  // SET SSR1 XBT1
		  HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, SET); // set SSR latch
 8000222:	2201      	movs	r2, #1
 8000224:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000228:	4823      	ldr	r0, [pc, #140]	@ (80002b8 <main+0x16c>)
 800022a:	f000 fdd1 	bl	8000dd0 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 800022e:	200a      	movs	r0, #10
 8000230:	f000 fb42 	bl	80008b8 <HAL_Delay>
		  HAL_GPIO_WritePin(SSR_XBT1_GPIO_Port, SSR_XBT1_Pin, RESET); // release SSR latch
 8000234:	2200      	movs	r2, #0
 8000236:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800023a:	481f      	ldr	r0, [pc, #124]	@ (80002b8 <main+0x16c>)
 800023c:	f000 fdc8 	bl	8000dd0 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000240:	2005      	movs	r0, #5
 8000242:	f000 fb39 	bl	80008b8 <HAL_Delay>

		  relayFlag = 1;
 8000246:	2301      	movs	r3, #1
 8000248:	77bb      	strb	r3, [r7, #30]
 800024a:	e013      	b.n	8000274 <main+0x128>
	  } else {
		  // RESET relay k1
		  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, SET); // reset relay and SSR
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000252:	4817      	ldr	r0, [pc, #92]	@ (80002b0 <main+0x164>)
 8000254:	f000 fdbc 	bl	8000dd0 <HAL_GPIO_WritePin>
		  HAL_Delay(10);
 8000258:	200a      	movs	r0, #10
 800025a:	f000 fb2d 	bl	80008b8 <HAL_Delay>
		  HAL_GPIO_WritePin(RESET_RELAY_GPIO_Port, RESET_RELAY_Pin, RESET); // release reset coil
 800025e:	2200      	movs	r2, #0
 8000260:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000264:	4812      	ldr	r0, [pc, #72]	@ (80002b0 <main+0x164>)
 8000266:	f000 fdb3 	bl	8000dd0 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 800026a:	2005      	movs	r0, #5
 800026c:	f000 fb24 	bl	80008b8 <HAL_Delay>
		  relayFlag = 0;
 8000270:	2300      	movs	r3, #0
 8000272:	77bb      	strb	r3, [r7, #30]
	  }

	  // motor
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, SET); // disable driver
 8000274:	2201      	movs	r2, #1
 8000276:	2104      	movs	r1, #4
 8000278:	480f      	ldr	r0, [pc, #60]	@ (80002b8 <main+0x16c>)
 800027a:	f000 fda9 	bl	8000dd0 <HAL_GPIO_WritePin>
	  HAL_Delay(500); // wait for the motor to stop
 800027e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000282:	f000 fb19 	bl	80008b8 <HAL_Delay>
	  HAL_GPIO_TogglePin(DIR_GPIO_Port, DIR_Pin); // change direction
 8000286:	2110      	movs	r1, #16
 8000288:	480b      	ldr	r0, [pc, #44]	@ (80002b8 <main+0x16c>)
 800028a:	f000 fdb9 	bl	8000e00 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(ENABLE_M1_GPIO_Port, ENABLE_M1_Pin, RESET); // enable driver
 800028e:	2200      	movs	r2, #0
 8000290:	2104      	movs	r1, #4
 8000292:	4809      	ldr	r0, [pc, #36]	@ (80002b8 <main+0x16c>)
 8000294:	f000 fd9c 	bl	8000dd0 <HAL_GPIO_WritePin>


	  HAL_Delay(5000); // wait 10 seconds and toggle all
 8000298:	f241 3088 	movw	r0, #5000	@ 0x1388
 800029c:	f000 fb0c 	bl	80008b8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002a0:	e796      	b.n	80001d0 <main+0x84>
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800
 80002a8:	08002ba8 	.word	0x08002ba8
 80002ac:	200000c0 	.word	0x200000c0
 80002b0:	40010c00 	.word	0x40010c00
 80002b4:	20000078 	.word	0x20000078
 80002b8:	40011000 	.word	0x40011000
 80002bc:	08002ba0 	.word	0x08002ba0

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b090      	sub	sp, #64	@ 0x40
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2228      	movs	r2, #40	@ 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 ffca 	bl	8002268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	2310      	movs	r3, #16
 80002ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ee:	2300      	movs	r3, #0
 80002f0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	f107 0318 	add.w	r3, r7, #24
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fd9c 	bl	8000e34 <HAL_RCC_OscConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000302:	f000 f915 	bl	8000530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000306:	230f      	movs	r3, #15
 8000308:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2100      	movs	r1, #0
 800031e:	4618      	mov	r0, r3
 8000320:	f001 f80a 	bl	8001338 <HAL_RCC_ClockConfig>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800032a:	f000 f901 	bl	8000530 <Error_Handler>
  }
}
 800032e:	bf00      	nop
 8000330:	3740      	adds	r7, #64	@ 0x40
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
	...

08000338 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b08a      	sub	sp, #40	@ 0x28
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033e:	f107 0320 	add.w	r3, r7, #32
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]
 8000356:	615a      	str	r2, [r3, #20]
 8000358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800035a:	4b22      	ldr	r3, [pc, #136]	@ (80003e4 <MX_TIM3_Init+0xac>)
 800035c:	4a22      	ldr	r2, [pc, #136]	@ (80003e8 <MX_TIM3_Init+0xb0>)
 800035e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000-1;
 8000360:	4b20      	ldr	r3, [pc, #128]	@ (80003e4 <MX_TIM3_Init+0xac>)
 8000362:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000366:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000368:	4b1e      	ldr	r3, [pc, #120]	@ (80003e4 <MX_TIM3_Init+0xac>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15-1;
 800036e:	4b1d      	ldr	r3, [pc, #116]	@ (80003e4 <MX_TIM3_Init+0xac>)
 8000370:	220e      	movs	r2, #14
 8000372:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000374:	4b1b      	ldr	r3, [pc, #108]	@ (80003e4 <MX_TIM3_Init+0xac>)
 8000376:	2200      	movs	r2, #0
 8000378:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800037a:	4b1a      	ldr	r3, [pc, #104]	@ (80003e4 <MX_TIM3_Init+0xac>)
 800037c:	2280      	movs	r2, #128	@ 0x80
 800037e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000380:	4818      	ldr	r0, [pc, #96]	@ (80003e4 <MX_TIM3_Init+0xac>)
 8000382:	f001 f967 	bl	8001654 <HAL_TIM_OC_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800038c:	f000 f8d0 	bl	8000530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2300      	movs	r3, #0
 8000392:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000398:	f107 0320 	add.w	r3, r7, #32
 800039c:	4619      	mov	r1, r3
 800039e:	4811      	ldr	r0, [pc, #68]	@ (80003e4 <MX_TIM3_Init+0xac>)
 80003a0:	f001 fcc0 	bl	8001d24 <HAL_TIMEx_MasterConfigSynchronization>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80003aa:	f000 f8c1 	bl	8000530 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80003ae:	2330      	movs	r3, #48	@ 0x30
 80003b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ba:	2300      	movs	r3, #0
 80003bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2208      	movs	r2, #8
 80003c2:	4619      	mov	r1, r3
 80003c4:	4807      	ldr	r0, [pc, #28]	@ (80003e4 <MX_TIM3_Init+0xac>)
 80003c6:	f001 fa37 	bl	8001838 <HAL_TIM_OC_ConfigChannel>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80003d0:	f000 f8ae 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80003d4:	4803      	ldr	r0, [pc, #12]	@ (80003e4 <MX_TIM3_Init+0xac>)
 80003d6:	f000 f901 	bl	80005dc <HAL_TIM_MspPostInit>

}
 80003da:	bf00      	nop
 80003dc:	3728      	adds	r7, #40	@ 0x28
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	20000078 	.word	0x20000078
 80003e8:	40000400 	.word	0x40000400

080003ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003f0:	4b11      	ldr	r3, [pc, #68]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 80003f2:	4a12      	ldr	r2, [pc, #72]	@ (800043c <MX_USART1_UART_Init+0x50>)
 80003f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003f6:	4b10      	ldr	r3, [pc, #64]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 80003f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80003fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000404:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 8000406:	2200      	movs	r2, #0
 8000408:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800040a:	4b0b      	ldr	r3, [pc, #44]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 800040c:	2200      	movs	r2, #0
 800040e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000410:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 8000412:	220c      	movs	r2, #12
 8000414:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000416:	4b08      	ldr	r3, [pc, #32]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800041c:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000422:	4805      	ldr	r0, [pc, #20]	@ (8000438 <MX_USART1_UART_Init+0x4c>)
 8000424:	f001 fcdc 	bl	8001de0 <HAL_UART_Init>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800042e:	f000 f87f 	bl	8000530 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	200000c0 	.word	0x200000c0
 800043c:	40013800 	.word	0x40013800

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b088      	sub	sp, #32
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000454:	4b32      	ldr	r3, [pc, #200]	@ (8000520 <MX_GPIO_Init+0xe0>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a31      	ldr	r2, [pc, #196]	@ (8000520 <MX_GPIO_Init+0xe0>)
 800045a:	f043 0310 	orr.w	r3, r3, #16
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b2f      	ldr	r3, [pc, #188]	@ (8000520 <MX_GPIO_Init+0xe0>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0310 	and.w	r3, r3, #16
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046c:	4b2c      	ldr	r3, [pc, #176]	@ (8000520 <MX_GPIO_Init+0xe0>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a2b      	ldr	r2, [pc, #172]	@ (8000520 <MX_GPIO_Init+0xe0>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b29      	ldr	r3, [pc, #164]	@ (8000520 <MX_GPIO_Init+0xe0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0304 	and.w	r3, r3, #4
 8000480:	60bb      	str	r3, [r7, #8]
 8000482:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000484:	4b26      	ldr	r3, [pc, #152]	@ (8000520 <MX_GPIO_Init+0xe0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a25      	ldr	r2, [pc, #148]	@ (8000520 <MX_GPIO_Init+0xe0>)
 800048a:	f043 0308 	orr.w	r3, r3, #8
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b23      	ldr	r3, [pc, #140]	@ (8000520 <MX_GPIO_Init+0xe0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0308 	and.w	r3, r3, #8
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SSR_XBT1_Pin|ENABLE_M1_Pin|DIR_Pin|RELAY_K1_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f648 0114 	movw	r1, #34836	@ 0x8814
 80004a2:	4820      	ldr	r0, [pc, #128]	@ (8000524 <MX_GPIO_Init+0xe4>)
 80004a4:	f000 fc94 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MUX_SELECT_GPIO_Port, MUX_SELECT_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2104      	movs	r1, #4
 80004ac:	481e      	ldr	r0, [pc, #120]	@ (8000528 <MX_GPIO_Init+0xe8>)
 80004ae:	f000 fc8f 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|RESET_RELAY_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80004b8:	481c      	ldr	r0, [pc, #112]	@ (800052c <MX_GPIO_Init+0xec>)
 80004ba:	f000 fc89 	bl	8000dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SSR_XBT1_Pin ENABLE_M1_Pin DIR_Pin RELAY_K1_Pin */
  GPIO_InitStruct.Pin = SSR_XBT1_Pin|ENABLE_M1_Pin|DIR_Pin|RELAY_K1_Pin;
 80004be:	f648 0314 	movw	r3, #34836	@ 0x8814
 80004c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c4:	2301      	movs	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2302      	movs	r3, #2
 80004ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004d0:	f107 0310 	add.w	r3, r7, #16
 80004d4:	4619      	mov	r1, r3
 80004d6:	4813      	ldr	r0, [pc, #76]	@ (8000524 <MX_GPIO_Init+0xe4>)
 80004d8:	f000 faf6 	bl	8000ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUX_SELECT_Pin */
  GPIO_InitStruct.Pin = MUX_SELECT_Pin;
 80004dc:	2304      	movs	r3, #4
 80004de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2302      	movs	r3, #2
 80004ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MUX_SELECT_GPIO_Port, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	480d      	ldr	r0, [pc, #52]	@ (8000528 <MX_GPIO_Init+0xe8>)
 80004f4:	f000 fae8 	bl	8000ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin RESET_RELAY_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_RELAY_Pin;
 80004f8:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4806      	ldr	r0, [pc, #24]	@ (800052c <MX_GPIO_Init+0xec>)
 8000512:	f000 fad9 	bl	8000ac8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000516:	bf00      	nop
 8000518:	3720      	adds	r7, #32
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000
 8000524:	40011000 	.word	0x40011000
 8000528:	40010800 	.word	0x40010800
 800052c:	40010c00 	.word	0x40010c00

08000530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000534:	b672      	cpsid	i
}
 8000536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <Error_Handler+0x8>

0800053c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <HAL_MspInit+0x5c>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a14      	ldr	r2, [pc, #80]	@ (8000598 <HAL_MspInit+0x5c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <HAL_MspInit+0x5c>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <HAL_MspInit+0x5c>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a0e      	ldr	r2, [pc, #56]	@ (8000598 <HAL_MspInit+0x5c>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b0c      	ldr	r3, [pc, #48]	@ (8000598 <HAL_MspInit+0x5c>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000572:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <HAL_MspInit+0x60>)
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	4a04      	ldr	r2, [pc, #16]	@ (800059c <HAL_MspInit+0x60>)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000
 800059c:	40010000 	.word	0x40010000

080005a0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a09      	ldr	r2, [pc, #36]	@ (80005d4 <HAL_TIM_OC_MspInit+0x34>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d10b      	bne.n	80005ca <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <HAL_TIM_OC_MspInit+0x38>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <HAL_TIM_OC_MspInit+0x38>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <HAL_TIM_OC_MspInit+0x38>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr
 80005d4:	40000400 	.word	0x40000400
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <HAL_TIM_MspPostInit+0x58>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d117      	bne.n	800062c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <HAL_TIM_MspPostInit+0x5c>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <HAL_TIM_MspPostInit+0x5c>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <HAL_TIM_MspPostInit+0x5c>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f003 0308 	and.w	r3, r3, #8
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = STEP_Pin;
 8000614:	2301      	movs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000618:	2302      	movs	r3, #2
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2302      	movs	r3, #2
 800061e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STEP_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	4619      	mov	r1, r3
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <HAL_TIM_MspPostInit+0x60>)
 8000628:	f000 fa4e 	bl	8000ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40000400 	.word	0x40000400
 8000638:	40021000 	.word	0x40021000
 800063c:	40010c00 	.word	0x40010c00

08000640 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a1c      	ldr	r2, [pc, #112]	@ (80006cc <HAL_UART_MspInit+0x8c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d131      	bne.n	80006c4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000660:	4b1b      	ldr	r3, [pc, #108]	@ (80006d0 <HAL_UART_MspInit+0x90>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a1a      	ldr	r2, [pc, #104]	@ (80006d0 <HAL_UART_MspInit+0x90>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <HAL_UART_MspInit+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <HAL_UART_MspInit+0x90>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a14      	ldr	r2, [pc, #80]	@ (80006d0 <HAL_UART_MspInit+0x90>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <HAL_UART_MspInit+0x90>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000694:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	2303      	movs	r3, #3
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	4619      	mov	r1, r3
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <HAL_UART_MspInit+0x94>)
 80006a6:	f000 fa0f 	bl	8000ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <HAL_UART_MspInit+0x94>)
 80006c0:	f000 fa02 	bl	8000ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006c4:	bf00      	nop
 80006c6:	3720      	adds	r7, #32
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40013800 	.word	0x40013800
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <NMI_Handler+0x4>

080006e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <HardFault_Handler+0x4>

080006e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <MemManage_Handler+0x4>

080006f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <UsageFault_Handler+0x4>

08000700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000728:	f000 f8aa 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}

08000730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000738:	4a14      	ldr	r2, [pc, #80]	@ (800078c <_sbrk+0x5c>)
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <_sbrk+0x60>)
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <_sbrk+0x64>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <_sbrk+0x64>)
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <_sbrk+0x68>)
 8000750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000752:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <_sbrk+0x64>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4413      	add	r3, r2
 800075a:	693a      	ldr	r2, [r7, #16]
 800075c:	429a      	cmp	r2, r3
 800075e:	d207      	bcs.n	8000770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000760:	f001 fd8a 	bl	8002278 <__errno>
 8000764:	4603      	mov	r3, r0
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	e009      	b.n	8000784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <_sbrk+0x64>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000776:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <_sbrk+0x64>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <_sbrk+0x64>)
 8000780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20005000 	.word	0x20005000
 8000790:	00000400 	.word	0x00000400
 8000794:	20000108 	.word	0x20000108
 8000798:	20000258 	.word	0x20000258

0800079c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a8:	f7ff fff8 	bl	800079c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480b      	ldr	r0, [pc, #44]	@ (80007dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ae:	490c      	ldr	r1, [pc, #48]	@ (80007e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b0:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a09      	ldr	r2, [pc, #36]	@ (80007e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007c4:	4c09      	ldr	r4, [pc, #36]	@ (80007ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007d2:	f001 fd57 	bl	8002284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff fcb9 	bl	800014c <main>
  bx lr
 80007da:	4770      	bx	lr
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007e4:	08002c20 	.word	0x08002c20
  ldr r2, =_sbss
 80007e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007ec:	20000258 	.word	0x20000258

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	@ (800081c <HAL_Init+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	@ (800081c <HAL_Init+0x28>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 f92b 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	200f      	movs	r0, #15
 800080c:	f000 f808 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff fe94 	bl	800053c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <HAL_InitTick+0x54>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <HAL_InitTick+0x58>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000836:	fbb3 f3f1 	udiv	r3, r3, r1
 800083a:	fbb2 f3f3 	udiv	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f935 	bl	8000aae <HAL_SYSTICK_Config>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e00e      	b.n	800086c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	d80a      	bhi.n	800086a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f000 f90b 	bl	8000a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000860:	4a06      	ldr	r2, [pc, #24]	@ (800087c <HAL_InitTick+0x5c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e000      	b.n	800086c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000000 	.word	0x20000000
 8000878:	20000008 	.word	0x20000008
 800087c:	20000004 	.word	0x20000004

08000880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b05      	ldr	r3, [pc, #20]	@ (800089c <HAL_IncTick+0x1c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <HAL_IncTick+0x20>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a03      	ldr	r2, [pc, #12]	@ (80008a0 <HAL_IncTick+0x20>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000008 	.word	0x20000008
 80008a0:	2000010c 	.word	0x2000010c

080008a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b02      	ldr	r3, [pc, #8]	@ (80008b4 <HAL_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	2000010c 	.word	0x2000010c

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff fff0 	bl	80008a4 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffe0 	bl	80008a4 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	@ (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	@ (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	@ (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	@ 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	@ 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f7ff ff90 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff49 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff5e 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff90 	bl	80009b8 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5f 	bl	8000964 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffb0 	bl	8000a1c <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b08b      	sub	sp, #44	@ 0x2c
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ada:	e169      	b.n	8000db0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000adc:	2201      	movs	r2, #1
 8000ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f040 8158 	bne.w	8000daa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	4a9a      	ldr	r2, [pc, #616]	@ (8000d68 <HAL_GPIO_Init+0x2a0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d05e      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b04:	4a98      	ldr	r2, [pc, #608]	@ (8000d68 <HAL_GPIO_Init+0x2a0>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d875      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b0a:	4a98      	ldr	r2, [pc, #608]	@ (8000d6c <HAL_GPIO_Init+0x2a4>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d058      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b10:	4a96      	ldr	r2, [pc, #600]	@ (8000d6c <HAL_GPIO_Init+0x2a4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d86f      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b16:	4a96      	ldr	r2, [pc, #600]	@ (8000d70 <HAL_GPIO_Init+0x2a8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d052      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b1c:	4a94      	ldr	r2, [pc, #592]	@ (8000d70 <HAL_GPIO_Init+0x2a8>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d869      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b22:	4a94      	ldr	r2, [pc, #592]	@ (8000d74 <HAL_GPIO_Init+0x2ac>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d04c      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b28:	4a92      	ldr	r2, [pc, #584]	@ (8000d74 <HAL_GPIO_Init+0x2ac>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d863      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b2e:	4a92      	ldr	r2, [pc, #584]	@ (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d046      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
 8000b34:	4a90      	ldr	r2, [pc, #576]	@ (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d85d      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b3a:	2b12      	cmp	r3, #18
 8000b3c:	d82a      	bhi.n	8000b94 <HAL_GPIO_Init+0xcc>
 8000b3e:	2b12      	cmp	r3, #18
 8000b40:	d859      	bhi.n	8000bf6 <HAL_GPIO_Init+0x12e>
 8000b42:	a201      	add	r2, pc, #4	@ (adr r2, 8000b48 <HAL_GPIO_Init+0x80>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000bc3 	.word	0x08000bc3
 8000b4c:	08000b9d 	.word	0x08000b9d
 8000b50:	08000baf 	.word	0x08000baf
 8000b54:	08000bf1 	.word	0x08000bf1
 8000b58:	08000bf7 	.word	0x08000bf7
 8000b5c:	08000bf7 	.word	0x08000bf7
 8000b60:	08000bf7 	.word	0x08000bf7
 8000b64:	08000bf7 	.word	0x08000bf7
 8000b68:	08000bf7 	.word	0x08000bf7
 8000b6c:	08000bf7 	.word	0x08000bf7
 8000b70:	08000bf7 	.word	0x08000bf7
 8000b74:	08000bf7 	.word	0x08000bf7
 8000b78:	08000bf7 	.word	0x08000bf7
 8000b7c:	08000bf7 	.word	0x08000bf7
 8000b80:	08000bf7 	.word	0x08000bf7
 8000b84:	08000bf7 	.word	0x08000bf7
 8000b88:	08000bf7 	.word	0x08000bf7
 8000b8c:	08000ba5 	.word	0x08000ba5
 8000b90:	08000bb9 	.word	0x08000bb9
 8000b94:	4a79      	ldr	r2, [pc, #484]	@ (8000d7c <HAL_GPIO_Init+0x2b4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d013      	beq.n	8000bc2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b9a:	e02c      	b.n	8000bf6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	623b      	str	r3, [r7, #32]
          break;
 8000ba2:	e029      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	623b      	str	r3, [r7, #32]
          break;
 8000bac:	e024      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	623b      	str	r3, [r7, #32]
          break;
 8000bb6:	e01f      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	330c      	adds	r3, #12
 8000bbe:	623b      	str	r3, [r7, #32]
          break;
 8000bc0:	e01a      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	623b      	str	r3, [r7, #32]
          break;
 8000bce:	e013      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d105      	bne.n	8000be4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd8:	2308      	movs	r3, #8
 8000bda:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	611a      	str	r2, [r3, #16]
          break;
 8000be2:	e009      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be4:	2308      	movs	r3, #8
 8000be6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69fa      	ldr	r2, [r7, #28]
 8000bec:	615a      	str	r2, [r3, #20]
          break;
 8000bee:	e003      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
          break;
 8000bf4:	e000      	b.n	8000bf8 <HAL_GPIO_Init+0x130>
          break;
 8000bf6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	2bff      	cmp	r3, #255	@ 0xff
 8000bfc:	d801      	bhi.n	8000c02 <HAL_GPIO_Init+0x13a>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	e001      	b.n	8000c06 <HAL_GPIO_Init+0x13e>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3304      	adds	r3, #4
 8000c06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2bff      	cmp	r3, #255	@ 0xff
 8000c0c:	d802      	bhi.n	8000c14 <HAL_GPIO_Init+0x14c>
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	e002      	b.n	8000c1a <HAL_GPIO_Init+0x152>
 8000c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c16:	3b08      	subs	r3, #8
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	210f      	movs	r1, #15
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	6a39      	ldr	r1, [r7, #32]
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	fa01 f303 	lsl.w	r3, r1, r3
 8000c34:	431a      	orrs	r2, r3
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80b1 	beq.w	8000daa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c48:	4b4d      	ldr	r3, [pc, #308]	@ (8000d80 <HAL_GPIO_Init+0x2b8>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d80 <HAL_GPIO_Init+0x2b8>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b4a      	ldr	r3, [pc, #296]	@ (8000d80 <HAL_GPIO_Init+0x2b8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c60:	4a48      	ldr	r2, [pc, #288]	@ (8000d84 <HAL_GPIO_Init+0x2bc>)
 8000c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3302      	adds	r3, #2
 8000c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4a40      	ldr	r2, [pc, #256]	@ (8000d88 <HAL_GPIO_Init+0x2c0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d013      	beq.n	8000cb4 <HAL_GPIO_Init+0x1ec>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d8c <HAL_GPIO_Init+0x2c4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d00d      	beq.n	8000cb0 <HAL_GPIO_Init+0x1e8>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a3e      	ldr	r2, [pc, #248]	@ (8000d90 <HAL_GPIO_Init+0x2c8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d007      	beq.n	8000cac <HAL_GPIO_Init+0x1e4>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d94 <HAL_GPIO_Init+0x2cc>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d101      	bne.n	8000ca8 <HAL_GPIO_Init+0x1e0>
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e006      	b.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000ca8:	2304      	movs	r3, #4
 8000caa:	e004      	b.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000cac:	2302      	movs	r3, #2
 8000cae:	e002      	b.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e000      	b.n	8000cb6 <HAL_GPIO_Init+0x1ee>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cb8:	f002 0203 	and.w	r2, r2, #3
 8000cbc:	0092      	lsls	r2, r2, #2
 8000cbe:	4093      	lsls	r3, r2
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cc6:	492f      	ldr	r1, [pc, #188]	@ (8000d84 <HAL_GPIO_Init+0x2bc>)
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	492c      	ldr	r1, [pc, #176]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cee:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4928      	ldr	r1, [pc, #160]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d08:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	4922      	ldr	r1, [pc, #136]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60cb      	str	r3, [r1, #12]
 8000d14:	e006      	b.n	8000d24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d18:	68da      	ldr	r2, [r3, #12]
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	491e      	ldr	r1, [pc, #120]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d20:	4013      	ands	r3, r2
 8000d22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d006      	beq.n	8000d3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d30:	4b19      	ldr	r3, [pc, #100]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	4918      	ldr	r1, [pc, #96]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	604b      	str	r3, [r1, #4]
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d3e:	4b16      	ldr	r3, [pc, #88]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4914      	ldr	r1, [pc, #80]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d48:	4013      	ands	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d021      	beq.n	8000d9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d58:	4b0f      	ldr	r3, [pc, #60]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	490e      	ldr	r1, [pc, #56]	@ (8000d98 <HAL_GPIO_Init+0x2d0>)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e021      	b.n	8000daa <HAL_GPIO_Init+0x2e2>
 8000d66:	bf00      	nop
 8000d68:	10320000 	.word	0x10320000
 8000d6c:	10310000 	.word	0x10310000
 8000d70:	10220000 	.word	0x10220000
 8000d74:	10210000 	.word	0x10210000
 8000d78:	10120000 	.word	0x10120000
 8000d7c:	10110000 	.word	0x10110000
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	40010c00 	.word	0x40010c00
 8000d90:	40011000 	.word	0x40011000
 8000d94:	40011400 	.word	0x40011400
 8000d98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <HAL_GPIO_Init+0x304>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	4909      	ldr	r1, [pc, #36]	@ (8000dcc <HAL_GPIO_Init+0x304>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dac:	3301      	adds	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f47f ae8e 	bne.w	8000adc <HAL_GPIO_Init+0x14>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	372c      	adds	r7, #44	@ 0x2c
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000de0:	787b      	ldrb	r3, [r7, #1]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dec:	e003      	b.n	8000df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	041a      	lsls	r2, r3, #16
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4013      	ands	r3, r2
 8000e18:	041a      	lsls	r2, r3, #16
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43d9      	mvns	r1, r3
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	400b      	ands	r3, r1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	611a      	str	r2, [r3, #16]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
	...

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e272      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 8087 	beq.w	8000f62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e54:	4b92      	ldr	r3, [pc, #584]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d00c      	beq.n	8000e7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e60:	4b8f      	ldr	r3, [pc, #572]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d112      	bne.n	8000e92 <HAL_RCC_OscConfig+0x5e>
 8000e6c:	4b8c      	ldr	r3, [pc, #560]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e78:	d10b      	bne.n	8000e92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7a:	4b89      	ldr	r3, [pc, #548]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d06c      	beq.n	8000f60 <HAL_RCC_OscConfig+0x12c>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d168      	bne.n	8000f60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e24c      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e9a:	d106      	bne.n	8000eaa <HAL_RCC_OscConfig+0x76>
 8000e9c:	4b80      	ldr	r3, [pc, #512]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a7f      	ldr	r2, [pc, #508]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e02e      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x98>
 8000eb2:	4b7b      	ldr	r3, [pc, #492]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7a      	ldr	r2, [pc, #488]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b78      	ldr	r3, [pc, #480]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a77      	ldr	r2, [pc, #476]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e01d      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_RCC_OscConfig+0xbc>
 8000ed6:	4b72      	ldr	r3, [pc, #456]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a71      	ldr	r2, [pc, #452]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a6e      	ldr	r2, [pc, #440]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	e00b      	b.n	8000f08 <HAL_RCC_OscConfig+0xd4>
 8000ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a6a      	ldr	r2, [pc, #424]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b68      	ldr	r3, [pc, #416]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a67      	ldr	r2, [pc, #412]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d013      	beq.n	8000f38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f10:	f7ff fcc8 	bl	80008a4 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fcc4 	bl	80008a4 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b64      	cmp	r3, #100	@ 0x64
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e200      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0f0      	beq.n	8000f18 <HAL_RCC_OscConfig+0xe4>
 8000f36:	e014      	b.n	8000f62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fcb4 	bl	80008a4 <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f40:	f7ff fcb0 	bl	80008a4 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	@ 0x64
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e1ec      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f52:	4b53      	ldr	r3, [pc, #332]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x10c>
 8000f5e:	e000      	b.n	8000f62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d063      	beq.n	8001036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00b      	beq.n	8000f92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f7a:	4b49      	ldr	r3, [pc, #292]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d11c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x18c>
 8000f86:	4b46      	ldr	r3, [pc, #280]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d116      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	4b43      	ldr	r3, [pc, #268]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <HAL_RCC_OscConfig+0x176>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d001      	beq.n	8000faa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e1c0      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000faa:	4b3d      	ldr	r3, [pc, #244]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4939      	ldr	r1, [pc, #228]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbe:	e03a      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d020      	beq.n	800100a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc8:	4b36      	ldr	r3, [pc, #216]	@ (80010a4 <HAL_RCC_OscConfig+0x270>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fce:	f7ff fc69 	bl	80008a4 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd6:	f7ff fc65 	bl	80008a4 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e1a1      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	4927      	ldr	r1, [pc, #156]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
 8001008:	e015      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800100a:	4b26      	ldr	r3, [pc, #152]	@ (80010a4 <HAL_RCC_OscConfig+0x270>)
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fc48 	bl	80008a4 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001018:	f7ff fc44 	bl	80008a4 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e180      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800102a:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f0      	bne.n	8001018 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d03a      	beq.n	80010b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d019      	beq.n	800107e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <HAL_RCC_OscConfig+0x274>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001050:	f7ff fc28 	bl	80008a4 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001058:	f7ff fc24 	bl	80008a4 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e160      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <HAL_RCC_OscConfig+0x26c>)
 800106c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001076:	2001      	movs	r0, #1
 8001078:	f000 face 	bl	8001618 <RCC_Delay>
 800107c:	e01c      	b.n	80010b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107e:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_RCC_OscConfig+0x274>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001084:	f7ff fc0e 	bl	80008a4 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800108a:	e00f      	b.n	80010ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108c:	f7ff fc0a 	bl	80008a4 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d908      	bls.n	80010ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e146      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000
 80010a4:	42420000 	.word	0x42420000
 80010a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010ac:	4b92      	ldr	r3, [pc, #584]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e9      	bne.n	800108c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f000 80a6 	beq.w	8001212 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ca:	4b8b      	ldr	r3, [pc, #556]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10d      	bne.n	80010f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b88      	ldr	r3, [pc, #544]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a87      	ldr	r2, [pc, #540]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b85      	ldr	r3, [pc, #532]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ee:	2301      	movs	r3, #1
 80010f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	4b82      	ldr	r3, [pc, #520]	@ (80012fc <HAL_RCC_OscConfig+0x4c8>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d118      	bne.n	8001130 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010fe:	4b7f      	ldr	r3, [pc, #508]	@ (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7e      	ldr	r2, [pc, #504]	@ (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800110a:	f7ff fbcb 	bl	80008a4 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001112:	f7ff fbc7 	bl	80008a4 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b64      	cmp	r3, #100	@ 0x64
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e103      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001124:	4b75      	ldr	r3, [pc, #468]	@ (80012fc <HAL_RCC_OscConfig+0x4c8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0f0      	beq.n	8001112 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d106      	bne.n	8001146 <HAL_RCC_OscConfig+0x312>
 8001138:	4b6f      	ldr	r3, [pc, #444]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a6e      	ldr	r2, [pc, #440]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6213      	str	r3, [r2, #32]
 8001144:	e02d      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10c      	bne.n	8001168 <HAL_RCC_OscConfig+0x334>
 800114e:	4b6a      	ldr	r3, [pc, #424]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4a69      	ldr	r2, [pc, #420]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6213      	str	r3, [r2, #32]
 800115a:	4b67      	ldr	r3, [pc, #412]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	4a66      	ldr	r2, [pc, #408]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	f023 0304 	bic.w	r3, r3, #4
 8001164:	6213      	str	r3, [r2, #32]
 8001166:	e01c      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b05      	cmp	r3, #5
 800116e:	d10c      	bne.n	800118a <HAL_RCC_OscConfig+0x356>
 8001170:	4b61      	ldr	r3, [pc, #388]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	4a60      	ldr	r2, [pc, #384]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6213      	str	r3, [r2, #32]
 800117c:	4b5e      	ldr	r3, [pc, #376]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	4a5d      	ldr	r2, [pc, #372]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6213      	str	r3, [r2, #32]
 8001188:	e00b      	b.n	80011a2 <HAL_RCC_OscConfig+0x36e>
 800118a:	4b5b      	ldr	r3, [pc, #364]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	4a5a      	ldr	r2, [pc, #360]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	6213      	str	r3, [r2, #32]
 8001196:	4b58      	ldr	r3, [pc, #352]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	4a57      	ldr	r2, [pc, #348]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	f023 0304 	bic.w	r3, r3, #4
 80011a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d015      	beq.n	80011d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fb7b 	bl	80008a4 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fb77 	bl	80008a4 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e0b1      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c8:	4b4b      	ldr	r3, [pc, #300]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0ee      	beq.n	80011b2 <HAL_RCC_OscConfig+0x37e>
 80011d4:	e014      	b.n	8001200 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fb65 	bl	80008a4 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011de:	f7ff fb61 	bl	80008a4 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e09b      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f4:	4b40      	ldr	r3, [pc, #256]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80011f6:	6a1b      	ldr	r3, [r3, #32]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1ee      	bne.n	80011de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d105      	bne.n	8001212 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001206:	4b3c      	ldr	r3, [pc, #240]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a3b      	ldr	r2, [pc, #236]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800120c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 8087 	beq.w	800132a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800121c:	4b36      	ldr	r3, [pc, #216]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b08      	cmp	r3, #8
 8001226:	d061      	beq.n	80012ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d146      	bne.n	80012be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001230:	4b33      	ldr	r3, [pc, #204]	@ (8001300 <HAL_RCC_OscConfig+0x4cc>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fb35 	bl	80008a4 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123e:	f7ff fb31 	bl	80008a4 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e06d      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001250:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f0      	bne.n	800123e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001264:	d108      	bne.n	8001278 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	4921      	ldr	r1, [pc, #132]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a19      	ldr	r1, [r3, #32]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	430b      	orrs	r3, r1
 800128a:	491b      	ldr	r1, [pc, #108]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001290:	4b1b      	ldr	r3, [pc, #108]	@ (8001300 <HAL_RCC_OscConfig+0x4cc>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fb05 	bl	80008a4 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fb01 	bl	80008a4 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e03d      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x46a>
 80012bc:	e035      	b.n	800132a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012be:	4b10      	ldr	r3, [pc, #64]	@ (8001300 <HAL_RCC_OscConfig+0x4cc>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c4:	f7ff faee 	bl	80008a4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012cc:	f7ff faea 	bl	80008a4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e026      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_RCC_OscConfig+0x4c4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x498>
 80012ea:	e01e      	b.n	800132a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e019      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40007000 	.word	0x40007000
 8001300:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001304:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_RCC_OscConfig+0x500>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a1b      	ldr	r3, [r3, #32]
 8001314:	429a      	cmp	r2, r3
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	429a      	cmp	r2, r3
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e0d0      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800134c:	4b6a      	ldr	r3, [pc, #424]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d910      	bls.n	800137c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800135a:	4b67      	ldr	r3, [pc, #412]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f023 0207 	bic.w	r2, r3, #7
 8001362:	4965      	ldr	r1, [pc, #404]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800136a:	4b63      	ldr	r3, [pc, #396]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e0b8      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d020      	beq.n	80013ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d005      	beq.n	80013a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001394:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a58      	ldr	r2, [pc, #352]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800139e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d005      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013ac:	4b53      	ldr	r3, [pc, #332]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	4a52      	ldr	r2, [pc, #328]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b8:	4b50      	ldr	r3, [pc, #320]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	494d      	ldr	r1, [pc, #308]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d040      	beq.n	8001458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013de:	4b47      	ldr	r3, [pc, #284]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d115      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e07f      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e073      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001406:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e06b      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001416:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4936      	ldr	r1, [pc, #216]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001428:	f7ff fa3c 	bl	80008a4 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e00a      	b.n	8001446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff fa38 	bl	80008a4 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e053      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 020c 	and.w	r2, r3, #12
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	429a      	cmp	r2, r3
 8001456:	d1eb      	bne.n	8001430 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001458:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	429a      	cmp	r2, r3
 8001464:	d210      	bcs.n	8001488 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001466:	4b24      	ldr	r3, [pc, #144]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f023 0207 	bic.w	r2, r3, #7
 800146e:	4922      	ldr	r1, [pc, #136]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001476:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d001      	beq.n	8001488 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e032      	b.n	80014ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d008      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	4916      	ldr	r1, [pc, #88]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	490e      	ldr	r1, [pc, #56]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014c6:	f000 f821 	bl	800150c <HAL_RCC_GetSysClockFreq>
 80014ca:	4602      	mov	r2, r0
 80014cc:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	490a      	ldr	r1, [pc, #40]	@ (8001500 <HAL_RCC_ClockConfig+0x1c8>)
 80014d8:	5ccb      	ldrb	r3, [r1, r3]
 80014da:	fa22 f303 	lsr.w	r3, r2, r3
 80014de:	4a09      	ldr	r2, [pc, #36]	@ (8001504 <HAL_RCC_ClockConfig+0x1cc>)
 80014e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <HAL_RCC_ClockConfig+0x1d0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f99a 	bl	8000820 <HAL_InitTick>

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40021000 	.word	0x40021000
 8001500:	08002bb8 	.word	0x08002bb8
 8001504:	20000000 	.word	0x20000000
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001526:	4b1e      	ldr	r3, [pc, #120]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b04      	cmp	r3, #4
 8001534:	d002      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x30>
 8001536:	2b08      	cmp	r3, #8
 8001538:	d003      	beq.n	8001542 <HAL_RCC_GetSysClockFreq+0x36>
 800153a:	e027      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800153e:	613b      	str	r3, [r7, #16]
      break;
 8001540:	e027      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	0c9b      	lsrs	r3, r3, #18
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	4a17      	ldr	r2, [pc, #92]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
 800154e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d010      	beq.n	800157c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800155a:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	0c5b      	lsrs	r3, r3, #17
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	4a11      	ldr	r2, [pc, #68]	@ (80015ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800156e:	fb03 f202 	mul.w	r2, r3, r2
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	fbb2 f3f3 	udiv	r3, r2, r3
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	e004      	b.n	8001586 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a0c      	ldr	r2, [pc, #48]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001580:	fb02 f303 	mul.w	r3, r2, r3
 8001584:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	613b      	str	r3, [r7, #16]
      break;
 800158a:	e002      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800158e:	613b      	str	r3, [r7, #16]
      break;
 8001590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001592:	693b      	ldr	r3, [r7, #16]
}
 8001594:	4618      	mov	r0, r3
 8001596:	371c      	adds	r7, #28
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	007a1200 	.word	0x007a1200
 80015a8:	08002bd0 	.word	0x08002bd0
 80015ac:	08002be0 	.word	0x08002be0
 80015b0:	003d0900 	.word	0x003d0900

080015b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b8:	4b02      	ldr	r3, [pc, #8]	@ (80015c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	20000000 	.word	0x20000000

080015c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015cc:	f7ff fff2 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b05      	ldr	r3, [pc, #20]	@ (80015e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	0a1b      	lsrs	r3, r3, #8
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	4903      	ldr	r1, [pc, #12]	@ (80015ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	08002bc8 	.word	0x08002bc8

080015f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015f4:	f7ff ffde 	bl	80015b4 <HAL_RCC_GetHCLKFreq>
 80015f8:	4602      	mov	r2, r0
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	0adb      	lsrs	r3, r3, #11
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	4903      	ldr	r1, [pc, #12]	@ (8001614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001606:	5ccb      	ldrb	r3, [r1, r3]
 8001608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800160c:	4618      	mov	r0, r3
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40021000 	.word	0x40021000
 8001614:	08002bc8 	.word	0x08002bc8

08001618 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <RCC_Delay+0x34>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <RCC_Delay+0x38>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0a5b      	lsrs	r3, r3, #9
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001634:	bf00      	nop
  }
  while (Delay --);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1e5a      	subs	r2, r3, #1
 800163a:	60fa      	str	r2, [r7, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <RCC_Delay+0x1c>
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	20000000 	.word	0x20000000
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e041      	b.n	80016ea <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7fe ff90 	bl	80005a0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3304      	adds	r3, #4
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f000 f92c 	bl	80018f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_TIM_OC_Start+0x24>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b01      	cmp	r3, #1
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	e022      	b.n	800175e <HAL_TIM_OC_Start+0x6a>
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b04      	cmp	r3, #4
 800171c:	d109      	bne.n	8001732 <HAL_TIM_OC_Start+0x3e>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	e015      	b.n	800175e <HAL_TIM_OC_Start+0x6a>
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b08      	cmp	r3, #8
 8001736:	d109      	bne.n	800174c <HAL_TIM_OC_Start+0x58>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	e008      	b.n	800175e <HAL_TIM_OC_Start+0x6a>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	bf14      	ite	ne
 8001758:	2301      	movne	r3, #1
 800175a:	2300      	moveq	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e05e      	b.n	8001824 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d104      	bne.n	8001776 <HAL_TIM_OC_Start+0x82>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2202      	movs	r2, #2
 8001770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001774:	e013      	b.n	800179e <HAL_TIM_OC_Start+0xaa>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2b04      	cmp	r3, #4
 800177a:	d104      	bne.n	8001786 <HAL_TIM_OC_Start+0x92>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2202      	movs	r2, #2
 8001780:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001784:	e00b      	b.n	800179e <HAL_TIM_OC_Start+0xaa>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b08      	cmp	r3, #8
 800178a:	d104      	bne.n	8001796 <HAL_TIM_OC_Start+0xa2>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2202      	movs	r2, #2
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001794:	e003      	b.n	800179e <HAL_TIM_OC_Start+0xaa>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2202      	movs	r2, #2
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2201      	movs	r2, #1
 80017a4:	6839      	ldr	r1, [r7, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fa98 	bl	8001cdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1e      	ldr	r2, [pc, #120]	@ (800182c <HAL_TIM_OC_Start+0x138>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d107      	bne.n	80017c6 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a18      	ldr	r2, [pc, #96]	@ (800182c <HAL_TIM_OC_Start+0x138>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00e      	beq.n	80017ee <HAL_TIM_OC_Start+0xfa>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017d8:	d009      	beq.n	80017ee <HAL_TIM_OC_Start+0xfa>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <HAL_TIM_OC_Start+0x13c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d004      	beq.n	80017ee <HAL_TIM_OC_Start+0xfa>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <HAL_TIM_OC_Start+0x140>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d111      	bne.n	8001812 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b06      	cmp	r3, #6
 80017fe:	d010      	beq.n	8001822 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001810:	e007      	b.n	8001822 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0201 	orr.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40012c00 	.word	0x40012c00
 8001830:	40000400 	.word	0x40000400
 8001834:	40000800 	.word	0x40000800

08001838 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800184e:	2b01      	cmp	r3, #1
 8001850:	d101      	bne.n	8001856 <HAL_TIM_OC_ConfigChannel+0x1e>
 8001852:	2302      	movs	r3, #2
 8001854:	e048      	b.n	80018e8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	2201      	movs	r2, #1
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d839      	bhi.n	80018d8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8001864:	a201      	add	r2, pc, #4	@ (adr r2, 800186c <HAL_TIM_OC_ConfigChannel+0x34>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	080018a1 	.word	0x080018a1
 8001870:	080018d9 	.word	0x080018d9
 8001874:	080018d9 	.word	0x080018d9
 8001878:	080018d9 	.word	0x080018d9
 800187c:	080018af 	.word	0x080018af
 8001880:	080018d9 	.word	0x080018d9
 8001884:	080018d9 	.word	0x080018d9
 8001888:	080018d9 	.word	0x080018d9
 800188c:	080018bd 	.word	0x080018bd
 8001890:	080018d9 	.word	0x080018d9
 8001894:	080018d9 	.word	0x080018d9
 8001898:	080018d9 	.word	0x080018d9
 800189c:	080018cb 	.word	0x080018cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f890 	bl	80019cc <TIM_OC1_SetConfig>
      break;
 80018ac:	e017      	b.n	80018de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68b9      	ldr	r1, [r7, #8]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f8ef 	bl	8001a98 <TIM_OC2_SetConfig>
      break;
 80018ba:	e010      	b.n	80018de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 f952 	bl	8001b6c <TIM_OC3_SetConfig>
      break;
 80018c8:	e009      	b.n	80018de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 f9b5 	bl	8001c40 <TIM_OC4_SetConfig>
      break;
 80018d6:	e002      	b.n	80018de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	75fb      	strb	r3, [r7, #23]
      break;
 80018dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80018e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a2f      	ldr	r2, [pc, #188]	@ (80019c0 <TIM_Base_SetConfig+0xd0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00b      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190e:	d007      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a2c      	ldr	r2, [pc, #176]	@ (80019c4 <TIM_Base_SetConfig+0xd4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d003      	beq.n	8001920 <TIM_Base_SetConfig+0x30>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a2b      	ldr	r2, [pc, #172]	@ (80019c8 <TIM_Base_SetConfig+0xd8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d108      	bne.n	8001932 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a22      	ldr	r2, [pc, #136]	@ (80019c0 <TIM_Base_SetConfig+0xd0>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00b      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001940:	d007      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a1f      	ldr	r2, [pc, #124]	@ (80019c4 <TIM_Base_SetConfig+0xd4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d003      	beq.n	8001952 <TIM_Base_SetConfig+0x62>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a1e      	ldr	r2, [pc, #120]	@ (80019c8 <TIM_Base_SetConfig+0xd8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d108      	bne.n	8001964 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4313      	orrs	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a0d      	ldr	r2, [pc, #52]	@ (80019c0 <TIM_Base_SetConfig+0xd0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d103      	bne.n	8001998 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f023 0201 	bic.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
  }
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40000800 	.word	0x40000800

080019cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f023 0201 	bic.w	r2, r3, #1
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f023 0302 	bic.w	r3, r3, #2
 8001a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a1c      	ldr	r2, [pc, #112]	@ (8001a94 <TIM_OC1_SetConfig+0xc8>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d10c      	bne.n	8001a42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f023 0308 	bic.w	r3, r3, #8
 8001a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a13      	ldr	r2, [pc, #76]	@ (8001a94 <TIM_OC1_SetConfig+0xc8>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d111      	bne.n	8001a6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	621a      	str	r2, [r3, #32]
}
 8001a88:	bf00      	nop
 8001a8a:	371c      	adds	r7, #28
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40012c00 	.word	0x40012c00

08001a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	f023 0210 	bic.w	r2, r3, #16
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f023 0320 	bic.w	r3, r3, #32
 8001ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b68 <TIM_OC2_SetConfig+0xd0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d10d      	bne.n	8001b14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a14      	ldr	r2, [pc, #80]	@ (8001b68 <TIM_OC2_SetConfig+0xd0>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d113      	bne.n	8001b44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	621a      	str	r2, [r3, #32]
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40012c00 	.word	0x40012c00

08001b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f023 0303 	bic.w	r3, r3, #3
 8001ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c3c <TIM_OC3_SetConfig+0xd0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10d      	bne.n	8001be6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <TIM_OC3_SetConfig+0xd0>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d113      	bne.n	8001c16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	011b      	lsls	r3, r3, #4
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	621a      	str	r2, [r3, #32]
}
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40012c00 	.word	0x40012c00

08001c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	031b      	lsls	r3, r3, #12
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd8 <TIM_OC4_SetConfig+0x98>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d109      	bne.n	8001cb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ca6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	019b      	lsls	r3, r3, #6
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	621a      	str	r2, [r3, #32]
}
 8001cce:	bf00      	nop
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	40012c00 	.word	0x40012c00

08001cdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2201      	movs	r2, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a1a      	ldr	r2, [r3, #32]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	621a      	str	r2, [r3, #32]
}
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e046      	b.n	8001dca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a16      	ldr	r2, [pc, #88]	@ (8001dd4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00e      	beq.n	8001d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d88:	d009      	beq.n	8001d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d004      	beq.n	8001d9e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d10c      	bne.n	8001db8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001da4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40000800 	.word	0x40000800

08001de0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e042      	b.n	8001e78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7fe fc1a 	bl	8000640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2224      	movs	r2, #36	@ 0x24
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f971 	bl	800210c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b20      	cmp	r3, #32
 8001e9e:	d175      	bne.n	8001f8c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <HAL_UART_Transmit+0x2c>
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e06e      	b.n	8001f8e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2221      	movs	r2, #33	@ 0x21
 8001eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ebe:	f7fe fcf1 	bl	80008a4 <HAL_GetTick>
 8001ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	88fa      	ldrh	r2, [r7, #6]
 8001ec8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	88fa      	ldrh	r2, [r7, #6]
 8001ece:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ed8:	d108      	bne.n	8001eec <HAL_UART_Transmit+0x6c>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d104      	bne.n	8001eec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	e003      	b.n	8001ef4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ef4:	e02e      	b.n	8001f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	@ 0x80
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f848 	bl	8001f96 <UART_WaitOnFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e03a      	b.n	8001f8e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10b      	bne.n	8001f36 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	3302      	adds	r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	e007      	b.n	8001f46 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	3301      	adds	r3, #1
 8001f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1cb      	bne.n	8001ef6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2200      	movs	r2, #0
 8001f66:	2140      	movs	r1, #64	@ 0x40
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f814 	bl	8001f96 <UART_WaitOnFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e006      	b.n	8001f8e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3720      	adds	r7, #32
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fa6:	e03b      	b.n	8002020 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fae:	d037      	beq.n	8002020 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb0:	f7fe fc78 	bl	80008a4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	6a3a      	ldr	r2, [r7, #32]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d302      	bcc.n	8001fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e03a      	b.n	8002040 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d023      	beq.n	8002020 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	2b80      	cmp	r3, #128	@ 0x80
 8001fdc:	d020      	beq.n	8002020 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	2b40      	cmp	r3, #64	@ 0x40
 8001fe2:	d01d      	beq.n	8002020 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d116      	bne.n	8002020 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002008:	68f8      	ldr	r0, [r7, #12]
 800200a:	f000 f81d 	bl	8002048 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2208      	movs	r2, #8
 8002012:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e00f      	b.n	8002040 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	4013      	ands	r3, r2
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	429a      	cmp	r2, r3
 800202e:	bf0c      	ite	eq
 8002030:	2301      	moveq	r3, #1
 8002032:	2300      	movne	r3, #0
 8002034:	b2db      	uxtb	r3, r3
 8002036:	461a      	mov	r2, r3
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	429a      	cmp	r2, r3
 800203c:	d0b4      	beq.n	8001fa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002048:	b480      	push	{r7}
 800204a:	b095      	sub	sp, #84	@ 0x54
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	330c      	adds	r3, #12
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205a:	e853 3f00 	ldrex	r3, [r3]
 800205e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002062:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	330c      	adds	r3, #12
 800206e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002070:	643a      	str	r2, [r7, #64]	@ 0x40
 8002072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002074:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002078:	e841 2300 	strex	r3, r2, [r1]
 800207c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800207e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e5      	bne.n	8002050 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3314      	adds	r3, #20
 800208a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	e853 3f00 	ldrex	r3, [r3]
 8002092:	61fb      	str	r3, [r7, #28]
   return(result);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	3314      	adds	r3, #20
 80020a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020ac:	e841 2300 	strex	r3, r2, [r1]
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e5      	bne.n	8002084 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d119      	bne.n	80020f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	330c      	adds	r3, #12
 80020c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	e853 3f00 	ldrex	r3, [r3]
 80020ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f023 0310 	bic.w	r3, r3, #16
 80020d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	330c      	adds	r3, #12
 80020de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e0:	61ba      	str	r2, [r7, #24]
 80020e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e4:	6979      	ldr	r1, [r7, #20]
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	e841 2300 	strex	r3, r2, [r1]
 80020ec:	613b      	str	r3, [r7, #16]
   return(result);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1e5      	bne.n	80020c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002102:	bf00      	nop
 8002104:	3754      	adds	r7, #84	@ 0x54
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr

0800210c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	4313      	orrs	r3, r2
 800213a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002146:	f023 030c 	bic.w	r3, r3, #12
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	430b      	orrs	r3, r1
 8002152:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2c      	ldr	r2, [pc, #176]	@ (8002220 <UART_SetConfig+0x114>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d103      	bne.n	800217c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002174:	f7ff fa3c 	bl	80015f0 <HAL_RCC_GetPCLK2Freq>
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	e002      	b.n	8002182 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800217c:	f7ff fa24 	bl	80015c8 <HAL_RCC_GetPCLK1Freq>
 8002180:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	009a      	lsls	r2, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fbb2 f3f3 	udiv	r3, r2, r3
 8002198:	4a22      	ldr	r2, [pc, #136]	@ (8002224 <UART_SetConfig+0x118>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	0119      	lsls	r1, r3, #4
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	009a      	lsls	r2, r3, #2
 80021ac:	441a      	add	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002224 <UART_SetConfig+0x118>)
 80021ba:	fba3 0302 	umull	r0, r3, r3, r2
 80021be:	095b      	lsrs	r3, r3, #5
 80021c0:	2064      	movs	r0, #100	@ 0x64
 80021c2:	fb00 f303 	mul.w	r3, r0, r3
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	3332      	adds	r3, #50	@ 0x32
 80021cc:	4a15      	ldr	r2, [pc, #84]	@ (8002224 <UART_SetConfig+0x118>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021d8:	4419      	add	r1, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	009a      	lsls	r2, r3, #2
 80021e4:	441a      	add	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <UART_SetConfig+0x118>)
 80021f2:	fba3 0302 	umull	r0, r3, r3, r2
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	2064      	movs	r0, #100	@ 0x64
 80021fa:	fb00 f303 	mul.w	r3, r0, r3
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	3332      	adds	r3, #50	@ 0x32
 8002204:	4a07      	ldr	r2, [pc, #28]	@ (8002224 <UART_SetConfig+0x118>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	f003 020f 	and.w	r2, r3, #15
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	440a      	add	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40013800 	.word	0x40013800
 8002224:	51eb851f 	.word	0x51eb851f

08002228 <siprintf>:
 8002228:	b40e      	push	{r1, r2, r3}
 800222a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800222e:	b500      	push	{lr}
 8002230:	b09c      	sub	sp, #112	@ 0x70
 8002232:	ab1d      	add	r3, sp, #116	@ 0x74
 8002234:	9002      	str	r0, [sp, #8]
 8002236:	9006      	str	r0, [sp, #24]
 8002238:	9107      	str	r1, [sp, #28]
 800223a:	9104      	str	r1, [sp, #16]
 800223c:	4808      	ldr	r0, [pc, #32]	@ (8002260 <siprintf+0x38>)
 800223e:	4909      	ldr	r1, [pc, #36]	@ (8002264 <siprintf+0x3c>)
 8002240:	f853 2b04 	ldr.w	r2, [r3], #4
 8002244:	9105      	str	r1, [sp, #20]
 8002246:	6800      	ldr	r0, [r0, #0]
 8002248:	a902      	add	r1, sp, #8
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	f000 f992 	bl	8002574 <_svfiprintf_r>
 8002250:	2200      	movs	r2, #0
 8002252:	9b02      	ldr	r3, [sp, #8]
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	b01c      	add	sp, #112	@ 0x70
 8002258:	f85d eb04 	ldr.w	lr, [sp], #4
 800225c:	b003      	add	sp, #12
 800225e:	4770      	bx	lr
 8002260:	2000000c 	.word	0x2000000c
 8002264:	ffff0208 	.word	0xffff0208

08002268 <memset>:
 8002268:	4603      	mov	r3, r0
 800226a:	4402      	add	r2, r0
 800226c:	4293      	cmp	r3, r2
 800226e:	d100      	bne.n	8002272 <memset+0xa>
 8002270:	4770      	bx	lr
 8002272:	f803 1b01 	strb.w	r1, [r3], #1
 8002276:	e7f9      	b.n	800226c <memset+0x4>

08002278 <__errno>:
 8002278:	4b01      	ldr	r3, [pc, #4]	@ (8002280 <__errno+0x8>)
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	2000000c 	.word	0x2000000c

08002284 <__libc_init_array>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	2600      	movs	r6, #0
 8002288:	4d0c      	ldr	r5, [pc, #48]	@ (80022bc <__libc_init_array+0x38>)
 800228a:	4c0d      	ldr	r4, [pc, #52]	@ (80022c0 <__libc_init_array+0x3c>)
 800228c:	1b64      	subs	r4, r4, r5
 800228e:	10a4      	asrs	r4, r4, #2
 8002290:	42a6      	cmp	r6, r4
 8002292:	d109      	bne.n	80022a8 <__libc_init_array+0x24>
 8002294:	f000 fc78 	bl	8002b88 <_init>
 8002298:	2600      	movs	r6, #0
 800229a:	4d0a      	ldr	r5, [pc, #40]	@ (80022c4 <__libc_init_array+0x40>)
 800229c:	4c0a      	ldr	r4, [pc, #40]	@ (80022c8 <__libc_init_array+0x44>)
 800229e:	1b64      	subs	r4, r4, r5
 80022a0:	10a4      	asrs	r4, r4, #2
 80022a2:	42a6      	cmp	r6, r4
 80022a4:	d105      	bne.n	80022b2 <__libc_init_array+0x2e>
 80022a6:	bd70      	pop	{r4, r5, r6, pc}
 80022a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ac:	4798      	blx	r3
 80022ae:	3601      	adds	r6, #1
 80022b0:	e7ee      	b.n	8002290 <__libc_init_array+0xc>
 80022b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b6:	4798      	blx	r3
 80022b8:	3601      	adds	r6, #1
 80022ba:	e7f2      	b.n	80022a2 <__libc_init_array+0x1e>
 80022bc:	08002c18 	.word	0x08002c18
 80022c0:	08002c18 	.word	0x08002c18
 80022c4:	08002c18 	.word	0x08002c18
 80022c8:	08002c1c 	.word	0x08002c1c

080022cc <__retarget_lock_acquire_recursive>:
 80022cc:	4770      	bx	lr

080022ce <__retarget_lock_release_recursive>:
 80022ce:	4770      	bx	lr

080022d0 <_free_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4605      	mov	r5, r0
 80022d4:	2900      	cmp	r1, #0
 80022d6:	d040      	beq.n	800235a <_free_r+0x8a>
 80022d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022dc:	1f0c      	subs	r4, r1, #4
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bfb8      	it	lt
 80022e2:	18e4      	addlt	r4, r4, r3
 80022e4:	f000 f8de 	bl	80024a4 <__malloc_lock>
 80022e8:	4a1c      	ldr	r2, [pc, #112]	@ (800235c <_free_r+0x8c>)
 80022ea:	6813      	ldr	r3, [r2, #0]
 80022ec:	b933      	cbnz	r3, 80022fc <_free_r+0x2c>
 80022ee:	6063      	str	r3, [r4, #4]
 80022f0:	6014      	str	r4, [r2, #0]
 80022f2:	4628      	mov	r0, r5
 80022f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022f8:	f000 b8da 	b.w	80024b0 <__malloc_unlock>
 80022fc:	42a3      	cmp	r3, r4
 80022fe:	d908      	bls.n	8002312 <_free_r+0x42>
 8002300:	6820      	ldr	r0, [r4, #0]
 8002302:	1821      	adds	r1, r4, r0
 8002304:	428b      	cmp	r3, r1
 8002306:	bf01      	itttt	eq
 8002308:	6819      	ldreq	r1, [r3, #0]
 800230a:	685b      	ldreq	r3, [r3, #4]
 800230c:	1809      	addeq	r1, r1, r0
 800230e:	6021      	streq	r1, [r4, #0]
 8002310:	e7ed      	b.n	80022ee <_free_r+0x1e>
 8002312:	461a      	mov	r2, r3
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	b10b      	cbz	r3, 800231c <_free_r+0x4c>
 8002318:	42a3      	cmp	r3, r4
 800231a:	d9fa      	bls.n	8002312 <_free_r+0x42>
 800231c:	6811      	ldr	r1, [r2, #0]
 800231e:	1850      	adds	r0, r2, r1
 8002320:	42a0      	cmp	r0, r4
 8002322:	d10b      	bne.n	800233c <_free_r+0x6c>
 8002324:	6820      	ldr	r0, [r4, #0]
 8002326:	4401      	add	r1, r0
 8002328:	1850      	adds	r0, r2, r1
 800232a:	4283      	cmp	r3, r0
 800232c:	6011      	str	r1, [r2, #0]
 800232e:	d1e0      	bne.n	80022f2 <_free_r+0x22>
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4408      	add	r0, r1
 8002336:	6010      	str	r0, [r2, #0]
 8002338:	6053      	str	r3, [r2, #4]
 800233a:	e7da      	b.n	80022f2 <_free_r+0x22>
 800233c:	d902      	bls.n	8002344 <_free_r+0x74>
 800233e:	230c      	movs	r3, #12
 8002340:	602b      	str	r3, [r5, #0]
 8002342:	e7d6      	b.n	80022f2 <_free_r+0x22>
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	1821      	adds	r1, r4, r0
 8002348:	428b      	cmp	r3, r1
 800234a:	bf01      	itttt	eq
 800234c:	6819      	ldreq	r1, [r3, #0]
 800234e:	685b      	ldreq	r3, [r3, #4]
 8002350:	1809      	addeq	r1, r1, r0
 8002352:	6021      	streq	r1, [r4, #0]
 8002354:	6063      	str	r3, [r4, #4]
 8002356:	6054      	str	r4, [r2, #4]
 8002358:	e7cb      	b.n	80022f2 <_free_r+0x22>
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	20000254 	.word	0x20000254

08002360 <sbrk_aligned>:
 8002360:	b570      	push	{r4, r5, r6, lr}
 8002362:	4e0f      	ldr	r6, [pc, #60]	@ (80023a0 <sbrk_aligned+0x40>)
 8002364:	460c      	mov	r4, r1
 8002366:	6831      	ldr	r1, [r6, #0]
 8002368:	4605      	mov	r5, r0
 800236a:	b911      	cbnz	r1, 8002372 <sbrk_aligned+0x12>
 800236c:	f000 fbaa 	bl	8002ac4 <_sbrk_r>
 8002370:	6030      	str	r0, [r6, #0]
 8002372:	4621      	mov	r1, r4
 8002374:	4628      	mov	r0, r5
 8002376:	f000 fba5 	bl	8002ac4 <_sbrk_r>
 800237a:	1c43      	adds	r3, r0, #1
 800237c:	d103      	bne.n	8002386 <sbrk_aligned+0x26>
 800237e:	f04f 34ff 	mov.w	r4, #4294967295
 8002382:	4620      	mov	r0, r4
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	1cc4      	adds	r4, r0, #3
 8002388:	f024 0403 	bic.w	r4, r4, #3
 800238c:	42a0      	cmp	r0, r4
 800238e:	d0f8      	beq.n	8002382 <sbrk_aligned+0x22>
 8002390:	1a21      	subs	r1, r4, r0
 8002392:	4628      	mov	r0, r5
 8002394:	f000 fb96 	bl	8002ac4 <_sbrk_r>
 8002398:	3001      	adds	r0, #1
 800239a:	d1f2      	bne.n	8002382 <sbrk_aligned+0x22>
 800239c:	e7ef      	b.n	800237e <sbrk_aligned+0x1e>
 800239e:	bf00      	nop
 80023a0:	20000250 	.word	0x20000250

080023a4 <_malloc_r>:
 80023a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023a8:	1ccd      	adds	r5, r1, #3
 80023aa:	f025 0503 	bic.w	r5, r5, #3
 80023ae:	3508      	adds	r5, #8
 80023b0:	2d0c      	cmp	r5, #12
 80023b2:	bf38      	it	cc
 80023b4:	250c      	movcc	r5, #12
 80023b6:	2d00      	cmp	r5, #0
 80023b8:	4606      	mov	r6, r0
 80023ba:	db01      	blt.n	80023c0 <_malloc_r+0x1c>
 80023bc:	42a9      	cmp	r1, r5
 80023be:	d904      	bls.n	80023ca <_malloc_r+0x26>
 80023c0:	230c      	movs	r3, #12
 80023c2:	6033      	str	r3, [r6, #0]
 80023c4:	2000      	movs	r0, #0
 80023c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80024a0 <_malloc_r+0xfc>
 80023ce:	f000 f869 	bl	80024a4 <__malloc_lock>
 80023d2:	f8d8 3000 	ldr.w	r3, [r8]
 80023d6:	461c      	mov	r4, r3
 80023d8:	bb44      	cbnz	r4, 800242c <_malloc_r+0x88>
 80023da:	4629      	mov	r1, r5
 80023dc:	4630      	mov	r0, r6
 80023de:	f7ff ffbf 	bl	8002360 <sbrk_aligned>
 80023e2:	1c43      	adds	r3, r0, #1
 80023e4:	4604      	mov	r4, r0
 80023e6:	d158      	bne.n	800249a <_malloc_r+0xf6>
 80023e8:	f8d8 4000 	ldr.w	r4, [r8]
 80023ec:	4627      	mov	r7, r4
 80023ee:	2f00      	cmp	r7, #0
 80023f0:	d143      	bne.n	800247a <_malloc_r+0xd6>
 80023f2:	2c00      	cmp	r4, #0
 80023f4:	d04b      	beq.n	800248e <_malloc_r+0xea>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	4639      	mov	r1, r7
 80023fa:	4630      	mov	r0, r6
 80023fc:	eb04 0903 	add.w	r9, r4, r3
 8002400:	f000 fb60 	bl	8002ac4 <_sbrk_r>
 8002404:	4581      	cmp	r9, r0
 8002406:	d142      	bne.n	800248e <_malloc_r+0xea>
 8002408:	6821      	ldr	r1, [r4, #0]
 800240a:	4630      	mov	r0, r6
 800240c:	1a6d      	subs	r5, r5, r1
 800240e:	4629      	mov	r1, r5
 8002410:	f7ff ffa6 	bl	8002360 <sbrk_aligned>
 8002414:	3001      	adds	r0, #1
 8002416:	d03a      	beq.n	800248e <_malloc_r+0xea>
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	442b      	add	r3, r5
 800241c:	6023      	str	r3, [r4, #0]
 800241e:	f8d8 3000 	ldr.w	r3, [r8]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	bb62      	cbnz	r2, 8002480 <_malloc_r+0xdc>
 8002426:	f8c8 7000 	str.w	r7, [r8]
 800242a:	e00f      	b.n	800244c <_malloc_r+0xa8>
 800242c:	6822      	ldr	r2, [r4, #0]
 800242e:	1b52      	subs	r2, r2, r5
 8002430:	d420      	bmi.n	8002474 <_malloc_r+0xd0>
 8002432:	2a0b      	cmp	r2, #11
 8002434:	d917      	bls.n	8002466 <_malloc_r+0xc2>
 8002436:	1961      	adds	r1, r4, r5
 8002438:	42a3      	cmp	r3, r4
 800243a:	6025      	str	r5, [r4, #0]
 800243c:	bf18      	it	ne
 800243e:	6059      	strne	r1, [r3, #4]
 8002440:	6863      	ldr	r3, [r4, #4]
 8002442:	bf08      	it	eq
 8002444:	f8c8 1000 	streq.w	r1, [r8]
 8002448:	5162      	str	r2, [r4, r5]
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	4630      	mov	r0, r6
 800244e:	f000 f82f 	bl	80024b0 <__malloc_unlock>
 8002452:	f104 000b 	add.w	r0, r4, #11
 8002456:	1d23      	adds	r3, r4, #4
 8002458:	f020 0007 	bic.w	r0, r0, #7
 800245c:	1ac2      	subs	r2, r0, r3
 800245e:	bf1c      	itt	ne
 8002460:	1a1b      	subne	r3, r3, r0
 8002462:	50a3      	strne	r3, [r4, r2]
 8002464:	e7af      	b.n	80023c6 <_malloc_r+0x22>
 8002466:	6862      	ldr	r2, [r4, #4]
 8002468:	42a3      	cmp	r3, r4
 800246a:	bf0c      	ite	eq
 800246c:	f8c8 2000 	streq.w	r2, [r8]
 8002470:	605a      	strne	r2, [r3, #4]
 8002472:	e7eb      	b.n	800244c <_malloc_r+0xa8>
 8002474:	4623      	mov	r3, r4
 8002476:	6864      	ldr	r4, [r4, #4]
 8002478:	e7ae      	b.n	80023d8 <_malloc_r+0x34>
 800247a:	463c      	mov	r4, r7
 800247c:	687f      	ldr	r7, [r7, #4]
 800247e:	e7b6      	b.n	80023ee <_malloc_r+0x4a>
 8002480:	461a      	mov	r2, r3
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	42a3      	cmp	r3, r4
 8002486:	d1fb      	bne.n	8002480 <_malloc_r+0xdc>
 8002488:	2300      	movs	r3, #0
 800248a:	6053      	str	r3, [r2, #4]
 800248c:	e7de      	b.n	800244c <_malloc_r+0xa8>
 800248e:	230c      	movs	r3, #12
 8002490:	4630      	mov	r0, r6
 8002492:	6033      	str	r3, [r6, #0]
 8002494:	f000 f80c 	bl	80024b0 <__malloc_unlock>
 8002498:	e794      	b.n	80023c4 <_malloc_r+0x20>
 800249a:	6005      	str	r5, [r0, #0]
 800249c:	e7d6      	b.n	800244c <_malloc_r+0xa8>
 800249e:	bf00      	nop
 80024a0:	20000254 	.word	0x20000254

080024a4 <__malloc_lock>:
 80024a4:	4801      	ldr	r0, [pc, #4]	@ (80024ac <__malloc_lock+0x8>)
 80024a6:	f7ff bf11 	b.w	80022cc <__retarget_lock_acquire_recursive>
 80024aa:	bf00      	nop
 80024ac:	2000024c 	.word	0x2000024c

080024b0 <__malloc_unlock>:
 80024b0:	4801      	ldr	r0, [pc, #4]	@ (80024b8 <__malloc_unlock+0x8>)
 80024b2:	f7ff bf0c 	b.w	80022ce <__retarget_lock_release_recursive>
 80024b6:	bf00      	nop
 80024b8:	2000024c 	.word	0x2000024c

080024bc <__ssputs_r>:
 80024bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024c0:	461f      	mov	r7, r3
 80024c2:	688e      	ldr	r6, [r1, #8]
 80024c4:	4682      	mov	sl, r0
 80024c6:	42be      	cmp	r6, r7
 80024c8:	460c      	mov	r4, r1
 80024ca:	4690      	mov	r8, r2
 80024cc:	680b      	ldr	r3, [r1, #0]
 80024ce:	d82d      	bhi.n	800252c <__ssputs_r+0x70>
 80024d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80024d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80024d8:	d026      	beq.n	8002528 <__ssputs_r+0x6c>
 80024da:	6965      	ldr	r5, [r4, #20]
 80024dc:	6909      	ldr	r1, [r1, #16]
 80024de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80024e2:	eba3 0901 	sub.w	r9, r3, r1
 80024e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80024ea:	1c7b      	adds	r3, r7, #1
 80024ec:	444b      	add	r3, r9
 80024ee:	106d      	asrs	r5, r5, #1
 80024f0:	429d      	cmp	r5, r3
 80024f2:	bf38      	it	cc
 80024f4:	461d      	movcc	r5, r3
 80024f6:	0553      	lsls	r3, r2, #21
 80024f8:	d527      	bpl.n	800254a <__ssputs_r+0x8e>
 80024fa:	4629      	mov	r1, r5
 80024fc:	f7ff ff52 	bl	80023a4 <_malloc_r>
 8002500:	4606      	mov	r6, r0
 8002502:	b360      	cbz	r0, 800255e <__ssputs_r+0xa2>
 8002504:	464a      	mov	r2, r9
 8002506:	6921      	ldr	r1, [r4, #16]
 8002508:	f000 fafa 	bl	8002b00 <memcpy>
 800250c:	89a3      	ldrh	r3, [r4, #12]
 800250e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002516:	81a3      	strh	r3, [r4, #12]
 8002518:	6126      	str	r6, [r4, #16]
 800251a:	444e      	add	r6, r9
 800251c:	6026      	str	r6, [r4, #0]
 800251e:	463e      	mov	r6, r7
 8002520:	6165      	str	r5, [r4, #20]
 8002522:	eba5 0509 	sub.w	r5, r5, r9
 8002526:	60a5      	str	r5, [r4, #8]
 8002528:	42be      	cmp	r6, r7
 800252a:	d900      	bls.n	800252e <__ssputs_r+0x72>
 800252c:	463e      	mov	r6, r7
 800252e:	4632      	mov	r2, r6
 8002530:	4641      	mov	r1, r8
 8002532:	6820      	ldr	r0, [r4, #0]
 8002534:	f000 faac 	bl	8002a90 <memmove>
 8002538:	2000      	movs	r0, #0
 800253a:	68a3      	ldr	r3, [r4, #8]
 800253c:	1b9b      	subs	r3, r3, r6
 800253e:	60a3      	str	r3, [r4, #8]
 8002540:	6823      	ldr	r3, [r4, #0]
 8002542:	4433      	add	r3, r6
 8002544:	6023      	str	r3, [r4, #0]
 8002546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800254a:	462a      	mov	r2, r5
 800254c:	f000 fae6 	bl	8002b1c <_realloc_r>
 8002550:	4606      	mov	r6, r0
 8002552:	2800      	cmp	r0, #0
 8002554:	d1e0      	bne.n	8002518 <__ssputs_r+0x5c>
 8002556:	4650      	mov	r0, sl
 8002558:	6921      	ldr	r1, [r4, #16]
 800255a:	f7ff feb9 	bl	80022d0 <_free_r>
 800255e:	230c      	movs	r3, #12
 8002560:	f8ca 3000 	str.w	r3, [sl]
 8002564:	89a3      	ldrh	r3, [r4, #12]
 8002566:	f04f 30ff 	mov.w	r0, #4294967295
 800256a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800256e:	81a3      	strh	r3, [r4, #12]
 8002570:	e7e9      	b.n	8002546 <__ssputs_r+0x8a>
	...

08002574 <_svfiprintf_r>:
 8002574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002578:	4698      	mov	r8, r3
 800257a:	898b      	ldrh	r3, [r1, #12]
 800257c:	4607      	mov	r7, r0
 800257e:	061b      	lsls	r3, r3, #24
 8002580:	460d      	mov	r5, r1
 8002582:	4614      	mov	r4, r2
 8002584:	b09d      	sub	sp, #116	@ 0x74
 8002586:	d510      	bpl.n	80025aa <_svfiprintf_r+0x36>
 8002588:	690b      	ldr	r3, [r1, #16]
 800258a:	b973      	cbnz	r3, 80025aa <_svfiprintf_r+0x36>
 800258c:	2140      	movs	r1, #64	@ 0x40
 800258e:	f7ff ff09 	bl	80023a4 <_malloc_r>
 8002592:	6028      	str	r0, [r5, #0]
 8002594:	6128      	str	r0, [r5, #16]
 8002596:	b930      	cbnz	r0, 80025a6 <_svfiprintf_r+0x32>
 8002598:	230c      	movs	r3, #12
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	b01d      	add	sp, #116	@ 0x74
 80025a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a6:	2340      	movs	r3, #64	@ 0x40
 80025a8:	616b      	str	r3, [r5, #20]
 80025aa:	2300      	movs	r3, #0
 80025ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80025ae:	2320      	movs	r3, #32
 80025b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80025b4:	2330      	movs	r3, #48	@ 0x30
 80025b6:	f04f 0901 	mov.w	r9, #1
 80025ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80025be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002758 <_svfiprintf_r+0x1e4>
 80025c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80025c6:	4623      	mov	r3, r4
 80025c8:	469a      	mov	sl, r3
 80025ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025ce:	b10a      	cbz	r2, 80025d4 <_svfiprintf_r+0x60>
 80025d0:	2a25      	cmp	r2, #37	@ 0x25
 80025d2:	d1f9      	bne.n	80025c8 <_svfiprintf_r+0x54>
 80025d4:	ebba 0b04 	subs.w	fp, sl, r4
 80025d8:	d00b      	beq.n	80025f2 <_svfiprintf_r+0x7e>
 80025da:	465b      	mov	r3, fp
 80025dc:	4622      	mov	r2, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	4638      	mov	r0, r7
 80025e2:	f7ff ff6b 	bl	80024bc <__ssputs_r>
 80025e6:	3001      	adds	r0, #1
 80025e8:	f000 80a7 	beq.w	800273a <_svfiprintf_r+0x1c6>
 80025ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80025ee:	445a      	add	r2, fp
 80025f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80025f2:	f89a 3000 	ldrb.w	r3, [sl]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 809f 	beq.w	800273a <_svfiprintf_r+0x1c6>
 80025fc:	2300      	movs	r3, #0
 80025fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002606:	f10a 0a01 	add.w	sl, sl, #1
 800260a:	9304      	str	r3, [sp, #16]
 800260c:	9307      	str	r3, [sp, #28]
 800260e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002612:	931a      	str	r3, [sp, #104]	@ 0x68
 8002614:	4654      	mov	r4, sl
 8002616:	2205      	movs	r2, #5
 8002618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800261c:	484e      	ldr	r0, [pc, #312]	@ (8002758 <_svfiprintf_r+0x1e4>)
 800261e:	f000 fa61 	bl	8002ae4 <memchr>
 8002622:	9a04      	ldr	r2, [sp, #16]
 8002624:	b9d8      	cbnz	r0, 800265e <_svfiprintf_r+0xea>
 8002626:	06d0      	lsls	r0, r2, #27
 8002628:	bf44      	itt	mi
 800262a:	2320      	movmi	r3, #32
 800262c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002630:	0711      	lsls	r1, r2, #28
 8002632:	bf44      	itt	mi
 8002634:	232b      	movmi	r3, #43	@ 0x2b
 8002636:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800263a:	f89a 3000 	ldrb.w	r3, [sl]
 800263e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002640:	d015      	beq.n	800266e <_svfiprintf_r+0xfa>
 8002642:	4654      	mov	r4, sl
 8002644:	2000      	movs	r0, #0
 8002646:	f04f 0c0a 	mov.w	ip, #10
 800264a:	9a07      	ldr	r2, [sp, #28]
 800264c:	4621      	mov	r1, r4
 800264e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002652:	3b30      	subs	r3, #48	@ 0x30
 8002654:	2b09      	cmp	r3, #9
 8002656:	d94b      	bls.n	80026f0 <_svfiprintf_r+0x17c>
 8002658:	b1b0      	cbz	r0, 8002688 <_svfiprintf_r+0x114>
 800265a:	9207      	str	r2, [sp, #28]
 800265c:	e014      	b.n	8002688 <_svfiprintf_r+0x114>
 800265e:	eba0 0308 	sub.w	r3, r0, r8
 8002662:	fa09 f303 	lsl.w	r3, r9, r3
 8002666:	4313      	orrs	r3, r2
 8002668:	46a2      	mov	sl, r4
 800266a:	9304      	str	r3, [sp, #16]
 800266c:	e7d2      	b.n	8002614 <_svfiprintf_r+0xa0>
 800266e:	9b03      	ldr	r3, [sp, #12]
 8002670:	1d19      	adds	r1, r3, #4
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	9103      	str	r1, [sp, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	bfbb      	ittet	lt
 800267a:	425b      	neglt	r3, r3
 800267c:	f042 0202 	orrlt.w	r2, r2, #2
 8002680:	9307      	strge	r3, [sp, #28]
 8002682:	9307      	strlt	r3, [sp, #28]
 8002684:	bfb8      	it	lt
 8002686:	9204      	strlt	r2, [sp, #16]
 8002688:	7823      	ldrb	r3, [r4, #0]
 800268a:	2b2e      	cmp	r3, #46	@ 0x2e
 800268c:	d10a      	bne.n	80026a4 <_svfiprintf_r+0x130>
 800268e:	7863      	ldrb	r3, [r4, #1]
 8002690:	2b2a      	cmp	r3, #42	@ 0x2a
 8002692:	d132      	bne.n	80026fa <_svfiprintf_r+0x186>
 8002694:	9b03      	ldr	r3, [sp, #12]
 8002696:	3402      	adds	r4, #2
 8002698:	1d1a      	adds	r2, r3, #4
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	9203      	str	r2, [sp, #12]
 800269e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80026a2:	9305      	str	r3, [sp, #20]
 80026a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800275c <_svfiprintf_r+0x1e8>
 80026a8:	2203      	movs	r2, #3
 80026aa:	4650      	mov	r0, sl
 80026ac:	7821      	ldrb	r1, [r4, #0]
 80026ae:	f000 fa19 	bl	8002ae4 <memchr>
 80026b2:	b138      	cbz	r0, 80026c4 <_svfiprintf_r+0x150>
 80026b4:	2240      	movs	r2, #64	@ 0x40
 80026b6:	9b04      	ldr	r3, [sp, #16]
 80026b8:	eba0 000a 	sub.w	r0, r0, sl
 80026bc:	4082      	lsls	r2, r0
 80026be:	4313      	orrs	r3, r2
 80026c0:	3401      	adds	r4, #1
 80026c2:	9304      	str	r3, [sp, #16]
 80026c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026c8:	2206      	movs	r2, #6
 80026ca:	4825      	ldr	r0, [pc, #148]	@ (8002760 <_svfiprintf_r+0x1ec>)
 80026cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80026d0:	f000 fa08 	bl	8002ae4 <memchr>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d036      	beq.n	8002746 <_svfiprintf_r+0x1d2>
 80026d8:	4b22      	ldr	r3, [pc, #136]	@ (8002764 <_svfiprintf_r+0x1f0>)
 80026da:	bb1b      	cbnz	r3, 8002724 <_svfiprintf_r+0x1b0>
 80026dc:	9b03      	ldr	r3, [sp, #12]
 80026de:	3307      	adds	r3, #7
 80026e0:	f023 0307 	bic.w	r3, r3, #7
 80026e4:	3308      	adds	r3, #8
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026ea:	4433      	add	r3, r6
 80026ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80026ee:	e76a      	b.n	80025c6 <_svfiprintf_r+0x52>
 80026f0:	460c      	mov	r4, r1
 80026f2:	2001      	movs	r0, #1
 80026f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80026f8:	e7a8      	b.n	800264c <_svfiprintf_r+0xd8>
 80026fa:	2300      	movs	r3, #0
 80026fc:	f04f 0c0a 	mov.w	ip, #10
 8002700:	4619      	mov	r1, r3
 8002702:	3401      	adds	r4, #1
 8002704:	9305      	str	r3, [sp, #20]
 8002706:	4620      	mov	r0, r4
 8002708:	f810 2b01 	ldrb.w	r2, [r0], #1
 800270c:	3a30      	subs	r2, #48	@ 0x30
 800270e:	2a09      	cmp	r2, #9
 8002710:	d903      	bls.n	800271a <_svfiprintf_r+0x1a6>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0c6      	beq.n	80026a4 <_svfiprintf_r+0x130>
 8002716:	9105      	str	r1, [sp, #20]
 8002718:	e7c4      	b.n	80026a4 <_svfiprintf_r+0x130>
 800271a:	4604      	mov	r4, r0
 800271c:	2301      	movs	r3, #1
 800271e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002722:	e7f0      	b.n	8002706 <_svfiprintf_r+0x192>
 8002724:	ab03      	add	r3, sp, #12
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	462a      	mov	r2, r5
 800272a:	4638      	mov	r0, r7
 800272c:	4b0e      	ldr	r3, [pc, #56]	@ (8002768 <_svfiprintf_r+0x1f4>)
 800272e:	a904      	add	r1, sp, #16
 8002730:	f3af 8000 	nop.w
 8002734:	1c42      	adds	r2, r0, #1
 8002736:	4606      	mov	r6, r0
 8002738:	d1d6      	bne.n	80026e8 <_svfiprintf_r+0x174>
 800273a:	89ab      	ldrh	r3, [r5, #12]
 800273c:	065b      	lsls	r3, r3, #25
 800273e:	f53f af2d 	bmi.w	800259c <_svfiprintf_r+0x28>
 8002742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002744:	e72c      	b.n	80025a0 <_svfiprintf_r+0x2c>
 8002746:	ab03      	add	r3, sp, #12
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	462a      	mov	r2, r5
 800274c:	4638      	mov	r0, r7
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <_svfiprintf_r+0x1f4>)
 8002750:	a904      	add	r1, sp, #16
 8002752:	f000 f87d 	bl	8002850 <_printf_i>
 8002756:	e7ed      	b.n	8002734 <_svfiprintf_r+0x1c0>
 8002758:	08002be2 	.word	0x08002be2
 800275c:	08002be8 	.word	0x08002be8
 8002760:	08002bec 	.word	0x08002bec
 8002764:	00000000 	.word	0x00000000
 8002768:	080024bd 	.word	0x080024bd

0800276c <_printf_common>:
 800276c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002770:	4616      	mov	r6, r2
 8002772:	4698      	mov	r8, r3
 8002774:	688a      	ldr	r2, [r1, #8]
 8002776:	690b      	ldr	r3, [r1, #16]
 8002778:	4607      	mov	r7, r0
 800277a:	4293      	cmp	r3, r2
 800277c:	bfb8      	it	lt
 800277e:	4613      	movlt	r3, r2
 8002780:	6033      	str	r3, [r6, #0]
 8002782:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002786:	460c      	mov	r4, r1
 8002788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800278c:	b10a      	cbz	r2, 8002792 <_printf_common+0x26>
 800278e:	3301      	adds	r3, #1
 8002790:	6033      	str	r3, [r6, #0]
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	0699      	lsls	r1, r3, #26
 8002796:	bf42      	ittt	mi
 8002798:	6833      	ldrmi	r3, [r6, #0]
 800279a:	3302      	addmi	r3, #2
 800279c:	6033      	strmi	r3, [r6, #0]
 800279e:	6825      	ldr	r5, [r4, #0]
 80027a0:	f015 0506 	ands.w	r5, r5, #6
 80027a4:	d106      	bne.n	80027b4 <_printf_common+0x48>
 80027a6:	f104 0a19 	add.w	sl, r4, #25
 80027aa:	68e3      	ldr	r3, [r4, #12]
 80027ac:	6832      	ldr	r2, [r6, #0]
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	42ab      	cmp	r3, r5
 80027b2:	dc2b      	bgt.n	800280c <_printf_common+0xa0>
 80027b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80027b8:	6822      	ldr	r2, [r4, #0]
 80027ba:	3b00      	subs	r3, #0
 80027bc:	bf18      	it	ne
 80027be:	2301      	movne	r3, #1
 80027c0:	0692      	lsls	r2, r2, #26
 80027c2:	d430      	bmi.n	8002826 <_printf_common+0xba>
 80027c4:	4641      	mov	r1, r8
 80027c6:	4638      	mov	r0, r7
 80027c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027cc:	47c8      	blx	r9
 80027ce:	3001      	adds	r0, #1
 80027d0:	d023      	beq.n	800281a <_printf_common+0xae>
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	6922      	ldr	r2, [r4, #16]
 80027d6:	f003 0306 	and.w	r3, r3, #6
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf14      	ite	ne
 80027de:	2500      	movne	r5, #0
 80027e0:	6833      	ldreq	r3, [r6, #0]
 80027e2:	f04f 0600 	mov.w	r6, #0
 80027e6:	bf08      	it	eq
 80027e8:	68e5      	ldreq	r5, [r4, #12]
 80027ea:	f104 041a 	add.w	r4, r4, #26
 80027ee:	bf08      	it	eq
 80027f0:	1aed      	subeq	r5, r5, r3
 80027f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027f6:	bf08      	it	eq
 80027f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bfc4      	itt	gt
 8002800:	1a9b      	subgt	r3, r3, r2
 8002802:	18ed      	addgt	r5, r5, r3
 8002804:	42b5      	cmp	r5, r6
 8002806:	d11a      	bne.n	800283e <_printf_common+0xd2>
 8002808:	2000      	movs	r0, #0
 800280a:	e008      	b.n	800281e <_printf_common+0xb2>
 800280c:	2301      	movs	r3, #1
 800280e:	4652      	mov	r2, sl
 8002810:	4641      	mov	r1, r8
 8002812:	4638      	mov	r0, r7
 8002814:	47c8      	blx	r9
 8002816:	3001      	adds	r0, #1
 8002818:	d103      	bne.n	8002822 <_printf_common+0xb6>
 800281a:	f04f 30ff 	mov.w	r0, #4294967295
 800281e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002822:	3501      	adds	r5, #1
 8002824:	e7c1      	b.n	80027aa <_printf_common+0x3e>
 8002826:	2030      	movs	r0, #48	@ 0x30
 8002828:	18e1      	adds	r1, r4, r3
 800282a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002834:	4422      	add	r2, r4
 8002836:	3302      	adds	r3, #2
 8002838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800283c:	e7c2      	b.n	80027c4 <_printf_common+0x58>
 800283e:	2301      	movs	r3, #1
 8002840:	4622      	mov	r2, r4
 8002842:	4641      	mov	r1, r8
 8002844:	4638      	mov	r0, r7
 8002846:	47c8      	blx	r9
 8002848:	3001      	adds	r0, #1
 800284a:	d0e6      	beq.n	800281a <_printf_common+0xae>
 800284c:	3601      	adds	r6, #1
 800284e:	e7d9      	b.n	8002804 <_printf_common+0x98>

08002850 <_printf_i>:
 8002850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	7e0f      	ldrb	r7, [r1, #24]
 8002856:	4691      	mov	r9, r2
 8002858:	2f78      	cmp	r7, #120	@ 0x78
 800285a:	4680      	mov	r8, r0
 800285c:	460c      	mov	r4, r1
 800285e:	469a      	mov	sl, r3
 8002860:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002866:	d807      	bhi.n	8002878 <_printf_i+0x28>
 8002868:	2f62      	cmp	r7, #98	@ 0x62
 800286a:	d80a      	bhi.n	8002882 <_printf_i+0x32>
 800286c:	2f00      	cmp	r7, #0
 800286e:	f000 80d3 	beq.w	8002a18 <_printf_i+0x1c8>
 8002872:	2f58      	cmp	r7, #88	@ 0x58
 8002874:	f000 80ba 	beq.w	80029ec <_printf_i+0x19c>
 8002878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800287c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002880:	e03a      	b.n	80028f8 <_printf_i+0xa8>
 8002882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002886:	2b15      	cmp	r3, #21
 8002888:	d8f6      	bhi.n	8002878 <_printf_i+0x28>
 800288a:	a101      	add	r1, pc, #4	@ (adr r1, 8002890 <_printf_i+0x40>)
 800288c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002890:	080028e9 	.word	0x080028e9
 8002894:	080028fd 	.word	0x080028fd
 8002898:	08002879 	.word	0x08002879
 800289c:	08002879 	.word	0x08002879
 80028a0:	08002879 	.word	0x08002879
 80028a4:	08002879 	.word	0x08002879
 80028a8:	080028fd 	.word	0x080028fd
 80028ac:	08002879 	.word	0x08002879
 80028b0:	08002879 	.word	0x08002879
 80028b4:	08002879 	.word	0x08002879
 80028b8:	08002879 	.word	0x08002879
 80028bc:	080029ff 	.word	0x080029ff
 80028c0:	08002927 	.word	0x08002927
 80028c4:	080029b9 	.word	0x080029b9
 80028c8:	08002879 	.word	0x08002879
 80028cc:	08002879 	.word	0x08002879
 80028d0:	08002a21 	.word	0x08002a21
 80028d4:	08002879 	.word	0x08002879
 80028d8:	08002927 	.word	0x08002927
 80028dc:	08002879 	.word	0x08002879
 80028e0:	08002879 	.word	0x08002879
 80028e4:	080029c1 	.word	0x080029c1
 80028e8:	6833      	ldr	r3, [r6, #0]
 80028ea:	1d1a      	adds	r2, r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6032      	str	r2, [r6, #0]
 80028f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028f8:	2301      	movs	r3, #1
 80028fa:	e09e      	b.n	8002a3a <_printf_i+0x1ea>
 80028fc:	6833      	ldr	r3, [r6, #0]
 80028fe:	6820      	ldr	r0, [r4, #0]
 8002900:	1d19      	adds	r1, r3, #4
 8002902:	6031      	str	r1, [r6, #0]
 8002904:	0606      	lsls	r6, r0, #24
 8002906:	d501      	bpl.n	800290c <_printf_i+0xbc>
 8002908:	681d      	ldr	r5, [r3, #0]
 800290a:	e003      	b.n	8002914 <_printf_i+0xc4>
 800290c:	0645      	lsls	r5, r0, #25
 800290e:	d5fb      	bpl.n	8002908 <_printf_i+0xb8>
 8002910:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002914:	2d00      	cmp	r5, #0
 8002916:	da03      	bge.n	8002920 <_printf_i+0xd0>
 8002918:	232d      	movs	r3, #45	@ 0x2d
 800291a:	426d      	negs	r5, r5
 800291c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002920:	230a      	movs	r3, #10
 8002922:	4859      	ldr	r0, [pc, #356]	@ (8002a88 <_printf_i+0x238>)
 8002924:	e011      	b.n	800294a <_printf_i+0xfa>
 8002926:	6821      	ldr	r1, [r4, #0]
 8002928:	6833      	ldr	r3, [r6, #0]
 800292a:	0608      	lsls	r0, r1, #24
 800292c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002930:	d402      	bmi.n	8002938 <_printf_i+0xe8>
 8002932:	0649      	lsls	r1, r1, #25
 8002934:	bf48      	it	mi
 8002936:	b2ad      	uxthmi	r5, r5
 8002938:	2f6f      	cmp	r7, #111	@ 0x6f
 800293a:	6033      	str	r3, [r6, #0]
 800293c:	bf14      	ite	ne
 800293e:	230a      	movne	r3, #10
 8002940:	2308      	moveq	r3, #8
 8002942:	4851      	ldr	r0, [pc, #324]	@ (8002a88 <_printf_i+0x238>)
 8002944:	2100      	movs	r1, #0
 8002946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800294a:	6866      	ldr	r6, [r4, #4]
 800294c:	2e00      	cmp	r6, #0
 800294e:	bfa8      	it	ge
 8002950:	6821      	ldrge	r1, [r4, #0]
 8002952:	60a6      	str	r6, [r4, #8]
 8002954:	bfa4      	itt	ge
 8002956:	f021 0104 	bicge.w	r1, r1, #4
 800295a:	6021      	strge	r1, [r4, #0]
 800295c:	b90d      	cbnz	r5, 8002962 <_printf_i+0x112>
 800295e:	2e00      	cmp	r6, #0
 8002960:	d04b      	beq.n	80029fa <_printf_i+0x1aa>
 8002962:	4616      	mov	r6, r2
 8002964:	fbb5 f1f3 	udiv	r1, r5, r3
 8002968:	fb03 5711 	mls	r7, r3, r1, r5
 800296c:	5dc7      	ldrb	r7, [r0, r7]
 800296e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002972:	462f      	mov	r7, r5
 8002974:	42bb      	cmp	r3, r7
 8002976:	460d      	mov	r5, r1
 8002978:	d9f4      	bls.n	8002964 <_printf_i+0x114>
 800297a:	2b08      	cmp	r3, #8
 800297c:	d10b      	bne.n	8002996 <_printf_i+0x146>
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	07df      	lsls	r7, r3, #31
 8002982:	d508      	bpl.n	8002996 <_printf_i+0x146>
 8002984:	6923      	ldr	r3, [r4, #16]
 8002986:	6861      	ldr	r1, [r4, #4]
 8002988:	4299      	cmp	r1, r3
 800298a:	bfde      	ittt	le
 800298c:	2330      	movle	r3, #48	@ 0x30
 800298e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002992:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002996:	1b92      	subs	r2, r2, r6
 8002998:	6122      	str	r2, [r4, #16]
 800299a:	464b      	mov	r3, r9
 800299c:	4621      	mov	r1, r4
 800299e:	4640      	mov	r0, r8
 80029a0:	f8cd a000 	str.w	sl, [sp]
 80029a4:	aa03      	add	r2, sp, #12
 80029a6:	f7ff fee1 	bl	800276c <_printf_common>
 80029aa:	3001      	adds	r0, #1
 80029ac:	d14a      	bne.n	8002a44 <_printf_i+0x1f4>
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	b004      	add	sp, #16
 80029b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	f043 0320 	orr.w	r3, r3, #32
 80029be:	6023      	str	r3, [r4, #0]
 80029c0:	2778      	movs	r7, #120	@ 0x78
 80029c2:	4832      	ldr	r0, [pc, #200]	@ (8002a8c <_printf_i+0x23c>)
 80029c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	6831      	ldr	r1, [r6, #0]
 80029cc:	061f      	lsls	r7, r3, #24
 80029ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80029d2:	d402      	bmi.n	80029da <_printf_i+0x18a>
 80029d4:	065f      	lsls	r7, r3, #25
 80029d6:	bf48      	it	mi
 80029d8:	b2ad      	uxthmi	r5, r5
 80029da:	6031      	str	r1, [r6, #0]
 80029dc:	07d9      	lsls	r1, r3, #31
 80029de:	bf44      	itt	mi
 80029e0:	f043 0320 	orrmi.w	r3, r3, #32
 80029e4:	6023      	strmi	r3, [r4, #0]
 80029e6:	b11d      	cbz	r5, 80029f0 <_printf_i+0x1a0>
 80029e8:	2310      	movs	r3, #16
 80029ea:	e7ab      	b.n	8002944 <_printf_i+0xf4>
 80029ec:	4826      	ldr	r0, [pc, #152]	@ (8002a88 <_printf_i+0x238>)
 80029ee:	e7e9      	b.n	80029c4 <_printf_i+0x174>
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	f023 0320 	bic.w	r3, r3, #32
 80029f6:	6023      	str	r3, [r4, #0]
 80029f8:	e7f6      	b.n	80029e8 <_printf_i+0x198>
 80029fa:	4616      	mov	r6, r2
 80029fc:	e7bd      	b.n	800297a <_printf_i+0x12a>
 80029fe:	6833      	ldr	r3, [r6, #0]
 8002a00:	6825      	ldr	r5, [r4, #0]
 8002a02:	1d18      	adds	r0, r3, #4
 8002a04:	6961      	ldr	r1, [r4, #20]
 8002a06:	6030      	str	r0, [r6, #0]
 8002a08:	062e      	lsls	r6, r5, #24
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	d501      	bpl.n	8002a12 <_printf_i+0x1c2>
 8002a0e:	6019      	str	r1, [r3, #0]
 8002a10:	e002      	b.n	8002a18 <_printf_i+0x1c8>
 8002a12:	0668      	lsls	r0, r5, #25
 8002a14:	d5fb      	bpl.n	8002a0e <_printf_i+0x1be>
 8002a16:	8019      	strh	r1, [r3, #0]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4616      	mov	r6, r2
 8002a1c:	6123      	str	r3, [r4, #16]
 8002a1e:	e7bc      	b.n	800299a <_printf_i+0x14a>
 8002a20:	6833      	ldr	r3, [r6, #0]
 8002a22:	2100      	movs	r1, #0
 8002a24:	1d1a      	adds	r2, r3, #4
 8002a26:	6032      	str	r2, [r6, #0]
 8002a28:	681e      	ldr	r6, [r3, #0]
 8002a2a:	6862      	ldr	r2, [r4, #4]
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f000 f859 	bl	8002ae4 <memchr>
 8002a32:	b108      	cbz	r0, 8002a38 <_printf_i+0x1e8>
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	6060      	str	r0, [r4, #4]
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	6123      	str	r3, [r4, #16]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a42:	e7aa      	b.n	800299a <_printf_i+0x14a>
 8002a44:	4632      	mov	r2, r6
 8002a46:	4649      	mov	r1, r9
 8002a48:	4640      	mov	r0, r8
 8002a4a:	6923      	ldr	r3, [r4, #16]
 8002a4c:	47d0      	blx	sl
 8002a4e:	3001      	adds	r0, #1
 8002a50:	d0ad      	beq.n	80029ae <_printf_i+0x15e>
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	079b      	lsls	r3, r3, #30
 8002a56:	d413      	bmi.n	8002a80 <_printf_i+0x230>
 8002a58:	68e0      	ldr	r0, [r4, #12]
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	4298      	cmp	r0, r3
 8002a5e:	bfb8      	it	lt
 8002a60:	4618      	movlt	r0, r3
 8002a62:	e7a6      	b.n	80029b2 <_printf_i+0x162>
 8002a64:	2301      	movs	r3, #1
 8002a66:	4632      	mov	r2, r6
 8002a68:	4649      	mov	r1, r9
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	47d0      	blx	sl
 8002a6e:	3001      	adds	r0, #1
 8002a70:	d09d      	beq.n	80029ae <_printf_i+0x15e>
 8002a72:	3501      	adds	r5, #1
 8002a74:	68e3      	ldr	r3, [r4, #12]
 8002a76:	9903      	ldr	r1, [sp, #12]
 8002a78:	1a5b      	subs	r3, r3, r1
 8002a7a:	42ab      	cmp	r3, r5
 8002a7c:	dcf2      	bgt.n	8002a64 <_printf_i+0x214>
 8002a7e:	e7eb      	b.n	8002a58 <_printf_i+0x208>
 8002a80:	2500      	movs	r5, #0
 8002a82:	f104 0619 	add.w	r6, r4, #25
 8002a86:	e7f5      	b.n	8002a74 <_printf_i+0x224>
 8002a88:	08002bf3 	.word	0x08002bf3
 8002a8c:	08002c04 	.word	0x08002c04

08002a90 <memmove>:
 8002a90:	4288      	cmp	r0, r1
 8002a92:	b510      	push	{r4, lr}
 8002a94:	eb01 0402 	add.w	r4, r1, r2
 8002a98:	d902      	bls.n	8002aa0 <memmove+0x10>
 8002a9a:	4284      	cmp	r4, r0
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	d807      	bhi.n	8002ab0 <memmove+0x20>
 8002aa0:	1e43      	subs	r3, r0, #1
 8002aa2:	42a1      	cmp	r1, r4
 8002aa4:	d008      	beq.n	8002ab8 <memmove+0x28>
 8002aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002aaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002aae:	e7f8      	b.n	8002aa2 <memmove+0x12>
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	4402      	add	r2, r0
 8002ab4:	428a      	cmp	r2, r1
 8002ab6:	d100      	bne.n	8002aba <memmove+0x2a>
 8002ab8:	bd10      	pop	{r4, pc}
 8002aba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002abe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002ac2:	e7f7      	b.n	8002ab4 <memmove+0x24>

08002ac4 <_sbrk_r>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	4d05      	ldr	r5, [pc, #20]	@ (8002ae0 <_sbrk_r+0x1c>)
 8002aca:	4604      	mov	r4, r0
 8002acc:	4608      	mov	r0, r1
 8002ace:	602b      	str	r3, [r5, #0]
 8002ad0:	f7fd fe2e 	bl	8000730 <_sbrk>
 8002ad4:	1c43      	adds	r3, r0, #1
 8002ad6:	d102      	bne.n	8002ade <_sbrk_r+0x1a>
 8002ad8:	682b      	ldr	r3, [r5, #0]
 8002ada:	b103      	cbz	r3, 8002ade <_sbrk_r+0x1a>
 8002adc:	6023      	str	r3, [r4, #0]
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	20000248 	.word	0x20000248

08002ae4 <memchr>:
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	b510      	push	{r4, lr}
 8002ae8:	b2c9      	uxtb	r1, r1
 8002aea:	4402      	add	r2, r0
 8002aec:	4293      	cmp	r3, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	d101      	bne.n	8002af6 <memchr+0x12>
 8002af2:	2000      	movs	r0, #0
 8002af4:	e003      	b.n	8002afe <memchr+0x1a>
 8002af6:	7804      	ldrb	r4, [r0, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	428c      	cmp	r4, r1
 8002afc:	d1f6      	bne.n	8002aec <memchr+0x8>
 8002afe:	bd10      	pop	{r4, pc}

08002b00 <memcpy>:
 8002b00:	440a      	add	r2, r1
 8002b02:	4291      	cmp	r1, r2
 8002b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b08:	d100      	bne.n	8002b0c <memcpy+0xc>
 8002b0a:	4770      	bx	lr
 8002b0c:	b510      	push	{r4, lr}
 8002b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b12:	4291      	cmp	r1, r2
 8002b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b18:	d1f9      	bne.n	8002b0e <memcpy+0xe>
 8002b1a:	bd10      	pop	{r4, pc}

08002b1c <_realloc_r>:
 8002b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b20:	4680      	mov	r8, r0
 8002b22:	4615      	mov	r5, r2
 8002b24:	460c      	mov	r4, r1
 8002b26:	b921      	cbnz	r1, 8002b32 <_realloc_r+0x16>
 8002b28:	4611      	mov	r1, r2
 8002b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b2e:	f7ff bc39 	b.w	80023a4 <_malloc_r>
 8002b32:	b92a      	cbnz	r2, 8002b40 <_realloc_r+0x24>
 8002b34:	f7ff fbcc 	bl	80022d0 <_free_r>
 8002b38:	2400      	movs	r4, #0
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b40:	f000 f81a 	bl	8002b78 <_malloc_usable_size_r>
 8002b44:	4285      	cmp	r5, r0
 8002b46:	4606      	mov	r6, r0
 8002b48:	d802      	bhi.n	8002b50 <_realloc_r+0x34>
 8002b4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002b4e:	d8f4      	bhi.n	8002b3a <_realloc_r+0x1e>
 8002b50:	4629      	mov	r1, r5
 8002b52:	4640      	mov	r0, r8
 8002b54:	f7ff fc26 	bl	80023a4 <_malloc_r>
 8002b58:	4607      	mov	r7, r0
 8002b5a:	2800      	cmp	r0, #0
 8002b5c:	d0ec      	beq.n	8002b38 <_realloc_r+0x1c>
 8002b5e:	42b5      	cmp	r5, r6
 8002b60:	462a      	mov	r2, r5
 8002b62:	4621      	mov	r1, r4
 8002b64:	bf28      	it	cs
 8002b66:	4632      	movcs	r2, r6
 8002b68:	f7ff ffca 	bl	8002b00 <memcpy>
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	4640      	mov	r0, r8
 8002b70:	f7ff fbae 	bl	80022d0 <_free_r>
 8002b74:	463c      	mov	r4, r7
 8002b76:	e7e0      	b.n	8002b3a <_realloc_r+0x1e>

08002b78 <_malloc_usable_size_r>:
 8002b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b7c:	1f18      	subs	r0, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bfbc      	itt	lt
 8002b82:	580b      	ldrlt	r3, [r1, r0]
 8002b84:	18c0      	addlt	r0, r0, r3
 8002b86:	4770      	bx	lr

08002b88 <_init>:
 8002b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8a:	bf00      	nop
 8002b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8e:	bc08      	pop	{r3}
 8002b90:	469e      	mov	lr, r3
 8002b92:	4770      	bx	lr

08002b94 <_fini>:
 8002b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b96:	bf00      	nop
 8002b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b9a:	bc08      	pop	{r3}
 8002b9c:	469e      	mov	lr, r3
 8002b9e:	4770      	bx	lr
